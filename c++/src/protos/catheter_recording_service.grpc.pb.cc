// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: catheter_recording_service.proto

#include "catheter_recording_service.pb.h"
#include "catheter_recording_service.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace telerobotics {
namespace protos {

static const char* CatheterRecordingService_method_names[] = {
  "/telerobotics.protos.CatheterRecordingService/Record",
  "/telerobotics.protos.CatheterRecordingService/AckReceived",
  "/telerobotics.protos.CatheterRecordingService/List",
};

std::unique_ptr< CatheterRecordingService::Stub> CatheterRecordingService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< CatheterRecordingService::Stub> stub(new CatheterRecordingService::Stub(channel));
  return stub;
}

CatheterRecordingService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_Record_(CatheterRecordingService_method_names[0], ::grpc::internal::RpcMethod::CLIENT_STREAMING, channel)
  , rpcmethod_AckReceived_(CatheterRecordingService_method_names[1], ::grpc::internal::RpcMethod::CLIENT_STREAMING, channel)
  , rpcmethod_List_(CatheterRecordingService_method_names[2], ::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  {}

::grpc::ClientWriter< ::telerobotics::protos::RecordCatheterRequest>* CatheterRecordingService::Stub::RecordRaw(::grpc::ClientContext* context, ::telerobotics::protos::RecordCatheterResponse* response) {
  return ::grpc::internal::ClientWriterFactory< ::telerobotics::protos::RecordCatheterRequest>::Create(channel_.get(), rpcmethod_Record_, context, response);
}

void CatheterRecordingService::Stub::experimental_async::Record(::grpc::ClientContext* context, ::telerobotics::protos::RecordCatheterResponse* response, ::grpc::experimental::ClientWriteReactor< ::telerobotics::protos::RecordCatheterRequest>* reactor) {
  ::grpc::internal::ClientCallbackWriterFactory< ::telerobotics::protos::RecordCatheterRequest>::Create(stub_->channel_.get(), stub_->rpcmethod_Record_, context, response, reactor);
}

::grpc::ClientAsyncWriter< ::telerobotics::protos::RecordCatheterRequest>* CatheterRecordingService::Stub::AsyncRecordRaw(::grpc::ClientContext* context, ::telerobotics::protos::RecordCatheterResponse* response, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncWriterFactory< ::telerobotics::protos::RecordCatheterRequest>::Create(channel_.get(), cq, rpcmethod_Record_, context, response, true, tag);
}

::grpc::ClientAsyncWriter< ::telerobotics::protos::RecordCatheterRequest>* CatheterRecordingService::Stub::PrepareAsyncRecordRaw(::grpc::ClientContext* context, ::telerobotics::protos::RecordCatheterResponse* response, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncWriterFactory< ::telerobotics::protos::RecordCatheterRequest>::Create(channel_.get(), cq, rpcmethod_Record_, context, response, false, nullptr);
}

::grpc::ClientWriter< ::telerobotics::protos::AckReceivedCatheterRequest>* CatheterRecordingService::Stub::AckReceivedRaw(::grpc::ClientContext* context, ::telerobotics::protos::AckReceivedCatheterResponse* response) {
  return ::grpc::internal::ClientWriterFactory< ::telerobotics::protos::AckReceivedCatheterRequest>::Create(channel_.get(), rpcmethod_AckReceived_, context, response);
}

void CatheterRecordingService::Stub::experimental_async::AckReceived(::grpc::ClientContext* context, ::telerobotics::protos::AckReceivedCatheterResponse* response, ::grpc::experimental::ClientWriteReactor< ::telerobotics::protos::AckReceivedCatheterRequest>* reactor) {
  ::grpc::internal::ClientCallbackWriterFactory< ::telerobotics::protos::AckReceivedCatheterRequest>::Create(stub_->channel_.get(), stub_->rpcmethod_AckReceived_, context, response, reactor);
}

::grpc::ClientAsyncWriter< ::telerobotics::protos::AckReceivedCatheterRequest>* CatheterRecordingService::Stub::AsyncAckReceivedRaw(::grpc::ClientContext* context, ::telerobotics::protos::AckReceivedCatheterResponse* response, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncWriterFactory< ::telerobotics::protos::AckReceivedCatheterRequest>::Create(channel_.get(), cq, rpcmethod_AckReceived_, context, response, true, tag);
}

::grpc::ClientAsyncWriter< ::telerobotics::protos::AckReceivedCatheterRequest>* CatheterRecordingService::Stub::PrepareAsyncAckReceivedRaw(::grpc::ClientContext* context, ::telerobotics::protos::AckReceivedCatheterResponse* response, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncWriterFactory< ::telerobotics::protos::AckReceivedCatheterRequest>::Create(channel_.get(), cq, rpcmethod_AckReceived_, context, response, false, nullptr);
}

::grpc::ClientReader< ::telerobotics::protos::ListCatheterResponse>* CatheterRecordingService::Stub::ListRaw(::grpc::ClientContext* context, const ::telerobotics::protos::ListCatheterRequest& request) {
  return ::grpc::internal::ClientReaderFactory< ::telerobotics::protos::ListCatheterResponse>::Create(channel_.get(), rpcmethod_List_, context, request);
}

void CatheterRecordingService::Stub::experimental_async::List(::grpc::ClientContext* context, ::telerobotics::protos::ListCatheterRequest* request, ::grpc::experimental::ClientReadReactor< ::telerobotics::protos::ListCatheterResponse>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::telerobotics::protos::ListCatheterResponse>::Create(stub_->channel_.get(), stub_->rpcmethod_List_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::telerobotics::protos::ListCatheterResponse>* CatheterRecordingService::Stub::AsyncListRaw(::grpc::ClientContext* context, const ::telerobotics::protos::ListCatheterRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::telerobotics::protos::ListCatheterResponse>::Create(channel_.get(), cq, rpcmethod_List_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::telerobotics::protos::ListCatheterResponse>* CatheterRecordingService::Stub::PrepareAsyncListRaw(::grpc::ClientContext* context, const ::telerobotics::protos::ListCatheterRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::telerobotics::protos::ListCatheterResponse>::Create(channel_.get(), cq, rpcmethod_List_, context, request, false, nullptr);
}

CatheterRecordingService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CatheterRecordingService_method_names[0],
      ::grpc::internal::RpcMethod::CLIENT_STREAMING,
      new ::grpc::internal::ClientStreamingHandler< CatheterRecordingService::Service, ::telerobotics::protos::RecordCatheterRequest, ::telerobotics::protos::RecordCatheterResponse>(
          std::mem_fn(&CatheterRecordingService::Service::Record), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CatheterRecordingService_method_names[1],
      ::grpc::internal::RpcMethod::CLIENT_STREAMING,
      new ::grpc::internal::ClientStreamingHandler< CatheterRecordingService::Service, ::telerobotics::protos::AckReceivedCatheterRequest, ::telerobotics::protos::AckReceivedCatheterResponse>(
          std::mem_fn(&CatheterRecordingService::Service::AckReceived), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CatheterRecordingService_method_names[2],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< CatheterRecordingService::Service, ::telerobotics::protos::ListCatheterRequest, ::telerobotics::protos::ListCatheterResponse>(
          std::mem_fn(&CatheterRecordingService::Service::List), this)));
}

CatheterRecordingService::Service::~Service() {
}

::grpc::Status CatheterRecordingService::Service::Record(::grpc::ServerContext* context, ::grpc::ServerReader< ::telerobotics::protos::RecordCatheterRequest>* reader, ::telerobotics::protos::RecordCatheterResponse* response) {
  (void) context;
  (void) reader;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status CatheterRecordingService::Service::AckReceived(::grpc::ServerContext* context, ::grpc::ServerReader< ::telerobotics::protos::AckReceivedCatheterRequest>* reader, ::telerobotics::protos::AckReceivedCatheterResponse* response) {
  (void) context;
  (void) reader;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status CatheterRecordingService::Service::List(::grpc::ServerContext* context, const ::telerobotics::protos::ListCatheterRequest* request, ::grpc::ServerWriter< ::telerobotics::protos::ListCatheterResponse>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace telerobotics
}  // namespace protos

