// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: catheter_recording_service.proto

#include "catheter_recording_service.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

extern PROTOBUF_INTERNAL_EXPORT_common_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_CatheterData_common_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2ftimestamp_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto;
namespace github {
namespace com {
namespace pyrus {
namespace platform {
namespace protos {
class RecordCatheterRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RecordCatheterRequest> _instance;
} _RecordCatheterRequest_default_instance_;
class RecordCatheterResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RecordCatheterResponse> _instance;
} _RecordCatheterResponse_default_instance_;
class AckReceivedCatheterRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AckReceivedCatheterRequest> _instance;
} _AckReceivedCatheterRequest_default_instance_;
class AckReceivedCatheterResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AckReceivedCatheterResponse> _instance;
} _AckReceivedCatheterResponse_default_instance_;
class ListCatheterRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ListCatheterRequest> _instance;
} _ListCatheterRequest_default_instance_;
class ListCatheterResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ListCatheterResponse> _instance;
} _ListCatheterResponse_default_instance_;
}  // namespace protos
}  // namespace platform
}  // namespace pyrus
}  // namespace com
}  // namespace github
static void InitDefaultsRecordCatheterRequest_catheter_5frecording_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::github::com::pyrus::platform::protos::_RecordCatheterRequest_default_instance_;
    new (ptr) ::github::com::pyrus::platform::protos::RecordCatheterRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::github::com::pyrus::platform::protos::RecordCatheterRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_RecordCatheterRequest_catheter_5frecording_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsRecordCatheterRequest_catheter_5frecording_5fservice_2eproto}, {
      &scc_info_CatheterData_common_2eproto.base,
      &scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto.base,}};

static void InitDefaultsRecordCatheterResponse_catheter_5frecording_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::github::com::pyrus::platform::protos::_RecordCatheterResponse_default_instance_;
    new (ptr) ::github::com::pyrus::platform::protos::RecordCatheterResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::github::com::pyrus::platform::protos::RecordCatheterResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_RecordCatheterResponse_catheter_5frecording_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsRecordCatheterResponse_catheter_5frecording_5fservice_2eproto}, {}};

static void InitDefaultsAckReceivedCatheterRequest_catheter_5frecording_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::github::com::pyrus::platform::protos::_AckReceivedCatheterRequest_default_instance_;
    new (ptr) ::github::com::pyrus::platform::protos::AckReceivedCatheterRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::github::com::pyrus::platform::protos::AckReceivedCatheterRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_AckReceivedCatheterRequest_catheter_5frecording_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsAckReceivedCatheterRequest_catheter_5frecording_5fservice_2eproto}, {
      &scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto.base,}};

static void InitDefaultsAckReceivedCatheterResponse_catheter_5frecording_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::github::com::pyrus::platform::protos::_AckReceivedCatheterResponse_default_instance_;
    new (ptr) ::github::com::pyrus::platform::protos::AckReceivedCatheterResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::github::com::pyrus::platform::protos::AckReceivedCatheterResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_AckReceivedCatheterResponse_catheter_5frecording_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsAckReceivedCatheterResponse_catheter_5frecording_5fservice_2eproto}, {}};

static void InitDefaultsListCatheterRequest_catheter_5frecording_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::github::com::pyrus::platform::protos::_ListCatheterRequest_default_instance_;
    new (ptr) ::github::com::pyrus::platform::protos::ListCatheterRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::github::com::pyrus::platform::protos::ListCatheterRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ListCatheterRequest_catheter_5frecording_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsListCatheterRequest_catheter_5frecording_5fservice_2eproto}, {}};

static void InitDefaultsListCatheterResponse_catheter_5frecording_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::github::com::pyrus::platform::protos::_ListCatheterResponse_default_instance_;
    new (ptr) ::github::com::pyrus::platform::protos::ListCatheterResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::github::com::pyrus::platform::protos::ListCatheterResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_ListCatheterResponse_catheter_5frecording_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsListCatheterResponse_catheter_5frecording_5fservice_2eproto}, {
      &scc_info_CatheterData_common_2eproto.base,
      &scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto.base,}};

void InitDefaults_catheter_5frecording_5fservice_2eproto() {
  ::google::protobuf::internal::InitSCC(&scc_info_RecordCatheterRequest_catheter_5frecording_5fservice_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_RecordCatheterResponse_catheter_5frecording_5fservice_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_AckReceivedCatheterRequest_catheter_5frecording_5fservice_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_AckReceivedCatheterResponse_catheter_5frecording_5fservice_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ListCatheterRequest_catheter_5frecording_5fservice_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ListCatheterResponse_catheter_5frecording_5fservice_2eproto.base);
}

::google::protobuf::Metadata file_level_metadata_catheter_5frecording_5fservice_2eproto[6];
constexpr ::google::protobuf::EnumDescriptor const** file_level_enum_descriptors_catheter_5frecording_5fservice_2eproto = nullptr;
constexpr ::google::protobuf::ServiceDescriptor const** file_level_service_descriptors_catheter_5frecording_5fservice_2eproto = nullptr;

const ::google::protobuf::uint32 TableStruct_catheter_5frecording_5fservice_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::github::com::pyrus::platform::protos::RecordCatheterRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::github::com::pyrus::platform::protos::RecordCatheterRequest, data_),
  PROTOBUF_FIELD_OFFSET(::github::com::pyrus::platform::protos::RecordCatheterRequest, created_),
  PROTOBUF_FIELD_OFFSET(::github::com::pyrus::platform::protos::RecordCatheterRequest, latencyuuid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::github::com::pyrus::platform::protos::RecordCatheterResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::github::com::pyrus::platform::protos::AckReceivedCatheterRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::github::com::pyrus::platform::protos::AckReceivedCatheterRequest, latencyuuid_),
  PROTOBUF_FIELD_OFFSET(::github::com::pyrus::platform::protos::AckReceivedCatheterRequest, acked_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::github::com::pyrus::platform::protos::AckReceivedCatheterResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::github::com::pyrus::platform::protos::ListCatheterRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::github::com::pyrus::platform::protos::ListCatheterRequest, sessionid_),
  PROTOBUF_FIELD_OFFSET(::github::com::pyrus::platform::protos::ListCatheterRequest, deviceid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::github::com::pyrus::platform::protos::ListCatheterResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::github::com::pyrus::platform::protos::ListCatheterResponse, id_),
  PROTOBUF_FIELD_OFFSET(::github::com::pyrus::platform::protos::ListCatheterResponse, data_),
  PROTOBUF_FIELD_OFFSET(::github::com::pyrus::platform::protos::ListCatheterResponse, created_),
  PROTOBUF_FIELD_OFFSET(::github::com::pyrus::platform::protos::ListCatheterResponse, acked_),
  PROTOBUF_FIELD_OFFSET(::github::com::pyrus::platform::protos::ListCatheterResponse, latency_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::github::com::pyrus::platform::protos::RecordCatheterRequest)},
  { 8, -1, sizeof(::github::com::pyrus::platform::protos::RecordCatheterResponse)},
  { 13, -1, sizeof(::github::com::pyrus::platform::protos::AckReceivedCatheterRequest)},
  { 20, -1, sizeof(::github::com::pyrus::platform::protos::AckReceivedCatheterResponse)},
  { 25, -1, sizeof(::github::com::pyrus::platform::protos::ListCatheterRequest)},
  { 32, -1, sizeof(::github::com::pyrus::platform::protos::ListCatheterResponse)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::github::com::pyrus::platform::protos::_RecordCatheterRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::github::com::pyrus::platform::protos::_RecordCatheterResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::github::com::pyrus::platform::protos::_AckReceivedCatheterRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::github::com::pyrus::platform::protos::_AckReceivedCatheterResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::github::com::pyrus::platform::protos::_ListCatheterRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::github::com::pyrus::platform::protos::_ListCatheterResponse_default_instance_),
};

::google::protobuf::internal::AssignDescriptorsTable assign_descriptors_table_catheter_5frecording_5fservice_2eproto = {
  {}, AddDescriptors_catheter_5frecording_5fservice_2eproto, "catheter_recording_service.proto", schemas,
  file_default_instances, TableStruct_catheter_5frecording_5fservice_2eproto::offsets,
  file_level_metadata_catheter_5frecording_5fservice_2eproto, 6, file_level_enum_descriptors_catheter_5frecording_5fservice_2eproto, file_level_service_descriptors_catheter_5frecording_5fservice_2eproto,
};

const char descriptor_table_protodef_catheter_5frecording_5fservice_2eproto[] =
  "\n catheter_recording_service.proto\022 gith"
  "ub.com.pyrus.platform.protos\032\014common.pro"
  "to\032\037google/protobuf/timestamp.proto\"\227\001\n\025"
  "RecordCatheterRequest\022<\n\004data\030\001 \001(\0132..gi"
  "thub.com.pyrus.platform.protos.CatheterD"
  "ata\022+\n\007created\030\002 \001(\0132\032.google.protobuf.T"
  "imestamp\022\023\n\013latencyUUID\030\003 \001(\t\"\030\n\026RecordC"
  "atheterResponse\"\\\n\032AckReceivedCatheterRe"
  "quest\022\023\n\013latencyUUID\030\001 \001(\t\022)\n\005acked\030\002 \001("
  "\0132\032.google.protobuf.Timestamp\"\035\n\033AckRece"
  "ivedCatheterResponse\":\n\023ListCatheterRequ"
  "est\022\021\n\tsessionID\030\001 \001(\004\022\020\n\010deviceID\030\002 \001(\004"
  "\"\311\001\n\024ListCatheterResponse\022\n\n\002id\030\001 \001(\004\022<\n"
  "\004data\030\002 \001(\0132..github.com.pyrus.platform."
  "protos.CatheterData\022+\n\007created\030\003 \001(\0132\032.g"
  "oogle.protobuf.Timestamp\022)\n\005acked\030\004 \001(\0132"
  "\032.google.protobuf.Timestamp\022\017\n\007latency\030\005"
  " \001(\0022\241\003\n\030CatheterRecordingService\022}\n\006Rec"
  "ord\0227.github.com.pyrus.platform.protos.R"
  "ecordCatheterRequest\0328.github.com.pyrus."
  "platform.protos.RecordCatheterResponse(\001"
  "\022\214\001\n\013AckReceived\022<.github.com.pyrus.plat"
  "form.protos.AckReceivedCatheterRequest\032="
  ".github.com.pyrus.platform.protos.AckRec"
  "eivedCatheterResponse(\001\022w\n\004List\0225.github"
  ".com.pyrus.platform.protos.ListCatheterR"
  "equest\0326.github.com.pyrus.platform.proto"
  "s.ListCatheterResponse0\001B\"Z\010platform\252\002\025P"
  "yrus.Platform.Protosb\006proto3"
  ;
::google::protobuf::internal::DescriptorTable descriptor_table_catheter_5frecording_5fservice_2eproto = {
  false, InitDefaults_catheter_5frecording_5fservice_2eproto, 
  descriptor_table_protodef_catheter_5frecording_5fservice_2eproto,
  "catheter_recording_service.proto", &assign_descriptors_table_catheter_5frecording_5fservice_2eproto, 1148,
};

void AddDescriptors_catheter_5frecording_5fservice_2eproto() {
  static constexpr ::google::protobuf::internal::InitFunc deps[2] =
  {
    ::AddDescriptors_common_2eproto,
    ::AddDescriptors_google_2fprotobuf_2ftimestamp_2eproto,
  };
 ::google::protobuf::internal::AddDescriptors(&descriptor_table_catheter_5frecording_5fservice_2eproto, deps, 2);
}

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_catheter_5frecording_5fservice_2eproto = []() { AddDescriptors_catheter_5frecording_5fservice_2eproto(); return true; }();
namespace github {
namespace com {
namespace pyrus {
namespace platform {
namespace protos {

// ===================================================================

void RecordCatheterRequest::InitAsDefaultInstance() {
  ::github::com::pyrus::platform::protos::_RecordCatheterRequest_default_instance_._instance.get_mutable()->data_ = const_cast< ::github::com::pyrus::platform::protos::CatheterData*>(
      ::github::com::pyrus::platform::protos::CatheterData::internal_default_instance());
  ::github::com::pyrus::platform::protos::_RecordCatheterRequest_default_instance_._instance.get_mutable()->created_ = const_cast< ::google::protobuf::Timestamp*>(
      ::google::protobuf::Timestamp::internal_default_instance());
}
class RecordCatheterRequest::HasBitSetters {
 public:
  static const ::github::com::pyrus::platform::protos::CatheterData& data(const RecordCatheterRequest* msg);
  static const ::google::protobuf::Timestamp& created(const RecordCatheterRequest* msg);
};

const ::github::com::pyrus::platform::protos::CatheterData&
RecordCatheterRequest::HasBitSetters::data(const RecordCatheterRequest* msg) {
  return *msg->data_;
}
const ::google::protobuf::Timestamp&
RecordCatheterRequest::HasBitSetters::created(const RecordCatheterRequest* msg) {
  return *msg->created_;
}
void RecordCatheterRequest::clear_data() {
  if (GetArenaNoVirtual() == nullptr && data_ != nullptr) {
    delete data_;
  }
  data_ = nullptr;
}
void RecordCatheterRequest::clear_created() {
  if (GetArenaNoVirtual() == nullptr && created_ != nullptr) {
    delete created_;
  }
  created_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RecordCatheterRequest::kDataFieldNumber;
const int RecordCatheterRequest::kCreatedFieldNumber;
const int RecordCatheterRequest::kLatencyUUIDFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RecordCatheterRequest::RecordCatheterRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:github.com.pyrus.platform.protos.RecordCatheterRequest)
}
RecordCatheterRequest::RecordCatheterRequest(const RecordCatheterRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  latencyuuid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.latencyuuid().size() > 0) {
    latencyuuid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.latencyuuid_);
  }
  if (from.has_data()) {
    data_ = new ::github::com::pyrus::platform::protos::CatheterData(*from.data_);
  } else {
    data_ = nullptr;
  }
  if (from.has_created()) {
    created_ = new ::google::protobuf::Timestamp(*from.created_);
  } else {
    created_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:github.com.pyrus.platform.protos.RecordCatheterRequest)
}

void RecordCatheterRequest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_RecordCatheterRequest_catheter_5frecording_5fservice_2eproto.base);
  latencyuuid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&data_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&created_) -
      reinterpret_cast<char*>(&data_)) + sizeof(created_));
}

RecordCatheterRequest::~RecordCatheterRequest() {
  // @@protoc_insertion_point(destructor:github.com.pyrus.platform.protos.RecordCatheterRequest)
  SharedDtor();
}

void RecordCatheterRequest::SharedDtor() {
  latencyuuid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete data_;
  if (this != internal_default_instance()) delete created_;
}

void RecordCatheterRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RecordCatheterRequest& RecordCatheterRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_RecordCatheterRequest_catheter_5frecording_5fservice_2eproto.base);
  return *internal_default_instance();
}


void RecordCatheterRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:github.com.pyrus.platform.protos.RecordCatheterRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  latencyuuid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && data_ != nullptr) {
    delete data_;
  }
  data_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && created_ != nullptr) {
    delete created_;
  }
  created_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* RecordCatheterRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<RecordCatheterRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .github.com.pyrus.platform.protos.CatheterData data = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::github::com::pyrus::platform::protos::CatheterData::_InternalParse;
        object = msg->mutable_data();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .google.protobuf.Timestamp created = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::Timestamp::_InternalParse;
        object = msg->mutable_created();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // string latencyUUID = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("github.com.pyrus.platform.protos.RecordCatheterRequest.latencyUUID");
        object = msg->mutable_latencyuuid();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool RecordCatheterRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:github.com.pyrus.platform.protos.RecordCatheterRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .github.com.pyrus.platform.protos.CatheterData data = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Timestamp created = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_created()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string latencyUUID = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_latencyuuid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->latencyuuid().data(), static_cast<int>(this->latencyuuid().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "github.com.pyrus.platform.protos.RecordCatheterRequest.latencyUUID"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:github.com.pyrus.platform.protos.RecordCatheterRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:github.com.pyrus.platform.protos.RecordCatheterRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void RecordCatheterRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:github.com.pyrus.platform.protos.RecordCatheterRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .github.com.pyrus.platform.protos.CatheterData data = 1;
  if (this->has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::data(this), output);
  }

  // .google.protobuf.Timestamp created = 2;
  if (this->has_created()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::created(this), output);
  }

  // string latencyUUID = 3;
  if (this->latencyuuid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->latencyuuid().data(), static_cast<int>(this->latencyuuid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "github.com.pyrus.platform.protos.RecordCatheterRequest.latencyUUID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->latencyuuid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:github.com.pyrus.platform.protos.RecordCatheterRequest)
}

::google::protobuf::uint8* RecordCatheterRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:github.com.pyrus.platform.protos.RecordCatheterRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .github.com.pyrus.platform.protos.CatheterData data = 1;
  if (this->has_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::data(this), target);
  }

  // .google.protobuf.Timestamp created = 2;
  if (this->has_created()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::created(this), target);
  }

  // string latencyUUID = 3;
  if (this->latencyuuid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->latencyuuid().data(), static_cast<int>(this->latencyuuid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "github.com.pyrus.platform.protos.RecordCatheterRequest.latencyUUID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->latencyuuid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:github.com.pyrus.platform.protos.RecordCatheterRequest)
  return target;
}

size_t RecordCatheterRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:github.com.pyrus.platform.protos.RecordCatheterRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string latencyUUID = 3;
  if (this->latencyuuid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->latencyuuid());
  }

  // .github.com.pyrus.platform.protos.CatheterData data = 1;
  if (this->has_data()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *data_);
  }

  // .google.protobuf.Timestamp created = 2;
  if (this->has_created()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *created_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RecordCatheterRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:github.com.pyrus.platform.protos.RecordCatheterRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const RecordCatheterRequest* source =
      ::google::protobuf::DynamicCastToGenerated<RecordCatheterRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:github.com.pyrus.platform.protos.RecordCatheterRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:github.com.pyrus.platform.protos.RecordCatheterRequest)
    MergeFrom(*source);
  }
}

void RecordCatheterRequest::MergeFrom(const RecordCatheterRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:github.com.pyrus.platform.protos.RecordCatheterRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.latencyuuid().size() > 0) {

    latencyuuid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.latencyuuid_);
  }
  if (from.has_data()) {
    mutable_data()->::github::com::pyrus::platform::protos::CatheterData::MergeFrom(from.data());
  }
  if (from.has_created()) {
    mutable_created()->::google::protobuf::Timestamp::MergeFrom(from.created());
  }
}

void RecordCatheterRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:github.com.pyrus.platform.protos.RecordCatheterRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RecordCatheterRequest::CopyFrom(const RecordCatheterRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:github.com.pyrus.platform.protos.RecordCatheterRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RecordCatheterRequest::IsInitialized() const {
  return true;
}

void RecordCatheterRequest::Swap(RecordCatheterRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RecordCatheterRequest::InternalSwap(RecordCatheterRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  latencyuuid_.Swap(&other->latencyuuid_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(data_, other->data_);
  swap(created_, other->created_);
}

::google::protobuf::Metadata RecordCatheterRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_catheter_5frecording_5fservice_2eproto);
  return ::file_level_metadata_catheter_5frecording_5fservice_2eproto[kIndexInFileMessages];
}


// ===================================================================

void RecordCatheterResponse::InitAsDefaultInstance() {
}
class RecordCatheterResponse::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RecordCatheterResponse::RecordCatheterResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:github.com.pyrus.platform.protos.RecordCatheterResponse)
}
RecordCatheterResponse::RecordCatheterResponse(const RecordCatheterResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:github.com.pyrus.platform.protos.RecordCatheterResponse)
}

void RecordCatheterResponse::SharedCtor() {
}

RecordCatheterResponse::~RecordCatheterResponse() {
  // @@protoc_insertion_point(destructor:github.com.pyrus.platform.protos.RecordCatheterResponse)
  SharedDtor();
}

void RecordCatheterResponse::SharedDtor() {
}

void RecordCatheterResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RecordCatheterResponse& RecordCatheterResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_RecordCatheterResponse_catheter_5frecording_5fservice_2eproto.base);
  return *internal_default_instance();
}


void RecordCatheterResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:github.com.pyrus.platform.protos.RecordCatheterResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* RecordCatheterResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<RecordCatheterResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool RecordCatheterResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:github.com.pyrus.platform.protos.RecordCatheterResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:github.com.pyrus.platform.protos.RecordCatheterResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:github.com.pyrus.platform.protos.RecordCatheterResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void RecordCatheterResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:github.com.pyrus.platform.protos.RecordCatheterResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:github.com.pyrus.platform.protos.RecordCatheterResponse)
}

::google::protobuf::uint8* RecordCatheterResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:github.com.pyrus.platform.protos.RecordCatheterResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:github.com.pyrus.platform.protos.RecordCatheterResponse)
  return target;
}

size_t RecordCatheterResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:github.com.pyrus.platform.protos.RecordCatheterResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RecordCatheterResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:github.com.pyrus.platform.protos.RecordCatheterResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const RecordCatheterResponse* source =
      ::google::protobuf::DynamicCastToGenerated<RecordCatheterResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:github.com.pyrus.platform.protos.RecordCatheterResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:github.com.pyrus.platform.protos.RecordCatheterResponse)
    MergeFrom(*source);
  }
}

void RecordCatheterResponse::MergeFrom(const RecordCatheterResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:github.com.pyrus.platform.protos.RecordCatheterResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void RecordCatheterResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:github.com.pyrus.platform.protos.RecordCatheterResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RecordCatheterResponse::CopyFrom(const RecordCatheterResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:github.com.pyrus.platform.protos.RecordCatheterResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RecordCatheterResponse::IsInitialized() const {
  return true;
}

void RecordCatheterResponse::Swap(RecordCatheterResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RecordCatheterResponse::InternalSwap(RecordCatheterResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata RecordCatheterResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_catheter_5frecording_5fservice_2eproto);
  return ::file_level_metadata_catheter_5frecording_5fservice_2eproto[kIndexInFileMessages];
}


// ===================================================================

void AckReceivedCatheterRequest::InitAsDefaultInstance() {
  ::github::com::pyrus::platform::protos::_AckReceivedCatheterRequest_default_instance_._instance.get_mutable()->acked_ = const_cast< ::google::protobuf::Timestamp*>(
      ::google::protobuf::Timestamp::internal_default_instance());
}
class AckReceivedCatheterRequest::HasBitSetters {
 public:
  static const ::google::protobuf::Timestamp& acked(const AckReceivedCatheterRequest* msg);
};

const ::google::protobuf::Timestamp&
AckReceivedCatheterRequest::HasBitSetters::acked(const AckReceivedCatheterRequest* msg) {
  return *msg->acked_;
}
void AckReceivedCatheterRequest::clear_acked() {
  if (GetArenaNoVirtual() == nullptr && acked_ != nullptr) {
    delete acked_;
  }
  acked_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AckReceivedCatheterRequest::kLatencyUUIDFieldNumber;
const int AckReceivedCatheterRequest::kAckedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AckReceivedCatheterRequest::AckReceivedCatheterRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:github.com.pyrus.platform.protos.AckReceivedCatheterRequest)
}
AckReceivedCatheterRequest::AckReceivedCatheterRequest(const AckReceivedCatheterRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  latencyuuid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.latencyuuid().size() > 0) {
    latencyuuid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.latencyuuid_);
  }
  if (from.has_acked()) {
    acked_ = new ::google::protobuf::Timestamp(*from.acked_);
  } else {
    acked_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:github.com.pyrus.platform.protos.AckReceivedCatheterRequest)
}

void AckReceivedCatheterRequest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_AckReceivedCatheterRequest_catheter_5frecording_5fservice_2eproto.base);
  latencyuuid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  acked_ = nullptr;
}

AckReceivedCatheterRequest::~AckReceivedCatheterRequest() {
  // @@protoc_insertion_point(destructor:github.com.pyrus.platform.protos.AckReceivedCatheterRequest)
  SharedDtor();
}

void AckReceivedCatheterRequest::SharedDtor() {
  latencyuuid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete acked_;
}

void AckReceivedCatheterRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AckReceivedCatheterRequest& AckReceivedCatheterRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_AckReceivedCatheterRequest_catheter_5frecording_5fservice_2eproto.base);
  return *internal_default_instance();
}


void AckReceivedCatheterRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:github.com.pyrus.platform.protos.AckReceivedCatheterRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  latencyuuid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && acked_ != nullptr) {
    delete acked_;
  }
  acked_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* AckReceivedCatheterRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<AckReceivedCatheterRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string latencyUUID = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("github.com.pyrus.platform.protos.AckReceivedCatheterRequest.latencyUUID");
        object = msg->mutable_latencyuuid();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // .google.protobuf.Timestamp acked = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::Timestamp::_InternalParse;
        object = msg->mutable_acked();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool AckReceivedCatheterRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:github.com.pyrus.platform.protos.AckReceivedCatheterRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string latencyUUID = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_latencyuuid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->latencyuuid().data(), static_cast<int>(this->latencyuuid().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "github.com.pyrus.platform.protos.AckReceivedCatheterRequest.latencyUUID"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Timestamp acked = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_acked()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:github.com.pyrus.platform.protos.AckReceivedCatheterRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:github.com.pyrus.platform.protos.AckReceivedCatheterRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void AckReceivedCatheterRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:github.com.pyrus.platform.protos.AckReceivedCatheterRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string latencyUUID = 1;
  if (this->latencyuuid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->latencyuuid().data(), static_cast<int>(this->latencyuuid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "github.com.pyrus.platform.protos.AckReceivedCatheterRequest.latencyUUID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->latencyuuid(), output);
  }

  // .google.protobuf.Timestamp acked = 2;
  if (this->has_acked()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::acked(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:github.com.pyrus.platform.protos.AckReceivedCatheterRequest)
}

::google::protobuf::uint8* AckReceivedCatheterRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:github.com.pyrus.platform.protos.AckReceivedCatheterRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string latencyUUID = 1;
  if (this->latencyuuid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->latencyuuid().data(), static_cast<int>(this->latencyuuid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "github.com.pyrus.platform.protos.AckReceivedCatheterRequest.latencyUUID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->latencyuuid(), target);
  }

  // .google.protobuf.Timestamp acked = 2;
  if (this->has_acked()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::acked(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:github.com.pyrus.platform.protos.AckReceivedCatheterRequest)
  return target;
}

size_t AckReceivedCatheterRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:github.com.pyrus.platform.protos.AckReceivedCatheterRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string latencyUUID = 1;
  if (this->latencyuuid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->latencyuuid());
  }

  // .google.protobuf.Timestamp acked = 2;
  if (this->has_acked()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *acked_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AckReceivedCatheterRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:github.com.pyrus.platform.protos.AckReceivedCatheterRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const AckReceivedCatheterRequest* source =
      ::google::protobuf::DynamicCastToGenerated<AckReceivedCatheterRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:github.com.pyrus.platform.protos.AckReceivedCatheterRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:github.com.pyrus.platform.protos.AckReceivedCatheterRequest)
    MergeFrom(*source);
  }
}

void AckReceivedCatheterRequest::MergeFrom(const AckReceivedCatheterRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:github.com.pyrus.platform.protos.AckReceivedCatheterRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.latencyuuid().size() > 0) {

    latencyuuid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.latencyuuid_);
  }
  if (from.has_acked()) {
    mutable_acked()->::google::protobuf::Timestamp::MergeFrom(from.acked());
  }
}

void AckReceivedCatheterRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:github.com.pyrus.platform.protos.AckReceivedCatheterRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckReceivedCatheterRequest::CopyFrom(const AckReceivedCatheterRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:github.com.pyrus.platform.protos.AckReceivedCatheterRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckReceivedCatheterRequest::IsInitialized() const {
  return true;
}

void AckReceivedCatheterRequest::Swap(AckReceivedCatheterRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AckReceivedCatheterRequest::InternalSwap(AckReceivedCatheterRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  latencyuuid_.Swap(&other->latencyuuid_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(acked_, other->acked_);
}

::google::protobuf::Metadata AckReceivedCatheterRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_catheter_5frecording_5fservice_2eproto);
  return ::file_level_metadata_catheter_5frecording_5fservice_2eproto[kIndexInFileMessages];
}


// ===================================================================

void AckReceivedCatheterResponse::InitAsDefaultInstance() {
}
class AckReceivedCatheterResponse::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AckReceivedCatheterResponse::AckReceivedCatheterResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:github.com.pyrus.platform.protos.AckReceivedCatheterResponse)
}
AckReceivedCatheterResponse::AckReceivedCatheterResponse(const AckReceivedCatheterResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:github.com.pyrus.platform.protos.AckReceivedCatheterResponse)
}

void AckReceivedCatheterResponse::SharedCtor() {
}

AckReceivedCatheterResponse::~AckReceivedCatheterResponse() {
  // @@protoc_insertion_point(destructor:github.com.pyrus.platform.protos.AckReceivedCatheterResponse)
  SharedDtor();
}

void AckReceivedCatheterResponse::SharedDtor() {
}

void AckReceivedCatheterResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AckReceivedCatheterResponse& AckReceivedCatheterResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_AckReceivedCatheterResponse_catheter_5frecording_5fservice_2eproto.base);
  return *internal_default_instance();
}


void AckReceivedCatheterResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:github.com.pyrus.platform.protos.AckReceivedCatheterResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* AckReceivedCatheterResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<AckReceivedCatheterResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool AckReceivedCatheterResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:github.com.pyrus.platform.protos.AckReceivedCatheterResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:github.com.pyrus.platform.protos.AckReceivedCatheterResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:github.com.pyrus.platform.protos.AckReceivedCatheterResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void AckReceivedCatheterResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:github.com.pyrus.platform.protos.AckReceivedCatheterResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:github.com.pyrus.platform.protos.AckReceivedCatheterResponse)
}

::google::protobuf::uint8* AckReceivedCatheterResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:github.com.pyrus.platform.protos.AckReceivedCatheterResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:github.com.pyrus.platform.protos.AckReceivedCatheterResponse)
  return target;
}

size_t AckReceivedCatheterResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:github.com.pyrus.platform.protos.AckReceivedCatheterResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AckReceivedCatheterResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:github.com.pyrus.platform.protos.AckReceivedCatheterResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const AckReceivedCatheterResponse* source =
      ::google::protobuf::DynamicCastToGenerated<AckReceivedCatheterResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:github.com.pyrus.platform.protos.AckReceivedCatheterResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:github.com.pyrus.platform.protos.AckReceivedCatheterResponse)
    MergeFrom(*source);
  }
}

void AckReceivedCatheterResponse::MergeFrom(const AckReceivedCatheterResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:github.com.pyrus.platform.protos.AckReceivedCatheterResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void AckReceivedCatheterResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:github.com.pyrus.platform.protos.AckReceivedCatheterResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckReceivedCatheterResponse::CopyFrom(const AckReceivedCatheterResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:github.com.pyrus.platform.protos.AckReceivedCatheterResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckReceivedCatheterResponse::IsInitialized() const {
  return true;
}

void AckReceivedCatheterResponse::Swap(AckReceivedCatheterResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AckReceivedCatheterResponse::InternalSwap(AckReceivedCatheterResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata AckReceivedCatheterResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_catheter_5frecording_5fservice_2eproto);
  return ::file_level_metadata_catheter_5frecording_5fservice_2eproto[kIndexInFileMessages];
}


// ===================================================================

void ListCatheterRequest::InitAsDefaultInstance() {
}
class ListCatheterRequest::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ListCatheterRequest::kSessionIDFieldNumber;
const int ListCatheterRequest::kDeviceIDFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ListCatheterRequest::ListCatheterRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:github.com.pyrus.platform.protos.ListCatheterRequest)
}
ListCatheterRequest::ListCatheterRequest(const ListCatheterRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&sessionid_, &from.sessionid_,
    static_cast<size_t>(reinterpret_cast<char*>(&deviceid_) -
    reinterpret_cast<char*>(&sessionid_)) + sizeof(deviceid_));
  // @@protoc_insertion_point(copy_constructor:github.com.pyrus.platform.protos.ListCatheterRequest)
}

void ListCatheterRequest::SharedCtor() {
  ::memset(&sessionid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&deviceid_) -
      reinterpret_cast<char*>(&sessionid_)) + sizeof(deviceid_));
}

ListCatheterRequest::~ListCatheterRequest() {
  // @@protoc_insertion_point(destructor:github.com.pyrus.platform.protos.ListCatheterRequest)
  SharedDtor();
}

void ListCatheterRequest::SharedDtor() {
}

void ListCatheterRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ListCatheterRequest& ListCatheterRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_ListCatheterRequest_catheter_5frecording_5fservice_2eproto.base);
  return *internal_default_instance();
}


void ListCatheterRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:github.com.pyrus.platform.protos.ListCatheterRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&sessionid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&deviceid_) -
      reinterpret_cast<char*>(&sessionid_)) + sizeof(deviceid_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ListCatheterRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<ListCatheterRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // uint64 sessionID = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_sessionid(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // uint64 deviceID = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_deviceid(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ListCatheterRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:github.com.pyrus.platform.protos.ListCatheterRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 sessionID = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &sessionid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 deviceID = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &deviceid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:github.com.pyrus.platform.protos.ListCatheterRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:github.com.pyrus.platform.protos.ListCatheterRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ListCatheterRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:github.com.pyrus.platform.protos.ListCatheterRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 sessionID = 1;
  if (this->sessionid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->sessionid(), output);
  }

  // uint64 deviceID = 2;
  if (this->deviceid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->deviceid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:github.com.pyrus.platform.protos.ListCatheterRequest)
}

::google::protobuf::uint8* ListCatheterRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:github.com.pyrus.platform.protos.ListCatheterRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 sessionID = 1;
  if (this->sessionid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->sessionid(), target);
  }

  // uint64 deviceID = 2;
  if (this->deviceid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->deviceid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:github.com.pyrus.platform.protos.ListCatheterRequest)
  return target;
}

size_t ListCatheterRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:github.com.pyrus.platform.protos.ListCatheterRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 sessionID = 1;
  if (this->sessionid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->sessionid());
  }

  // uint64 deviceID = 2;
  if (this->deviceid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->deviceid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ListCatheterRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:github.com.pyrus.platform.protos.ListCatheterRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ListCatheterRequest* source =
      ::google::protobuf::DynamicCastToGenerated<ListCatheterRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:github.com.pyrus.platform.protos.ListCatheterRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:github.com.pyrus.platform.protos.ListCatheterRequest)
    MergeFrom(*source);
  }
}

void ListCatheterRequest::MergeFrom(const ListCatheterRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:github.com.pyrus.platform.protos.ListCatheterRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.sessionid() != 0) {
    set_sessionid(from.sessionid());
  }
  if (from.deviceid() != 0) {
    set_deviceid(from.deviceid());
  }
}

void ListCatheterRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:github.com.pyrus.platform.protos.ListCatheterRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListCatheterRequest::CopyFrom(const ListCatheterRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:github.com.pyrus.platform.protos.ListCatheterRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListCatheterRequest::IsInitialized() const {
  return true;
}

void ListCatheterRequest::Swap(ListCatheterRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ListCatheterRequest::InternalSwap(ListCatheterRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(sessionid_, other->sessionid_);
  swap(deviceid_, other->deviceid_);
}

::google::protobuf::Metadata ListCatheterRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_catheter_5frecording_5fservice_2eproto);
  return ::file_level_metadata_catheter_5frecording_5fservice_2eproto[kIndexInFileMessages];
}


// ===================================================================

void ListCatheterResponse::InitAsDefaultInstance() {
  ::github::com::pyrus::platform::protos::_ListCatheterResponse_default_instance_._instance.get_mutable()->data_ = const_cast< ::github::com::pyrus::platform::protos::CatheterData*>(
      ::github::com::pyrus::platform::protos::CatheterData::internal_default_instance());
  ::github::com::pyrus::platform::protos::_ListCatheterResponse_default_instance_._instance.get_mutable()->created_ = const_cast< ::google::protobuf::Timestamp*>(
      ::google::protobuf::Timestamp::internal_default_instance());
  ::github::com::pyrus::platform::protos::_ListCatheterResponse_default_instance_._instance.get_mutable()->acked_ = const_cast< ::google::protobuf::Timestamp*>(
      ::google::protobuf::Timestamp::internal_default_instance());
}
class ListCatheterResponse::HasBitSetters {
 public:
  static const ::github::com::pyrus::platform::protos::CatheterData& data(const ListCatheterResponse* msg);
  static const ::google::protobuf::Timestamp& created(const ListCatheterResponse* msg);
  static const ::google::protobuf::Timestamp& acked(const ListCatheterResponse* msg);
};

const ::github::com::pyrus::platform::protos::CatheterData&
ListCatheterResponse::HasBitSetters::data(const ListCatheterResponse* msg) {
  return *msg->data_;
}
const ::google::protobuf::Timestamp&
ListCatheterResponse::HasBitSetters::created(const ListCatheterResponse* msg) {
  return *msg->created_;
}
const ::google::protobuf::Timestamp&
ListCatheterResponse::HasBitSetters::acked(const ListCatheterResponse* msg) {
  return *msg->acked_;
}
void ListCatheterResponse::clear_data() {
  if (GetArenaNoVirtual() == nullptr && data_ != nullptr) {
    delete data_;
  }
  data_ = nullptr;
}
void ListCatheterResponse::clear_created() {
  if (GetArenaNoVirtual() == nullptr && created_ != nullptr) {
    delete created_;
  }
  created_ = nullptr;
}
void ListCatheterResponse::clear_acked() {
  if (GetArenaNoVirtual() == nullptr && acked_ != nullptr) {
    delete acked_;
  }
  acked_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ListCatheterResponse::kIdFieldNumber;
const int ListCatheterResponse::kDataFieldNumber;
const int ListCatheterResponse::kCreatedFieldNumber;
const int ListCatheterResponse::kAckedFieldNumber;
const int ListCatheterResponse::kLatencyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ListCatheterResponse::ListCatheterResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:github.com.pyrus.platform.protos.ListCatheterResponse)
}
ListCatheterResponse::ListCatheterResponse(const ListCatheterResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_data()) {
    data_ = new ::github::com::pyrus::platform::protos::CatheterData(*from.data_);
  } else {
    data_ = nullptr;
  }
  if (from.has_created()) {
    created_ = new ::google::protobuf::Timestamp(*from.created_);
  } else {
    created_ = nullptr;
  }
  if (from.has_acked()) {
    acked_ = new ::google::protobuf::Timestamp(*from.acked_);
  } else {
    acked_ = nullptr;
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&latency_) -
    reinterpret_cast<char*>(&id_)) + sizeof(latency_));
  // @@protoc_insertion_point(copy_constructor:github.com.pyrus.platform.protos.ListCatheterResponse)
}

void ListCatheterResponse::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_ListCatheterResponse_catheter_5frecording_5fservice_2eproto.base);
  ::memset(&data_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&latency_) -
      reinterpret_cast<char*>(&data_)) + sizeof(latency_));
}

ListCatheterResponse::~ListCatheterResponse() {
  // @@protoc_insertion_point(destructor:github.com.pyrus.platform.protos.ListCatheterResponse)
  SharedDtor();
}

void ListCatheterResponse::SharedDtor() {
  if (this != internal_default_instance()) delete data_;
  if (this != internal_default_instance()) delete created_;
  if (this != internal_default_instance()) delete acked_;
}

void ListCatheterResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ListCatheterResponse& ListCatheterResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_ListCatheterResponse_catheter_5frecording_5fservice_2eproto.base);
  return *internal_default_instance();
}


void ListCatheterResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:github.com.pyrus.platform.protos.ListCatheterResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && data_ != nullptr) {
    delete data_;
  }
  data_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && created_ != nullptr) {
    delete created_;
  }
  created_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && acked_ != nullptr) {
    delete acked_;
  }
  acked_ = nullptr;
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&latency_) -
      reinterpret_cast<char*>(&id_)) + sizeof(latency_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ListCatheterResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<ListCatheterResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // uint64 id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // .github.com.pyrus.platform.protos.CatheterData data = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::github::com::pyrus::platform::protos::CatheterData::_InternalParse;
        object = msg->mutable_data();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .google.protobuf.Timestamp created = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::Timestamp::_InternalParse;
        object = msg->mutable_created();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .google.protobuf.Timestamp acked = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::Timestamp::_InternalParse;
        object = msg->mutable_acked();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // float latency = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 45) goto handle_unusual;
        msg->set_latency(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ListCatheterResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:github.com.pyrus.platform.protos.ListCatheterResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .github.com.pyrus.platform.protos.CatheterData data = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Timestamp created = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_created()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Timestamp acked = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_acked()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float latency = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (45 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &latency_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:github.com.pyrus.platform.protos.ListCatheterResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:github.com.pyrus.platform.protos.ListCatheterResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ListCatheterResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:github.com.pyrus.platform.protos.ListCatheterResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 id = 1;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->id(), output);
  }

  // .github.com.pyrus.platform.protos.CatheterData data = 2;
  if (this->has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::data(this), output);
  }

  // .google.protobuf.Timestamp created = 3;
  if (this->has_created()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::created(this), output);
  }

  // .google.protobuf.Timestamp acked = 4;
  if (this->has_acked()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, HasBitSetters::acked(this), output);
  }

  // float latency = 5;
  if (this->latency() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->latency(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:github.com.pyrus.platform.protos.ListCatheterResponse)
}

::google::protobuf::uint8* ListCatheterResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:github.com.pyrus.platform.protos.ListCatheterResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 id = 1;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->id(), target);
  }

  // .github.com.pyrus.platform.protos.CatheterData data = 2;
  if (this->has_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::data(this), target);
  }

  // .google.protobuf.Timestamp created = 3;
  if (this->has_created()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::created(this), target);
  }

  // .google.protobuf.Timestamp acked = 4;
  if (this->has_acked()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, HasBitSetters::acked(this), target);
  }

  // float latency = 5;
  if (this->latency() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->latency(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:github.com.pyrus.platform.protos.ListCatheterResponse)
  return target;
}

size_t ListCatheterResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:github.com.pyrus.platform.protos.ListCatheterResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .github.com.pyrus.platform.protos.CatheterData data = 2;
  if (this->has_data()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *data_);
  }

  // .google.protobuf.Timestamp created = 3;
  if (this->has_created()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *created_);
  }

  // .google.protobuf.Timestamp acked = 4;
  if (this->has_acked()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *acked_);
  }

  // uint64 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->id());
  }

  // float latency = 5;
  if (this->latency() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ListCatheterResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:github.com.pyrus.platform.protos.ListCatheterResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ListCatheterResponse* source =
      ::google::protobuf::DynamicCastToGenerated<ListCatheterResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:github.com.pyrus.platform.protos.ListCatheterResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:github.com.pyrus.platform.protos.ListCatheterResponse)
    MergeFrom(*source);
  }
}

void ListCatheterResponse::MergeFrom(const ListCatheterResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:github.com.pyrus.platform.protos.ListCatheterResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_data()) {
    mutable_data()->::github::com::pyrus::platform::protos::CatheterData::MergeFrom(from.data());
  }
  if (from.has_created()) {
    mutable_created()->::google::protobuf::Timestamp::MergeFrom(from.created());
  }
  if (from.has_acked()) {
    mutable_acked()->::google::protobuf::Timestamp::MergeFrom(from.acked());
  }
  if (from.id() != 0) {
    set_id(from.id());
  }
  if (from.latency() != 0) {
    set_latency(from.latency());
  }
}

void ListCatheterResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:github.com.pyrus.platform.protos.ListCatheterResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListCatheterResponse::CopyFrom(const ListCatheterResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:github.com.pyrus.platform.protos.ListCatheterResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListCatheterResponse::IsInitialized() const {
  return true;
}

void ListCatheterResponse::Swap(ListCatheterResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ListCatheterResponse::InternalSwap(ListCatheterResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(data_, other->data_);
  swap(created_, other->created_);
  swap(acked_, other->acked_);
  swap(id_, other->id_);
  swap(latency_, other->latency_);
}

::google::protobuf::Metadata ListCatheterResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_catheter_5frecording_5fservice_2eproto);
  return ::file_level_metadata_catheter_5frecording_5fservice_2eproto[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace protos
}  // namespace platform
}  // namespace pyrus
}  // namespace com
}  // namespace github
namespace google {
namespace protobuf {
template<> PROTOBUF_NOINLINE ::github::com::pyrus::platform::protos::RecordCatheterRequest* Arena::CreateMaybeMessage< ::github::com::pyrus::platform::protos::RecordCatheterRequest >(Arena* arena) {
  return Arena::CreateInternal< ::github::com::pyrus::platform::protos::RecordCatheterRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::github::com::pyrus::platform::protos::RecordCatheterResponse* Arena::CreateMaybeMessage< ::github::com::pyrus::platform::protos::RecordCatheterResponse >(Arena* arena) {
  return Arena::CreateInternal< ::github::com::pyrus::platform::protos::RecordCatheterResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::github::com::pyrus::platform::protos::AckReceivedCatheterRequest* Arena::CreateMaybeMessage< ::github::com::pyrus::platform::protos::AckReceivedCatheterRequest >(Arena* arena) {
  return Arena::CreateInternal< ::github::com::pyrus::platform::protos::AckReceivedCatheterRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::github::com::pyrus::platform::protos::AckReceivedCatheterResponse* Arena::CreateMaybeMessage< ::github::com::pyrus::platform::protos::AckReceivedCatheterResponse >(Arena* arena) {
  return Arena::CreateInternal< ::github::com::pyrus::platform::protos::AckReceivedCatheterResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::github::com::pyrus::platform::protos::ListCatheterRequest* Arena::CreateMaybeMessage< ::github::com::pyrus::platform::protos::ListCatheterRequest >(Arena* arena) {
  return Arena::CreateInternal< ::github::com::pyrus::platform::protos::ListCatheterRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::github::com::pyrus::platform::protos::ListCatheterResponse* Arena::CreateMaybeMessage< ::github::com::pyrus::platform::protos::ListCatheterResponse >(Arena* arena) {
  return Arena::CreateInternal< ::github::com::pyrus::platform::protos::ListCatheterResponse >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
