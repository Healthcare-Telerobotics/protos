// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: device_service.proto

#include "device_service.pb.h"
#include "device_service.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace telerobotics {
namespace protos {

static const char* DeviceService_method_names[] = {
  "/telerobotics.protos.DeviceService/Create",
  "/telerobotics.protos.DeviceService/Get",
  "/telerobotics.protos.DeviceService/Update",
  "/telerobotics.protos.DeviceService/List",
  "/telerobotics.protos.DeviceService/Delete",
};

std::unique_ptr< DeviceService::Stub> DeviceService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< DeviceService::Stub> stub(new DeviceService::Stub(channel));
  return stub;
}

DeviceService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_Create_(DeviceService_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Get_(DeviceService_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Update_(DeviceService_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_List_(DeviceService_method_names[3], ::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_Delete_(DeviceService_method_names[4], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status DeviceService::Stub::Create(::grpc::ClientContext* context, const ::telerobotics::protos::CreateDeviceRequest& request, ::telerobotics::protos::CreateDeviceResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Create_, context, request, response);
}

void DeviceService::Stub::experimental_async::Create(::grpc::ClientContext* context, const ::telerobotics::protos::CreateDeviceRequest* request, ::telerobotics::protos::CreateDeviceResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Create_, context, request, response, std::move(f));
}

void DeviceService::Stub::experimental_async::Create(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::telerobotics::protos::CreateDeviceResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Create_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::telerobotics::protos::CreateDeviceResponse>* DeviceService::Stub::AsyncCreateRaw(::grpc::ClientContext* context, const ::telerobotics::protos::CreateDeviceRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::telerobotics::protos::CreateDeviceResponse>::Create(channel_.get(), cq, rpcmethod_Create_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::telerobotics::protos::CreateDeviceResponse>* DeviceService::Stub::PrepareAsyncCreateRaw(::grpc::ClientContext* context, const ::telerobotics::protos::CreateDeviceRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::telerobotics::protos::CreateDeviceResponse>::Create(channel_.get(), cq, rpcmethod_Create_, context, request, false);
}

::grpc::Status DeviceService::Stub::Get(::grpc::ClientContext* context, const ::telerobotics::protos::GetDeviceRequest& request, ::telerobotics::protos::GetDeviceResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Get_, context, request, response);
}

void DeviceService::Stub::experimental_async::Get(::grpc::ClientContext* context, const ::telerobotics::protos::GetDeviceRequest* request, ::telerobotics::protos::GetDeviceResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Get_, context, request, response, std::move(f));
}

void DeviceService::Stub::experimental_async::Get(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::telerobotics::protos::GetDeviceResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Get_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::telerobotics::protos::GetDeviceResponse>* DeviceService::Stub::AsyncGetRaw(::grpc::ClientContext* context, const ::telerobotics::protos::GetDeviceRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::telerobotics::protos::GetDeviceResponse>::Create(channel_.get(), cq, rpcmethod_Get_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::telerobotics::protos::GetDeviceResponse>* DeviceService::Stub::PrepareAsyncGetRaw(::grpc::ClientContext* context, const ::telerobotics::protos::GetDeviceRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::telerobotics::protos::GetDeviceResponse>::Create(channel_.get(), cq, rpcmethod_Get_, context, request, false);
}

::grpc::Status DeviceService::Stub::Update(::grpc::ClientContext* context, const ::telerobotics::protos::UpdateDeviceRequest& request, ::telerobotics::protos::UpdateDeviceResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Update_, context, request, response);
}

void DeviceService::Stub::experimental_async::Update(::grpc::ClientContext* context, const ::telerobotics::protos::UpdateDeviceRequest* request, ::telerobotics::protos::UpdateDeviceResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Update_, context, request, response, std::move(f));
}

void DeviceService::Stub::experimental_async::Update(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::telerobotics::protos::UpdateDeviceResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Update_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::telerobotics::protos::UpdateDeviceResponse>* DeviceService::Stub::AsyncUpdateRaw(::grpc::ClientContext* context, const ::telerobotics::protos::UpdateDeviceRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::telerobotics::protos::UpdateDeviceResponse>::Create(channel_.get(), cq, rpcmethod_Update_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::telerobotics::protos::UpdateDeviceResponse>* DeviceService::Stub::PrepareAsyncUpdateRaw(::grpc::ClientContext* context, const ::telerobotics::protos::UpdateDeviceRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::telerobotics::protos::UpdateDeviceResponse>::Create(channel_.get(), cq, rpcmethod_Update_, context, request, false);
}

::grpc::ClientReader< ::telerobotics::protos::ListDevicesResponse>* DeviceService::Stub::ListRaw(::grpc::ClientContext* context, const ::telerobotics::protos::ListDevicesRequest& request) {
  return ::grpc::internal::ClientReaderFactory< ::telerobotics::protos::ListDevicesResponse>::Create(channel_.get(), rpcmethod_List_, context, request);
}

void DeviceService::Stub::experimental_async::List(::grpc::ClientContext* context, ::telerobotics::protos::ListDevicesRequest* request, ::grpc::experimental::ClientReadReactor< ::telerobotics::protos::ListDevicesResponse>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::telerobotics::protos::ListDevicesResponse>::Create(stub_->channel_.get(), stub_->rpcmethod_List_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::telerobotics::protos::ListDevicesResponse>* DeviceService::Stub::AsyncListRaw(::grpc::ClientContext* context, const ::telerobotics::protos::ListDevicesRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::telerobotics::protos::ListDevicesResponse>::Create(channel_.get(), cq, rpcmethod_List_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::telerobotics::protos::ListDevicesResponse>* DeviceService::Stub::PrepareAsyncListRaw(::grpc::ClientContext* context, const ::telerobotics::protos::ListDevicesRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::telerobotics::protos::ListDevicesResponse>::Create(channel_.get(), cq, rpcmethod_List_, context, request, false, nullptr);
}

::grpc::Status DeviceService::Stub::Delete(::grpc::ClientContext* context, const ::telerobotics::protos::DeleteDeviceRequest& request, ::telerobotics::protos::DeleteDeviceResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Delete_, context, request, response);
}

void DeviceService::Stub::experimental_async::Delete(::grpc::ClientContext* context, const ::telerobotics::protos::DeleteDeviceRequest* request, ::telerobotics::protos::DeleteDeviceResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Delete_, context, request, response, std::move(f));
}

void DeviceService::Stub::experimental_async::Delete(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::telerobotics::protos::DeleteDeviceResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Delete_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::telerobotics::protos::DeleteDeviceResponse>* DeviceService::Stub::AsyncDeleteRaw(::grpc::ClientContext* context, const ::telerobotics::protos::DeleteDeviceRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::telerobotics::protos::DeleteDeviceResponse>::Create(channel_.get(), cq, rpcmethod_Delete_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::telerobotics::protos::DeleteDeviceResponse>* DeviceService::Stub::PrepareAsyncDeleteRaw(::grpc::ClientContext* context, const ::telerobotics::protos::DeleteDeviceRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::telerobotics::protos::DeleteDeviceResponse>::Create(channel_.get(), cq, rpcmethod_Delete_, context, request, false);
}

DeviceService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DeviceService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DeviceService::Service, ::telerobotics::protos::CreateDeviceRequest, ::telerobotics::protos::CreateDeviceResponse>(
          std::mem_fn(&DeviceService::Service::Create), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DeviceService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DeviceService::Service, ::telerobotics::protos::GetDeviceRequest, ::telerobotics::protos::GetDeviceResponse>(
          std::mem_fn(&DeviceService::Service::Get), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DeviceService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DeviceService::Service, ::telerobotics::protos::UpdateDeviceRequest, ::telerobotics::protos::UpdateDeviceResponse>(
          std::mem_fn(&DeviceService::Service::Update), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DeviceService_method_names[3],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< DeviceService::Service, ::telerobotics::protos::ListDevicesRequest, ::telerobotics::protos::ListDevicesResponse>(
          std::mem_fn(&DeviceService::Service::List), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DeviceService_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DeviceService::Service, ::telerobotics::protos::DeleteDeviceRequest, ::telerobotics::protos::DeleteDeviceResponse>(
          std::mem_fn(&DeviceService::Service::Delete), this)));
}

DeviceService::Service::~Service() {
}

::grpc::Status DeviceService::Service::Create(::grpc::ServerContext* context, const ::telerobotics::protos::CreateDeviceRequest* request, ::telerobotics::protos::CreateDeviceResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DeviceService::Service::Get(::grpc::ServerContext* context, const ::telerobotics::protos::GetDeviceRequest* request, ::telerobotics::protos::GetDeviceResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DeviceService::Service::Update(::grpc::ServerContext* context, const ::telerobotics::protos::UpdateDeviceRequest* request, ::telerobotics::protos::UpdateDeviceResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DeviceService::Service::List(::grpc::ServerContext* context, const ::telerobotics::protos::ListDevicesRequest* request, ::grpc::ServerWriter< ::telerobotics::protos::ListDevicesResponse>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DeviceService::Service::Delete(::grpc::ServerContext* context, const ::telerobotics::protos::DeleteDeviceRequest* request, ::telerobotics::protos::DeleteDeviceResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace telerobotics
}  // namespace protos

