// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: session_service.proto

#include "session_service.pb.h"
#include "session_service.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace telerobotics {
namespace protos {

static const char* SessionService_method_names[] = {
  "/telerobotics.protos.SessionService/Create",
  "/telerobotics.protos.SessionService/Get",
  "/telerobotics.protos.SessionService/List",
  "/telerobotics.protos.SessionService/Delete",
  "/telerobotics.protos.SessionService/WaitFor",
  "/telerobotics.protos.SessionService/ListWaiting",
  "/telerobotics.protos.SessionService/Join",
};

std::unique_ptr< SessionService::Stub> SessionService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< SessionService::Stub> stub(new SessionService::Stub(channel));
  return stub;
}

SessionService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_Create_(SessionService_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Get_(SessionService_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_List_(SessionService_method_names[2], ::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_Delete_(SessionService_method_names[3], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_WaitFor_(SessionService_method_names[4], ::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_ListWaiting_(SessionService_method_names[5], ::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_Join_(SessionService_method_names[6], ::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  {}

::grpc::Status SessionService::Stub::Create(::grpc::ClientContext* context, const ::telerobotics::protos::CreateSessionRequest& request, ::telerobotics::protos::CreateSessionResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Create_, context, request, response);
}

void SessionService::Stub::experimental_async::Create(::grpc::ClientContext* context, const ::telerobotics::protos::CreateSessionRequest* request, ::telerobotics::protos::CreateSessionResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Create_, context, request, response, std::move(f));
}

void SessionService::Stub::experimental_async::Create(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::telerobotics::protos::CreateSessionResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Create_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::telerobotics::protos::CreateSessionResponse>* SessionService::Stub::AsyncCreateRaw(::grpc::ClientContext* context, const ::telerobotics::protos::CreateSessionRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::telerobotics::protos::CreateSessionResponse>::Create(channel_.get(), cq, rpcmethod_Create_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::telerobotics::protos::CreateSessionResponse>* SessionService::Stub::PrepareAsyncCreateRaw(::grpc::ClientContext* context, const ::telerobotics::protos::CreateSessionRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::telerobotics::protos::CreateSessionResponse>::Create(channel_.get(), cq, rpcmethod_Create_, context, request, false);
}

::grpc::Status SessionService::Stub::Get(::grpc::ClientContext* context, const ::telerobotics::protos::GetSessionRequest& request, ::telerobotics::protos::GetSessionResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Get_, context, request, response);
}

void SessionService::Stub::experimental_async::Get(::grpc::ClientContext* context, const ::telerobotics::protos::GetSessionRequest* request, ::telerobotics::protos::GetSessionResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Get_, context, request, response, std::move(f));
}

void SessionService::Stub::experimental_async::Get(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::telerobotics::protos::GetSessionResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Get_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::telerobotics::protos::GetSessionResponse>* SessionService::Stub::AsyncGetRaw(::grpc::ClientContext* context, const ::telerobotics::protos::GetSessionRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::telerobotics::protos::GetSessionResponse>::Create(channel_.get(), cq, rpcmethod_Get_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::telerobotics::protos::GetSessionResponse>* SessionService::Stub::PrepareAsyncGetRaw(::grpc::ClientContext* context, const ::telerobotics::protos::GetSessionRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::telerobotics::protos::GetSessionResponse>::Create(channel_.get(), cq, rpcmethod_Get_, context, request, false);
}

::grpc::ClientReader< ::telerobotics::protos::ListSessionsResponse>* SessionService::Stub::ListRaw(::grpc::ClientContext* context, const ::telerobotics::protos::ListSessionsRequest& request) {
  return ::grpc::internal::ClientReaderFactory< ::telerobotics::protos::ListSessionsResponse>::Create(channel_.get(), rpcmethod_List_, context, request);
}

void SessionService::Stub::experimental_async::List(::grpc::ClientContext* context, ::telerobotics::protos::ListSessionsRequest* request, ::grpc::experimental::ClientReadReactor< ::telerobotics::protos::ListSessionsResponse>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::telerobotics::protos::ListSessionsResponse>::Create(stub_->channel_.get(), stub_->rpcmethod_List_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::telerobotics::protos::ListSessionsResponse>* SessionService::Stub::AsyncListRaw(::grpc::ClientContext* context, const ::telerobotics::protos::ListSessionsRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::telerobotics::protos::ListSessionsResponse>::Create(channel_.get(), cq, rpcmethod_List_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::telerobotics::protos::ListSessionsResponse>* SessionService::Stub::PrepareAsyncListRaw(::grpc::ClientContext* context, const ::telerobotics::protos::ListSessionsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::telerobotics::protos::ListSessionsResponse>::Create(channel_.get(), cq, rpcmethod_List_, context, request, false, nullptr);
}

::grpc::Status SessionService::Stub::Delete(::grpc::ClientContext* context, const ::telerobotics::protos::DeleteSessionRequest& request, ::telerobotics::protos::DeleteSessionResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Delete_, context, request, response);
}

void SessionService::Stub::experimental_async::Delete(::grpc::ClientContext* context, const ::telerobotics::protos::DeleteSessionRequest* request, ::telerobotics::protos::DeleteSessionResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Delete_, context, request, response, std::move(f));
}

void SessionService::Stub::experimental_async::Delete(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::telerobotics::protos::DeleteSessionResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Delete_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::telerobotics::protos::DeleteSessionResponse>* SessionService::Stub::AsyncDeleteRaw(::grpc::ClientContext* context, const ::telerobotics::protos::DeleteSessionRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::telerobotics::protos::DeleteSessionResponse>::Create(channel_.get(), cq, rpcmethod_Delete_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::telerobotics::protos::DeleteSessionResponse>* SessionService::Stub::PrepareAsyncDeleteRaw(::grpc::ClientContext* context, const ::telerobotics::protos::DeleteSessionRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::telerobotics::protos::DeleteSessionResponse>::Create(channel_.get(), cq, rpcmethod_Delete_, context, request, false);
}

::grpc::ClientReader< ::telerobotics::protos::WaitForSessionResponse>* SessionService::Stub::WaitForRaw(::grpc::ClientContext* context, const ::telerobotics::protos::WaitForSessionRequest& request) {
  return ::grpc::internal::ClientReaderFactory< ::telerobotics::protos::WaitForSessionResponse>::Create(channel_.get(), rpcmethod_WaitFor_, context, request);
}

void SessionService::Stub::experimental_async::WaitFor(::grpc::ClientContext* context, ::telerobotics::protos::WaitForSessionRequest* request, ::grpc::experimental::ClientReadReactor< ::telerobotics::protos::WaitForSessionResponse>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::telerobotics::protos::WaitForSessionResponse>::Create(stub_->channel_.get(), stub_->rpcmethod_WaitFor_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::telerobotics::protos::WaitForSessionResponse>* SessionService::Stub::AsyncWaitForRaw(::grpc::ClientContext* context, const ::telerobotics::protos::WaitForSessionRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::telerobotics::protos::WaitForSessionResponse>::Create(channel_.get(), cq, rpcmethod_WaitFor_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::telerobotics::protos::WaitForSessionResponse>* SessionService::Stub::PrepareAsyncWaitForRaw(::grpc::ClientContext* context, const ::telerobotics::protos::WaitForSessionRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::telerobotics::protos::WaitForSessionResponse>::Create(channel_.get(), cq, rpcmethod_WaitFor_, context, request, false, nullptr);
}

::grpc::ClientReader< ::telerobotics::protos::ListWaitingSessionResponse>* SessionService::Stub::ListWaitingRaw(::grpc::ClientContext* context, const ::telerobotics::protos::ListWaitingSessionRequest& request) {
  return ::grpc::internal::ClientReaderFactory< ::telerobotics::protos::ListWaitingSessionResponse>::Create(channel_.get(), rpcmethod_ListWaiting_, context, request);
}

void SessionService::Stub::experimental_async::ListWaiting(::grpc::ClientContext* context, ::telerobotics::protos::ListWaitingSessionRequest* request, ::grpc::experimental::ClientReadReactor< ::telerobotics::protos::ListWaitingSessionResponse>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::telerobotics::protos::ListWaitingSessionResponse>::Create(stub_->channel_.get(), stub_->rpcmethod_ListWaiting_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::telerobotics::protos::ListWaitingSessionResponse>* SessionService::Stub::AsyncListWaitingRaw(::grpc::ClientContext* context, const ::telerobotics::protos::ListWaitingSessionRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::telerobotics::protos::ListWaitingSessionResponse>::Create(channel_.get(), cq, rpcmethod_ListWaiting_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::telerobotics::protos::ListWaitingSessionResponse>* SessionService::Stub::PrepareAsyncListWaitingRaw(::grpc::ClientContext* context, const ::telerobotics::protos::ListWaitingSessionRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::telerobotics::protos::ListWaitingSessionResponse>::Create(channel_.get(), cq, rpcmethod_ListWaiting_, context, request, false, nullptr);
}

::grpc::ClientReader< ::telerobotics::protos::JoinSessionResponse>* SessionService::Stub::JoinRaw(::grpc::ClientContext* context, const ::telerobotics::protos::JoinSessionRequest& request) {
  return ::grpc::internal::ClientReaderFactory< ::telerobotics::protos::JoinSessionResponse>::Create(channel_.get(), rpcmethod_Join_, context, request);
}

void SessionService::Stub::experimental_async::Join(::grpc::ClientContext* context, ::telerobotics::protos::JoinSessionRequest* request, ::grpc::experimental::ClientReadReactor< ::telerobotics::protos::JoinSessionResponse>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::telerobotics::protos::JoinSessionResponse>::Create(stub_->channel_.get(), stub_->rpcmethod_Join_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::telerobotics::protos::JoinSessionResponse>* SessionService::Stub::AsyncJoinRaw(::grpc::ClientContext* context, const ::telerobotics::protos::JoinSessionRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::telerobotics::protos::JoinSessionResponse>::Create(channel_.get(), cq, rpcmethod_Join_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::telerobotics::protos::JoinSessionResponse>* SessionService::Stub::PrepareAsyncJoinRaw(::grpc::ClientContext* context, const ::telerobotics::protos::JoinSessionRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::telerobotics::protos::JoinSessionResponse>::Create(channel_.get(), cq, rpcmethod_Join_, context, request, false, nullptr);
}

SessionService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SessionService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SessionService::Service, ::telerobotics::protos::CreateSessionRequest, ::telerobotics::protos::CreateSessionResponse>(
          std::mem_fn(&SessionService::Service::Create), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SessionService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SessionService::Service, ::telerobotics::protos::GetSessionRequest, ::telerobotics::protos::GetSessionResponse>(
          std::mem_fn(&SessionService::Service::Get), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SessionService_method_names[2],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< SessionService::Service, ::telerobotics::protos::ListSessionsRequest, ::telerobotics::protos::ListSessionsResponse>(
          std::mem_fn(&SessionService::Service::List), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SessionService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SessionService::Service, ::telerobotics::protos::DeleteSessionRequest, ::telerobotics::protos::DeleteSessionResponse>(
          std::mem_fn(&SessionService::Service::Delete), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SessionService_method_names[4],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< SessionService::Service, ::telerobotics::protos::WaitForSessionRequest, ::telerobotics::protos::WaitForSessionResponse>(
          std::mem_fn(&SessionService::Service::WaitFor), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SessionService_method_names[5],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< SessionService::Service, ::telerobotics::protos::ListWaitingSessionRequest, ::telerobotics::protos::ListWaitingSessionResponse>(
          std::mem_fn(&SessionService::Service::ListWaiting), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SessionService_method_names[6],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< SessionService::Service, ::telerobotics::protos::JoinSessionRequest, ::telerobotics::protos::JoinSessionResponse>(
          std::mem_fn(&SessionService::Service::Join), this)));
}

SessionService::Service::~Service() {
}

::grpc::Status SessionService::Service::Create(::grpc::ServerContext* context, const ::telerobotics::protos::CreateSessionRequest* request, ::telerobotics::protos::CreateSessionResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status SessionService::Service::Get(::grpc::ServerContext* context, const ::telerobotics::protos::GetSessionRequest* request, ::telerobotics::protos::GetSessionResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status SessionService::Service::List(::grpc::ServerContext* context, const ::telerobotics::protos::ListSessionsRequest* request, ::grpc::ServerWriter< ::telerobotics::protos::ListSessionsResponse>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status SessionService::Service::Delete(::grpc::ServerContext* context, const ::telerobotics::protos::DeleteSessionRequest* request, ::telerobotics::protos::DeleteSessionResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status SessionService::Service::WaitFor(::grpc::ServerContext* context, const ::telerobotics::protos::WaitForSessionRequest* request, ::grpc::ServerWriter< ::telerobotics::protos::WaitForSessionResponse>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status SessionService::Service::ListWaiting(::grpc::ServerContext* context, const ::telerobotics::protos::ListWaitingSessionRequest* request, ::grpc::ServerWriter< ::telerobotics::protos::ListWaitingSessionResponse>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status SessionService::Service::Join(::grpc::ServerContext* context, const ::telerobotics::protos::JoinSessionRequest* request, ::grpc::ServerWriter< ::telerobotics::protos::JoinSessionResponse>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace telerobotics
}  // namespace protos

