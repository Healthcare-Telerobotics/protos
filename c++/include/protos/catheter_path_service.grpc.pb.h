// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: catheter_path_service.proto
#ifndef GRPC_catheter_5fpath_5fservice_2eproto__INCLUDED
#define GRPC_catheter_5fpath_5fservice_2eproto__INCLUDED

#include "catheter_path_service.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace grpc {
class CompletionQueue;
class Channel;
class ServerCompletionQueue;
class ServerContext;
}  // namespace grpc

namespace telerobotics {
namespace protos {

//
// Service for interacting with catheter paths
class CatheterPathService final {
 public:
  static constexpr char const* service_full_name() {
    return "telerobotics.protos.CatheterPathService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // Create a catheter path
    virtual ::grpc::Status Create(::grpc::ClientContext* context, const ::telerobotics::protos::CreateCatheterPathRequest& request, ::telerobotics::protos::CreateCatheterPathResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::telerobotics::protos::CreateCatheterPathResponse>> AsyncCreate(::grpc::ClientContext* context, const ::telerobotics::protos::CreateCatheterPathRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::telerobotics::protos::CreateCatheterPathResponse>>(AsyncCreateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::telerobotics::protos::CreateCatheterPathResponse>> PrepareAsyncCreate(::grpc::ClientContext* context, const ::telerobotics::protos::CreateCatheterPathRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::telerobotics::protos::CreateCatheterPathResponse>>(PrepareAsyncCreateRaw(context, request, cq));
    }
    // Gets a catheter path
    virtual ::grpc::Status Get(::grpc::ClientContext* context, const ::telerobotics::protos::GetCatheterPathRequest& request, ::telerobotics::protos::GetCatheterPathResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::telerobotics::protos::GetCatheterPathResponse>> AsyncGet(::grpc::ClientContext* context, const ::telerobotics::protos::GetCatheterPathRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::telerobotics::protos::GetCatheterPathResponse>>(AsyncGetRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::telerobotics::protos::GetCatheterPathResponse>> PrepareAsyncGet(::grpc::ClientContext* context, const ::telerobotics::protos::GetCatheterPathRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::telerobotics::protos::GetCatheterPathResponse>>(PrepareAsyncGetRaw(context, request, cq));
    }
    // Gets a catheter path coordinates
    std::unique_ptr< ::grpc::ClientReaderInterface< ::telerobotics::protos::GetCoordinatesCatheterPathResponse>> GetCoordinates(::grpc::ClientContext* context, const ::telerobotics::protos::GetCoordinatesCatheterPathRequest& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::telerobotics::protos::GetCoordinatesCatheterPathResponse>>(GetCoordinatesRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::telerobotics::protos::GetCoordinatesCatheterPathResponse>> AsyncGetCoordinates(::grpc::ClientContext* context, const ::telerobotics::protos::GetCoordinatesCatheterPathRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::telerobotics::protos::GetCoordinatesCatheterPathResponse>>(AsyncGetCoordinatesRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::telerobotics::protos::GetCoordinatesCatheterPathResponse>> PrepareAsyncGetCoordinates(::grpc::ClientContext* context, const ::telerobotics::protos::GetCoordinatesCatheterPathRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::telerobotics::protos::GetCoordinatesCatheterPathResponse>>(PrepareAsyncGetCoordinatesRaw(context, request, cq));
    }
    // Lists catheter paths
    std::unique_ptr< ::grpc::ClientReaderInterface< ::telerobotics::protos::ListCatheterPathsResponse>> List(::grpc::ClientContext* context, const ::telerobotics::protos::ListCatheterPathsRequest& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::telerobotics::protos::ListCatheterPathsResponse>>(ListRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::telerobotics::protos::ListCatheterPathsResponse>> AsyncList(::grpc::ClientContext* context, const ::telerobotics::protos::ListCatheterPathsRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::telerobotics::protos::ListCatheterPathsResponse>>(AsyncListRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::telerobotics::protos::ListCatheterPathsResponse>> PrepareAsyncList(::grpc::ClientContext* context, const ::telerobotics::protos::ListCatheterPathsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::telerobotics::protos::ListCatheterPathsResponse>>(PrepareAsyncListRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      // Create a catheter path
      virtual void Create(::grpc::ClientContext* context, const ::telerobotics::protos::CreateCatheterPathRequest* request, ::telerobotics::protos::CreateCatheterPathResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Create(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::telerobotics::protos::CreateCatheterPathResponse* response, std::function<void(::grpc::Status)>) = 0;
      // Gets a catheter path
      virtual void Get(::grpc::ClientContext* context, const ::telerobotics::protos::GetCatheterPathRequest* request, ::telerobotics::protos::GetCatheterPathResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Get(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::telerobotics::protos::GetCatheterPathResponse* response, std::function<void(::grpc::Status)>) = 0;
      // Gets a catheter path coordinates
      virtual void GetCoordinates(::grpc::ClientContext* context, ::telerobotics::protos::GetCoordinatesCatheterPathRequest* request, ::grpc::experimental::ClientReadReactor< ::telerobotics::protos::GetCoordinatesCatheterPathResponse>* reactor) = 0;
      // Lists catheter paths
      virtual void List(::grpc::ClientContext* context, ::telerobotics::protos::ListCatheterPathsRequest* request, ::grpc::experimental::ClientReadReactor< ::telerobotics::protos::ListCatheterPathsResponse>* reactor) = 0;
    };
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::telerobotics::protos::CreateCatheterPathResponse>* AsyncCreateRaw(::grpc::ClientContext* context, const ::telerobotics::protos::CreateCatheterPathRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::telerobotics::protos::CreateCatheterPathResponse>* PrepareAsyncCreateRaw(::grpc::ClientContext* context, const ::telerobotics::protos::CreateCatheterPathRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::telerobotics::protos::GetCatheterPathResponse>* AsyncGetRaw(::grpc::ClientContext* context, const ::telerobotics::protos::GetCatheterPathRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::telerobotics::protos::GetCatheterPathResponse>* PrepareAsyncGetRaw(::grpc::ClientContext* context, const ::telerobotics::protos::GetCatheterPathRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::telerobotics::protos::GetCoordinatesCatheterPathResponse>* GetCoordinatesRaw(::grpc::ClientContext* context, const ::telerobotics::protos::GetCoordinatesCatheterPathRequest& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::telerobotics::protos::GetCoordinatesCatheterPathResponse>* AsyncGetCoordinatesRaw(::grpc::ClientContext* context, const ::telerobotics::protos::GetCoordinatesCatheterPathRequest& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::telerobotics::protos::GetCoordinatesCatheterPathResponse>* PrepareAsyncGetCoordinatesRaw(::grpc::ClientContext* context, const ::telerobotics::protos::GetCoordinatesCatheterPathRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::telerobotics::protos::ListCatheterPathsResponse>* ListRaw(::grpc::ClientContext* context, const ::telerobotics::protos::ListCatheterPathsRequest& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::telerobotics::protos::ListCatheterPathsResponse>* AsyncListRaw(::grpc::ClientContext* context, const ::telerobotics::protos::ListCatheterPathsRequest& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::telerobotics::protos::ListCatheterPathsResponse>* PrepareAsyncListRaw(::grpc::ClientContext* context, const ::telerobotics::protos::ListCatheterPathsRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status Create(::grpc::ClientContext* context, const ::telerobotics::protos::CreateCatheterPathRequest& request, ::telerobotics::protos::CreateCatheterPathResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::telerobotics::protos::CreateCatheterPathResponse>> AsyncCreate(::grpc::ClientContext* context, const ::telerobotics::protos::CreateCatheterPathRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::telerobotics::protos::CreateCatheterPathResponse>>(AsyncCreateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::telerobotics::protos::CreateCatheterPathResponse>> PrepareAsyncCreate(::grpc::ClientContext* context, const ::telerobotics::protos::CreateCatheterPathRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::telerobotics::protos::CreateCatheterPathResponse>>(PrepareAsyncCreateRaw(context, request, cq));
    }
    ::grpc::Status Get(::grpc::ClientContext* context, const ::telerobotics::protos::GetCatheterPathRequest& request, ::telerobotics::protos::GetCatheterPathResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::telerobotics::protos::GetCatheterPathResponse>> AsyncGet(::grpc::ClientContext* context, const ::telerobotics::protos::GetCatheterPathRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::telerobotics::protos::GetCatheterPathResponse>>(AsyncGetRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::telerobotics::protos::GetCatheterPathResponse>> PrepareAsyncGet(::grpc::ClientContext* context, const ::telerobotics::protos::GetCatheterPathRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::telerobotics::protos::GetCatheterPathResponse>>(PrepareAsyncGetRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::telerobotics::protos::GetCoordinatesCatheterPathResponse>> GetCoordinates(::grpc::ClientContext* context, const ::telerobotics::protos::GetCoordinatesCatheterPathRequest& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::telerobotics::protos::GetCoordinatesCatheterPathResponse>>(GetCoordinatesRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::telerobotics::protos::GetCoordinatesCatheterPathResponse>> AsyncGetCoordinates(::grpc::ClientContext* context, const ::telerobotics::protos::GetCoordinatesCatheterPathRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::telerobotics::protos::GetCoordinatesCatheterPathResponse>>(AsyncGetCoordinatesRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::telerobotics::protos::GetCoordinatesCatheterPathResponse>> PrepareAsyncGetCoordinates(::grpc::ClientContext* context, const ::telerobotics::protos::GetCoordinatesCatheterPathRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::telerobotics::protos::GetCoordinatesCatheterPathResponse>>(PrepareAsyncGetCoordinatesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::telerobotics::protos::ListCatheterPathsResponse>> List(::grpc::ClientContext* context, const ::telerobotics::protos::ListCatheterPathsRequest& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::telerobotics::protos::ListCatheterPathsResponse>>(ListRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::telerobotics::protos::ListCatheterPathsResponse>> AsyncList(::grpc::ClientContext* context, const ::telerobotics::protos::ListCatheterPathsRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::telerobotics::protos::ListCatheterPathsResponse>>(AsyncListRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::telerobotics::protos::ListCatheterPathsResponse>> PrepareAsyncList(::grpc::ClientContext* context, const ::telerobotics::protos::ListCatheterPathsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::telerobotics::protos::ListCatheterPathsResponse>>(PrepareAsyncListRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void Create(::grpc::ClientContext* context, const ::telerobotics::protos::CreateCatheterPathRequest* request, ::telerobotics::protos::CreateCatheterPathResponse* response, std::function<void(::grpc::Status)>) override;
      void Create(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::telerobotics::protos::CreateCatheterPathResponse* response, std::function<void(::grpc::Status)>) override;
      void Get(::grpc::ClientContext* context, const ::telerobotics::protos::GetCatheterPathRequest* request, ::telerobotics::protos::GetCatheterPathResponse* response, std::function<void(::grpc::Status)>) override;
      void Get(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::telerobotics::protos::GetCatheterPathResponse* response, std::function<void(::grpc::Status)>) override;
      void GetCoordinates(::grpc::ClientContext* context, ::telerobotics::protos::GetCoordinatesCatheterPathRequest* request, ::grpc::experimental::ClientReadReactor< ::telerobotics::protos::GetCoordinatesCatheterPathResponse>* reactor) override;
      void List(::grpc::ClientContext* context, ::telerobotics::protos::ListCatheterPathsRequest* request, ::grpc::experimental::ClientReadReactor< ::telerobotics::protos::ListCatheterPathsResponse>* reactor) override;
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::telerobotics::protos::CreateCatheterPathResponse>* AsyncCreateRaw(::grpc::ClientContext* context, const ::telerobotics::protos::CreateCatheterPathRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::telerobotics::protos::CreateCatheterPathResponse>* PrepareAsyncCreateRaw(::grpc::ClientContext* context, const ::telerobotics::protos::CreateCatheterPathRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::telerobotics::protos::GetCatheterPathResponse>* AsyncGetRaw(::grpc::ClientContext* context, const ::telerobotics::protos::GetCatheterPathRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::telerobotics::protos::GetCatheterPathResponse>* PrepareAsyncGetRaw(::grpc::ClientContext* context, const ::telerobotics::protos::GetCatheterPathRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::telerobotics::protos::GetCoordinatesCatheterPathResponse>* GetCoordinatesRaw(::grpc::ClientContext* context, const ::telerobotics::protos::GetCoordinatesCatheterPathRequest& request) override;
    ::grpc::ClientAsyncReader< ::telerobotics::protos::GetCoordinatesCatheterPathResponse>* AsyncGetCoordinatesRaw(::grpc::ClientContext* context, const ::telerobotics::protos::GetCoordinatesCatheterPathRequest& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::telerobotics::protos::GetCoordinatesCatheterPathResponse>* PrepareAsyncGetCoordinatesRaw(::grpc::ClientContext* context, const ::telerobotics::protos::GetCoordinatesCatheterPathRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::telerobotics::protos::ListCatheterPathsResponse>* ListRaw(::grpc::ClientContext* context, const ::telerobotics::protos::ListCatheterPathsRequest& request) override;
    ::grpc::ClientAsyncReader< ::telerobotics::protos::ListCatheterPathsResponse>* AsyncListRaw(::grpc::ClientContext* context, const ::telerobotics::protos::ListCatheterPathsRequest& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::telerobotics::protos::ListCatheterPathsResponse>* PrepareAsyncListRaw(::grpc::ClientContext* context, const ::telerobotics::protos::ListCatheterPathsRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_Create_;
    const ::grpc::internal::RpcMethod rpcmethod_Get_;
    const ::grpc::internal::RpcMethod rpcmethod_GetCoordinates_;
    const ::grpc::internal::RpcMethod rpcmethod_List_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // Create a catheter path
    virtual ::grpc::Status Create(::grpc::ServerContext* context, const ::telerobotics::protos::CreateCatheterPathRequest* request, ::telerobotics::protos::CreateCatheterPathResponse* response);
    // Gets a catheter path
    virtual ::grpc::Status Get(::grpc::ServerContext* context, const ::telerobotics::protos::GetCatheterPathRequest* request, ::telerobotics::protos::GetCatheterPathResponse* response);
    // Gets a catheter path coordinates
    virtual ::grpc::Status GetCoordinates(::grpc::ServerContext* context, const ::telerobotics::protos::GetCoordinatesCatheterPathRequest* request, ::grpc::ServerWriter< ::telerobotics::protos::GetCoordinatesCatheterPathResponse>* writer);
    // Lists catheter paths
    virtual ::grpc::Status List(::grpc::ServerContext* context, const ::telerobotics::protos::ListCatheterPathsRequest* request, ::grpc::ServerWriter< ::telerobotics::protos::ListCatheterPathsResponse>* writer);
  };
  template <class BaseClass>
  class WithAsyncMethod_Create : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_Create() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_Create() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Create(::grpc::ServerContext* context, const ::telerobotics::protos::CreateCatheterPathRequest* request, ::telerobotics::protos::CreateCatheterPathResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreate(::grpc::ServerContext* context, ::telerobotics::protos::CreateCatheterPathRequest* request, ::grpc::ServerAsyncResponseWriter< ::telerobotics::protos::CreateCatheterPathResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Get : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_Get() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_Get() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Get(::grpc::ServerContext* context, const ::telerobotics::protos::GetCatheterPathRequest* request, ::telerobotics::protos::GetCatheterPathResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGet(::grpc::ServerContext* context, ::telerobotics::protos::GetCatheterPathRequest* request, ::grpc::ServerAsyncResponseWriter< ::telerobotics::protos::GetCatheterPathResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetCoordinates : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_GetCoordinates() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_GetCoordinates() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetCoordinates(::grpc::ServerContext* context, const ::telerobotics::protos::GetCoordinatesCatheterPathRequest* request, ::grpc::ServerWriter< ::telerobotics::protos::GetCoordinatesCatheterPathResponse>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetCoordinates(::grpc::ServerContext* context, ::telerobotics::protos::GetCoordinatesCatheterPathRequest* request, ::grpc::ServerAsyncWriter< ::telerobotics::protos::GetCoordinatesCatheterPathResponse>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(2, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_List : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_List() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_List() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status List(::grpc::ServerContext* context, const ::telerobotics::protos::ListCatheterPathsRequest* request, ::grpc::ServerWriter< ::telerobotics::protos::ListCatheterPathsResponse>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestList(::grpc::ServerContext* context, ::telerobotics::protos::ListCatheterPathsRequest* request, ::grpc::ServerAsyncWriter< ::telerobotics::protos::ListCatheterPathsResponse>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(3, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_Create<WithAsyncMethod_Get<WithAsyncMethod_GetCoordinates<WithAsyncMethod_List<Service > > > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_Create : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_Create() {
      ::grpc::Service::experimental().MarkMethodCallback(0,
        new ::grpc::internal::CallbackUnaryHandler< ::telerobotics::protos::CreateCatheterPathRequest, ::telerobotics::protos::CreateCatheterPathResponse>(
          [this](::grpc::ServerContext* context,
                 const ::telerobotics::protos::CreateCatheterPathRequest* request,
                 ::telerobotics::protos::CreateCatheterPathResponse* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->Create(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithCallbackMethod_Create() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Create(::grpc::ServerContext* context, const ::telerobotics::protos::CreateCatheterPathRequest* request, ::telerobotics::protos::CreateCatheterPathResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void Create(::grpc::ServerContext* context, const ::telerobotics::protos::CreateCatheterPathRequest* request, ::telerobotics::protos::CreateCatheterPathResponse* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_Get : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_Get() {
      ::grpc::Service::experimental().MarkMethodCallback(1,
        new ::grpc::internal::CallbackUnaryHandler< ::telerobotics::protos::GetCatheterPathRequest, ::telerobotics::protos::GetCatheterPathResponse>(
          [this](::grpc::ServerContext* context,
                 const ::telerobotics::protos::GetCatheterPathRequest* request,
                 ::telerobotics::protos::GetCatheterPathResponse* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->Get(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithCallbackMethod_Get() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Get(::grpc::ServerContext* context, const ::telerobotics::protos::GetCatheterPathRequest* request, ::telerobotics::protos::GetCatheterPathResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void Get(::grpc::ServerContext* context, const ::telerobotics::protos::GetCatheterPathRequest* request, ::telerobotics::protos::GetCatheterPathResponse* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetCoordinates : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_GetCoordinates() {
      ::grpc::Service::experimental().MarkMethodCallback(2,
        new ::grpc::internal::CallbackServerStreamingHandler< ::telerobotics::protos::GetCoordinatesCatheterPathRequest, ::telerobotics::protos::GetCoordinatesCatheterPathResponse>(
          [this] { return this->GetCoordinates(); }));
    }
    ~ExperimentalWithCallbackMethod_GetCoordinates() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetCoordinates(::grpc::ServerContext* context, const ::telerobotics::protos::GetCoordinatesCatheterPathRequest* request, ::grpc::ServerWriter< ::telerobotics::protos::GetCoordinatesCatheterPathResponse>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::experimental::ServerWriteReactor< ::telerobotics::protos::GetCoordinatesCatheterPathRequest, ::telerobotics::protos::GetCoordinatesCatheterPathResponse>* GetCoordinates() {
      return new ::grpc::internal::UnimplementedWriteReactor<
        ::telerobotics::protos::GetCoordinatesCatheterPathRequest, ::telerobotics::protos::GetCoordinatesCatheterPathResponse>;}
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_List : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_List() {
      ::grpc::Service::experimental().MarkMethodCallback(3,
        new ::grpc::internal::CallbackServerStreamingHandler< ::telerobotics::protos::ListCatheterPathsRequest, ::telerobotics::protos::ListCatheterPathsResponse>(
          [this] { return this->List(); }));
    }
    ~ExperimentalWithCallbackMethod_List() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status List(::grpc::ServerContext* context, const ::telerobotics::protos::ListCatheterPathsRequest* request, ::grpc::ServerWriter< ::telerobotics::protos::ListCatheterPathsResponse>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::experimental::ServerWriteReactor< ::telerobotics::protos::ListCatheterPathsRequest, ::telerobotics::protos::ListCatheterPathsResponse>* List() {
      return new ::grpc::internal::UnimplementedWriteReactor<
        ::telerobotics::protos::ListCatheterPathsRequest, ::telerobotics::protos::ListCatheterPathsResponse>;}
  };
  typedef ExperimentalWithCallbackMethod_Create<ExperimentalWithCallbackMethod_Get<ExperimentalWithCallbackMethod_GetCoordinates<ExperimentalWithCallbackMethod_List<Service > > > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_Create : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_Create() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_Create() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Create(::grpc::ServerContext* context, const ::telerobotics::protos::CreateCatheterPathRequest* request, ::telerobotics::protos::CreateCatheterPathResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Get : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_Get() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_Get() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Get(::grpc::ServerContext* context, const ::telerobotics::protos::GetCatheterPathRequest* request, ::telerobotics::protos::GetCatheterPathResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetCoordinates : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_GetCoordinates() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_GetCoordinates() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetCoordinates(::grpc::ServerContext* context, const ::telerobotics::protos::GetCoordinatesCatheterPathRequest* request, ::grpc::ServerWriter< ::telerobotics::protos::GetCoordinatesCatheterPathResponse>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_List : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_List() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_List() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status List(::grpc::ServerContext* context, const ::telerobotics::protos::ListCatheterPathsRequest* request, ::grpc::ServerWriter< ::telerobotics::protos::ListCatheterPathsResponse>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_Create : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_Create() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_Create() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Create(::grpc::ServerContext* context, const ::telerobotics::protos::CreateCatheterPathRequest* request, ::telerobotics::protos::CreateCatheterPathResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreate(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Get : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_Get() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_Get() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Get(::grpc::ServerContext* context, const ::telerobotics::protos::GetCatheterPathRequest* request, ::telerobotics::protos::GetCatheterPathResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGet(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetCoordinates : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_GetCoordinates() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_GetCoordinates() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetCoordinates(::grpc::ServerContext* context, const ::telerobotics::protos::GetCoordinatesCatheterPathRequest* request, ::grpc::ServerWriter< ::telerobotics::protos::GetCoordinatesCatheterPathResponse>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetCoordinates(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(2, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_List : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_List() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_List() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status List(::grpc::ServerContext* context, const ::telerobotics::protos::ListCatheterPathsRequest* request, ::grpc::ServerWriter< ::telerobotics::protos::ListCatheterPathsResponse>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestList(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(3, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_Create : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_Create() {
      ::grpc::Service::experimental().MarkMethodRawCallback(0,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->Create(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_Create() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Create(::grpc::ServerContext* context, const ::telerobotics::protos::CreateCatheterPathRequest* request, ::telerobotics::protos::CreateCatheterPathResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void Create(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_Get : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_Get() {
      ::grpc::Service::experimental().MarkMethodRawCallback(1,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->Get(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_Get() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Get(::grpc::ServerContext* context, const ::telerobotics::protos::GetCatheterPathRequest* request, ::telerobotics::protos::GetCatheterPathResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void Get(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetCoordinates : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_GetCoordinates() {
      ::grpc::Service::experimental().MarkMethodRawCallback(2,
        new ::grpc::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this] { return this->GetCoordinates(); }));
    }
    ~ExperimentalWithRawCallbackMethod_GetCoordinates() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetCoordinates(::grpc::ServerContext* context, const ::telerobotics::protos::GetCoordinatesCatheterPathRequest* request, ::grpc::ServerWriter< ::telerobotics::protos::GetCoordinatesCatheterPathResponse>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::experimental::ServerWriteReactor< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* GetCoordinates() {
      return new ::grpc::internal::UnimplementedWriteReactor<
        ::grpc::ByteBuffer, ::grpc::ByteBuffer>;}
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_List : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_List() {
      ::grpc::Service::experimental().MarkMethodRawCallback(3,
        new ::grpc::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this] { return this->List(); }));
    }
    ~ExperimentalWithRawCallbackMethod_List() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status List(::grpc::ServerContext* context, const ::telerobotics::protos::ListCatheterPathsRequest* request, ::grpc::ServerWriter< ::telerobotics::protos::ListCatheterPathsResponse>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::experimental::ServerWriteReactor< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* List() {
      return new ::grpc::internal::UnimplementedWriteReactor<
        ::grpc::ByteBuffer, ::grpc::ByteBuffer>;}
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Create : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_Create() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler< ::telerobotics::protos::CreateCatheterPathRequest, ::telerobotics::protos::CreateCatheterPathResponse>(std::bind(&WithStreamedUnaryMethod_Create<BaseClass>::StreamedCreate, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_Create() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Create(::grpc::ServerContext* context, const ::telerobotics::protos::CreateCatheterPathRequest* request, ::telerobotics::protos::CreateCatheterPathResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCreate(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::telerobotics::protos::CreateCatheterPathRequest,::telerobotics::protos::CreateCatheterPathResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Get : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_Get() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler< ::telerobotics::protos::GetCatheterPathRequest, ::telerobotics::protos::GetCatheterPathResponse>(std::bind(&WithStreamedUnaryMethod_Get<BaseClass>::StreamedGet, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_Get() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Get(::grpc::ServerContext* context, const ::telerobotics::protos::GetCatheterPathRequest* request, ::telerobotics::protos::GetCatheterPathResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGet(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::telerobotics::protos::GetCatheterPathRequest,::telerobotics::protos::GetCatheterPathResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_Create<WithStreamedUnaryMethod_Get<Service > > StreamedUnaryService;
  template <class BaseClass>
  class WithSplitStreamingMethod_GetCoordinates : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithSplitStreamingMethod_GetCoordinates() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::SplitServerStreamingHandler< ::telerobotics::protos::GetCoordinatesCatheterPathRequest, ::telerobotics::protos::GetCoordinatesCatheterPathResponse>(std::bind(&WithSplitStreamingMethod_GetCoordinates<BaseClass>::StreamedGetCoordinates, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithSplitStreamingMethod_GetCoordinates() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetCoordinates(::grpc::ServerContext* context, const ::telerobotics::protos::GetCoordinatesCatheterPathRequest* request, ::grpc::ServerWriter< ::telerobotics::protos::GetCoordinatesCatheterPathResponse>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedGetCoordinates(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::telerobotics::protos::GetCoordinatesCatheterPathRequest,::telerobotics::protos::GetCoordinatesCatheterPathResponse>* server_split_streamer) = 0;
  };
  template <class BaseClass>
  class WithSplitStreamingMethod_List : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithSplitStreamingMethod_List() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::SplitServerStreamingHandler< ::telerobotics::protos::ListCatheterPathsRequest, ::telerobotics::protos::ListCatheterPathsResponse>(std::bind(&WithSplitStreamingMethod_List<BaseClass>::StreamedList, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithSplitStreamingMethod_List() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status List(::grpc::ServerContext* context, const ::telerobotics::protos::ListCatheterPathsRequest* request, ::grpc::ServerWriter< ::telerobotics::protos::ListCatheterPathsResponse>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedList(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::telerobotics::protos::ListCatheterPathsRequest,::telerobotics::protos::ListCatheterPathsResponse>* server_split_streamer) = 0;
  };
  typedef WithSplitStreamingMethod_GetCoordinates<WithSplitStreamingMethod_List<Service > > SplitStreamedService;
  typedef WithStreamedUnaryMethod_Create<WithStreamedUnaryMethod_Get<WithSplitStreamingMethod_GetCoordinates<WithSplitStreamingMethod_List<Service > > > > StreamedService;
};

}  // namespace protos
}  // namespace telerobotics


#endif  // GRPC_catheter_5fpath_5fservice_2eproto__INCLUDED
