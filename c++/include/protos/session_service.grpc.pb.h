// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: session_service.proto
#ifndef GRPC_session_5fservice_2eproto__INCLUDED
#define GRPC_session_5fservice_2eproto__INCLUDED

#include "session_service.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace grpc {
class CompletionQueue;
class Channel;
class ServerCompletionQueue;
class ServerContext;
}  // namespace grpc

namespace telerobotics {
namespace protos {

//
// The SessionService manages a telerobotic session. In its current implementation
// it manages a single controller connecting to a single robot. In the future, a
// session may additionally include medical devices, user interfaces, and other
// items neccessary to achieve telerobotics. 
class SessionService final {
 public:
  static constexpr char const* service_full_name() {
    return "telerobotics.protos.SessionService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // Creates a session, causing each Statusing device to recieve the other
    // device's address
    virtual ::grpc::Status Create(::grpc::ClientContext* context, const ::telerobotics::protos::CreateSessionRequest& request, ::telerobotics::protos::CreateSessionResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::telerobotics::protos::CreateSessionResponse>> AsyncCreate(::grpc::ClientContext* context, const ::telerobotics::protos::CreateSessionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::telerobotics::protos::CreateSessionResponse>>(AsyncCreateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::telerobotics::protos::CreateSessionResponse>> PrepareAsyncCreate(::grpc::ClientContext* context, const ::telerobotics::protos::CreateSessionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::telerobotics::protos::CreateSessionResponse>>(PrepareAsyncCreateRaw(context, request, cq));
    }
    // Get information about a single session
    virtual ::grpc::Status Get(::grpc::ClientContext* context, const ::telerobotics::protos::GetSessionRequest& request, ::telerobotics::protos::GetSessionResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::telerobotics::protos::GetSessionResponse>> AsyncGet(::grpc::ClientContext* context, const ::telerobotics::protos::GetSessionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::telerobotics::protos::GetSessionResponse>>(AsyncGetRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::telerobotics::protos::GetSessionResponse>> PrepareAsyncGet(::grpc::ClientContext* context, const ::telerobotics::protos::GetSessionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::telerobotics::protos::GetSessionResponse>>(PrepareAsyncGetRaw(context, request, cq));
    }
    // List sessions
    std::unique_ptr< ::grpc::ClientReaderInterface< ::telerobotics::protos::ListSessionsResponse>> List(::grpc::ClientContext* context, const ::telerobotics::protos::ListSessionsRequest& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::telerobotics::protos::ListSessionsResponse>>(ListRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::telerobotics::protos::ListSessionsResponse>> AsyncList(::grpc::ClientContext* context, const ::telerobotics::protos::ListSessionsRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::telerobotics::protos::ListSessionsResponse>>(AsyncListRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::telerobotics::protos::ListSessionsResponse>> PrepareAsyncList(::grpc::ClientContext* context, const ::telerobotics::protos::ListSessionsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::telerobotics::protos::ListSessionsResponse>>(PrepareAsyncListRaw(context, request, cq));
    }
    // Deletes a session
    virtual ::grpc::Status Delete(::grpc::ClientContext* context, const ::telerobotics::protos::DeleteSessionRequest& request, ::telerobotics::protos::DeleteSessionResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::telerobotics::protos::DeleteSessionResponse>> AsyncDelete(::grpc::ClientContext* context, const ::telerobotics::protos::DeleteSessionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::telerobotics::protos::DeleteSessionResponse>>(AsyncDeleteRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::telerobotics::protos::DeleteSessionResponse>> PrepareAsyncDelete(::grpc::ClientContext* context, const ::telerobotics::protos::DeleteSessionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::telerobotics::protos::DeleteSessionResponse>>(PrepareAsyncDeleteRaw(context, request, cq));
    }
    // Connects a client waiting for a session
    std::unique_ptr< ::grpc::ClientReaderInterface< ::telerobotics::protos::WaitForSessionResponse>> WaitFor(::grpc::ClientContext* context, const ::telerobotics::protos::WaitForSessionRequest& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::telerobotics::protos::WaitForSessionResponse>>(WaitForRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::telerobotics::protos::WaitForSessionResponse>> AsyncWaitFor(::grpc::ClientContext* context, const ::telerobotics::protos::WaitForSessionRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::telerobotics::protos::WaitForSessionResponse>>(AsyncWaitForRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::telerobotics::protos::WaitForSessionResponse>> PrepareAsyncWaitFor(::grpc::ClientContext* context, const ::telerobotics::protos::WaitForSessionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::telerobotics::protos::WaitForSessionResponse>>(PrepareAsyncWaitForRaw(context, request, cq));
    }
    // ListWaiting lists waiting clients
    // TODO: Rethink design. This seems odd
    std::unique_ptr< ::grpc::ClientReaderInterface< ::telerobotics::protos::ListWaitingSessionResponse>> ListWaiting(::grpc::ClientContext* context, const ::telerobotics::protos::ListWaitingSessionRequest& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::telerobotics::protos::ListWaitingSessionResponse>>(ListWaitingRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::telerobotics::protos::ListWaitingSessionResponse>> AsyncListWaiting(::grpc::ClientContext* context, const ::telerobotics::protos::ListWaitingSessionRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::telerobotics::protos::ListWaitingSessionResponse>>(AsyncListWaitingRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::telerobotics::protos::ListWaitingSessionResponse>> PrepareAsyncListWaiting(::grpc::ClientContext* context, const ::telerobotics::protos::ListWaitingSessionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::telerobotics::protos::ListWaitingSessionResponse>>(PrepareAsyncListWaitingRaw(context, request, cq));
    }
    // Streams messages between the client and server indicating the session's status
    std::unique_ptr< ::grpc::ClientReaderInterface< ::telerobotics::protos::JoinSessionResponse>> Join(::grpc::ClientContext* context, const ::telerobotics::protos::JoinSessionRequest& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::telerobotics::protos::JoinSessionResponse>>(JoinRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::telerobotics::protos::JoinSessionResponse>> AsyncJoin(::grpc::ClientContext* context, const ::telerobotics::protos::JoinSessionRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::telerobotics::protos::JoinSessionResponse>>(AsyncJoinRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::telerobotics::protos::JoinSessionResponse>> PrepareAsyncJoin(::grpc::ClientContext* context, const ::telerobotics::protos::JoinSessionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::telerobotics::protos::JoinSessionResponse>>(PrepareAsyncJoinRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      // Creates a session, causing each Statusing device to recieve the other
      // device's address
      virtual void Create(::grpc::ClientContext* context, const ::telerobotics::protos::CreateSessionRequest* request, ::telerobotics::protos::CreateSessionResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Create(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::telerobotics::protos::CreateSessionResponse* response, std::function<void(::grpc::Status)>) = 0;
      // Get information about a single session
      virtual void Get(::grpc::ClientContext* context, const ::telerobotics::protos::GetSessionRequest* request, ::telerobotics::protos::GetSessionResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Get(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::telerobotics::protos::GetSessionResponse* response, std::function<void(::grpc::Status)>) = 0;
      // List sessions
      virtual void List(::grpc::ClientContext* context, ::telerobotics::protos::ListSessionsRequest* request, ::grpc::experimental::ClientReadReactor< ::telerobotics::protos::ListSessionsResponse>* reactor) = 0;
      // Deletes a session
      virtual void Delete(::grpc::ClientContext* context, const ::telerobotics::protos::DeleteSessionRequest* request, ::telerobotics::protos::DeleteSessionResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Delete(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::telerobotics::protos::DeleteSessionResponse* response, std::function<void(::grpc::Status)>) = 0;
      // Connects a client waiting for a session
      virtual void WaitFor(::grpc::ClientContext* context, ::telerobotics::protos::WaitForSessionRequest* request, ::grpc::experimental::ClientReadReactor< ::telerobotics::protos::WaitForSessionResponse>* reactor) = 0;
      // ListWaiting lists waiting clients
      // TODO: Rethink design. This seems odd
      virtual void ListWaiting(::grpc::ClientContext* context, ::telerobotics::protos::ListWaitingSessionRequest* request, ::grpc::experimental::ClientReadReactor< ::telerobotics::protos::ListWaitingSessionResponse>* reactor) = 0;
      // Streams messages between the client and server indicating the session's status
      virtual void Join(::grpc::ClientContext* context, ::telerobotics::protos::JoinSessionRequest* request, ::grpc::experimental::ClientReadReactor< ::telerobotics::protos::JoinSessionResponse>* reactor) = 0;
    };
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::telerobotics::protos::CreateSessionResponse>* AsyncCreateRaw(::grpc::ClientContext* context, const ::telerobotics::protos::CreateSessionRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::telerobotics::protos::CreateSessionResponse>* PrepareAsyncCreateRaw(::grpc::ClientContext* context, const ::telerobotics::protos::CreateSessionRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::telerobotics::protos::GetSessionResponse>* AsyncGetRaw(::grpc::ClientContext* context, const ::telerobotics::protos::GetSessionRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::telerobotics::protos::GetSessionResponse>* PrepareAsyncGetRaw(::grpc::ClientContext* context, const ::telerobotics::protos::GetSessionRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::telerobotics::protos::ListSessionsResponse>* ListRaw(::grpc::ClientContext* context, const ::telerobotics::protos::ListSessionsRequest& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::telerobotics::protos::ListSessionsResponse>* AsyncListRaw(::grpc::ClientContext* context, const ::telerobotics::protos::ListSessionsRequest& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::telerobotics::protos::ListSessionsResponse>* PrepareAsyncListRaw(::grpc::ClientContext* context, const ::telerobotics::protos::ListSessionsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::telerobotics::protos::DeleteSessionResponse>* AsyncDeleteRaw(::grpc::ClientContext* context, const ::telerobotics::protos::DeleteSessionRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::telerobotics::protos::DeleteSessionResponse>* PrepareAsyncDeleteRaw(::grpc::ClientContext* context, const ::telerobotics::protos::DeleteSessionRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::telerobotics::protos::WaitForSessionResponse>* WaitForRaw(::grpc::ClientContext* context, const ::telerobotics::protos::WaitForSessionRequest& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::telerobotics::protos::WaitForSessionResponse>* AsyncWaitForRaw(::grpc::ClientContext* context, const ::telerobotics::protos::WaitForSessionRequest& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::telerobotics::protos::WaitForSessionResponse>* PrepareAsyncWaitForRaw(::grpc::ClientContext* context, const ::telerobotics::protos::WaitForSessionRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::telerobotics::protos::ListWaitingSessionResponse>* ListWaitingRaw(::grpc::ClientContext* context, const ::telerobotics::protos::ListWaitingSessionRequest& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::telerobotics::protos::ListWaitingSessionResponse>* AsyncListWaitingRaw(::grpc::ClientContext* context, const ::telerobotics::protos::ListWaitingSessionRequest& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::telerobotics::protos::ListWaitingSessionResponse>* PrepareAsyncListWaitingRaw(::grpc::ClientContext* context, const ::telerobotics::protos::ListWaitingSessionRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::telerobotics::protos::JoinSessionResponse>* JoinRaw(::grpc::ClientContext* context, const ::telerobotics::protos::JoinSessionRequest& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::telerobotics::protos::JoinSessionResponse>* AsyncJoinRaw(::grpc::ClientContext* context, const ::telerobotics::protos::JoinSessionRequest& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::telerobotics::protos::JoinSessionResponse>* PrepareAsyncJoinRaw(::grpc::ClientContext* context, const ::telerobotics::protos::JoinSessionRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status Create(::grpc::ClientContext* context, const ::telerobotics::protos::CreateSessionRequest& request, ::telerobotics::protos::CreateSessionResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::telerobotics::protos::CreateSessionResponse>> AsyncCreate(::grpc::ClientContext* context, const ::telerobotics::protos::CreateSessionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::telerobotics::protos::CreateSessionResponse>>(AsyncCreateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::telerobotics::protos::CreateSessionResponse>> PrepareAsyncCreate(::grpc::ClientContext* context, const ::telerobotics::protos::CreateSessionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::telerobotics::protos::CreateSessionResponse>>(PrepareAsyncCreateRaw(context, request, cq));
    }
    ::grpc::Status Get(::grpc::ClientContext* context, const ::telerobotics::protos::GetSessionRequest& request, ::telerobotics::protos::GetSessionResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::telerobotics::protos::GetSessionResponse>> AsyncGet(::grpc::ClientContext* context, const ::telerobotics::protos::GetSessionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::telerobotics::protos::GetSessionResponse>>(AsyncGetRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::telerobotics::protos::GetSessionResponse>> PrepareAsyncGet(::grpc::ClientContext* context, const ::telerobotics::protos::GetSessionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::telerobotics::protos::GetSessionResponse>>(PrepareAsyncGetRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::telerobotics::protos::ListSessionsResponse>> List(::grpc::ClientContext* context, const ::telerobotics::protos::ListSessionsRequest& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::telerobotics::protos::ListSessionsResponse>>(ListRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::telerobotics::protos::ListSessionsResponse>> AsyncList(::grpc::ClientContext* context, const ::telerobotics::protos::ListSessionsRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::telerobotics::protos::ListSessionsResponse>>(AsyncListRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::telerobotics::protos::ListSessionsResponse>> PrepareAsyncList(::grpc::ClientContext* context, const ::telerobotics::protos::ListSessionsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::telerobotics::protos::ListSessionsResponse>>(PrepareAsyncListRaw(context, request, cq));
    }
    ::grpc::Status Delete(::grpc::ClientContext* context, const ::telerobotics::protos::DeleteSessionRequest& request, ::telerobotics::protos::DeleteSessionResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::telerobotics::protos::DeleteSessionResponse>> AsyncDelete(::grpc::ClientContext* context, const ::telerobotics::protos::DeleteSessionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::telerobotics::protos::DeleteSessionResponse>>(AsyncDeleteRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::telerobotics::protos::DeleteSessionResponse>> PrepareAsyncDelete(::grpc::ClientContext* context, const ::telerobotics::protos::DeleteSessionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::telerobotics::protos::DeleteSessionResponse>>(PrepareAsyncDeleteRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::telerobotics::protos::WaitForSessionResponse>> WaitFor(::grpc::ClientContext* context, const ::telerobotics::protos::WaitForSessionRequest& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::telerobotics::protos::WaitForSessionResponse>>(WaitForRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::telerobotics::protos::WaitForSessionResponse>> AsyncWaitFor(::grpc::ClientContext* context, const ::telerobotics::protos::WaitForSessionRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::telerobotics::protos::WaitForSessionResponse>>(AsyncWaitForRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::telerobotics::protos::WaitForSessionResponse>> PrepareAsyncWaitFor(::grpc::ClientContext* context, const ::telerobotics::protos::WaitForSessionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::telerobotics::protos::WaitForSessionResponse>>(PrepareAsyncWaitForRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::telerobotics::protos::ListWaitingSessionResponse>> ListWaiting(::grpc::ClientContext* context, const ::telerobotics::protos::ListWaitingSessionRequest& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::telerobotics::protos::ListWaitingSessionResponse>>(ListWaitingRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::telerobotics::protos::ListWaitingSessionResponse>> AsyncListWaiting(::grpc::ClientContext* context, const ::telerobotics::protos::ListWaitingSessionRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::telerobotics::protos::ListWaitingSessionResponse>>(AsyncListWaitingRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::telerobotics::protos::ListWaitingSessionResponse>> PrepareAsyncListWaiting(::grpc::ClientContext* context, const ::telerobotics::protos::ListWaitingSessionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::telerobotics::protos::ListWaitingSessionResponse>>(PrepareAsyncListWaitingRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::telerobotics::protos::JoinSessionResponse>> Join(::grpc::ClientContext* context, const ::telerobotics::protos::JoinSessionRequest& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::telerobotics::protos::JoinSessionResponse>>(JoinRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::telerobotics::protos::JoinSessionResponse>> AsyncJoin(::grpc::ClientContext* context, const ::telerobotics::protos::JoinSessionRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::telerobotics::protos::JoinSessionResponse>>(AsyncJoinRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::telerobotics::protos::JoinSessionResponse>> PrepareAsyncJoin(::grpc::ClientContext* context, const ::telerobotics::protos::JoinSessionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::telerobotics::protos::JoinSessionResponse>>(PrepareAsyncJoinRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void Create(::grpc::ClientContext* context, const ::telerobotics::protos::CreateSessionRequest* request, ::telerobotics::protos::CreateSessionResponse* response, std::function<void(::grpc::Status)>) override;
      void Create(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::telerobotics::protos::CreateSessionResponse* response, std::function<void(::grpc::Status)>) override;
      void Get(::grpc::ClientContext* context, const ::telerobotics::protos::GetSessionRequest* request, ::telerobotics::protos::GetSessionResponse* response, std::function<void(::grpc::Status)>) override;
      void Get(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::telerobotics::protos::GetSessionResponse* response, std::function<void(::grpc::Status)>) override;
      void List(::grpc::ClientContext* context, ::telerobotics::protos::ListSessionsRequest* request, ::grpc::experimental::ClientReadReactor< ::telerobotics::protos::ListSessionsResponse>* reactor) override;
      void Delete(::grpc::ClientContext* context, const ::telerobotics::protos::DeleteSessionRequest* request, ::telerobotics::protos::DeleteSessionResponse* response, std::function<void(::grpc::Status)>) override;
      void Delete(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::telerobotics::protos::DeleteSessionResponse* response, std::function<void(::grpc::Status)>) override;
      void WaitFor(::grpc::ClientContext* context, ::telerobotics::protos::WaitForSessionRequest* request, ::grpc::experimental::ClientReadReactor< ::telerobotics::protos::WaitForSessionResponse>* reactor) override;
      void ListWaiting(::grpc::ClientContext* context, ::telerobotics::protos::ListWaitingSessionRequest* request, ::grpc::experimental::ClientReadReactor< ::telerobotics::protos::ListWaitingSessionResponse>* reactor) override;
      void Join(::grpc::ClientContext* context, ::telerobotics::protos::JoinSessionRequest* request, ::grpc::experimental::ClientReadReactor< ::telerobotics::protos::JoinSessionResponse>* reactor) override;
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::telerobotics::protos::CreateSessionResponse>* AsyncCreateRaw(::grpc::ClientContext* context, const ::telerobotics::protos::CreateSessionRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::telerobotics::protos::CreateSessionResponse>* PrepareAsyncCreateRaw(::grpc::ClientContext* context, const ::telerobotics::protos::CreateSessionRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::telerobotics::protos::GetSessionResponse>* AsyncGetRaw(::grpc::ClientContext* context, const ::telerobotics::protos::GetSessionRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::telerobotics::protos::GetSessionResponse>* PrepareAsyncGetRaw(::grpc::ClientContext* context, const ::telerobotics::protos::GetSessionRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::telerobotics::protos::ListSessionsResponse>* ListRaw(::grpc::ClientContext* context, const ::telerobotics::protos::ListSessionsRequest& request) override;
    ::grpc::ClientAsyncReader< ::telerobotics::protos::ListSessionsResponse>* AsyncListRaw(::grpc::ClientContext* context, const ::telerobotics::protos::ListSessionsRequest& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::telerobotics::protos::ListSessionsResponse>* PrepareAsyncListRaw(::grpc::ClientContext* context, const ::telerobotics::protos::ListSessionsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::telerobotics::protos::DeleteSessionResponse>* AsyncDeleteRaw(::grpc::ClientContext* context, const ::telerobotics::protos::DeleteSessionRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::telerobotics::protos::DeleteSessionResponse>* PrepareAsyncDeleteRaw(::grpc::ClientContext* context, const ::telerobotics::protos::DeleteSessionRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::telerobotics::protos::WaitForSessionResponse>* WaitForRaw(::grpc::ClientContext* context, const ::telerobotics::protos::WaitForSessionRequest& request) override;
    ::grpc::ClientAsyncReader< ::telerobotics::protos::WaitForSessionResponse>* AsyncWaitForRaw(::grpc::ClientContext* context, const ::telerobotics::protos::WaitForSessionRequest& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::telerobotics::protos::WaitForSessionResponse>* PrepareAsyncWaitForRaw(::grpc::ClientContext* context, const ::telerobotics::protos::WaitForSessionRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::telerobotics::protos::ListWaitingSessionResponse>* ListWaitingRaw(::grpc::ClientContext* context, const ::telerobotics::protos::ListWaitingSessionRequest& request) override;
    ::grpc::ClientAsyncReader< ::telerobotics::protos::ListWaitingSessionResponse>* AsyncListWaitingRaw(::grpc::ClientContext* context, const ::telerobotics::protos::ListWaitingSessionRequest& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::telerobotics::protos::ListWaitingSessionResponse>* PrepareAsyncListWaitingRaw(::grpc::ClientContext* context, const ::telerobotics::protos::ListWaitingSessionRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::telerobotics::protos::JoinSessionResponse>* JoinRaw(::grpc::ClientContext* context, const ::telerobotics::protos::JoinSessionRequest& request) override;
    ::grpc::ClientAsyncReader< ::telerobotics::protos::JoinSessionResponse>* AsyncJoinRaw(::grpc::ClientContext* context, const ::telerobotics::protos::JoinSessionRequest& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::telerobotics::protos::JoinSessionResponse>* PrepareAsyncJoinRaw(::grpc::ClientContext* context, const ::telerobotics::protos::JoinSessionRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_Create_;
    const ::grpc::internal::RpcMethod rpcmethod_Get_;
    const ::grpc::internal::RpcMethod rpcmethod_List_;
    const ::grpc::internal::RpcMethod rpcmethod_Delete_;
    const ::grpc::internal::RpcMethod rpcmethod_WaitFor_;
    const ::grpc::internal::RpcMethod rpcmethod_ListWaiting_;
    const ::grpc::internal::RpcMethod rpcmethod_Join_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // Creates a session, causing each Statusing device to recieve the other
    // device's address
    virtual ::grpc::Status Create(::grpc::ServerContext* context, const ::telerobotics::protos::CreateSessionRequest* request, ::telerobotics::protos::CreateSessionResponse* response);
    // Get information about a single session
    virtual ::grpc::Status Get(::grpc::ServerContext* context, const ::telerobotics::protos::GetSessionRequest* request, ::telerobotics::protos::GetSessionResponse* response);
    // List sessions
    virtual ::grpc::Status List(::grpc::ServerContext* context, const ::telerobotics::protos::ListSessionsRequest* request, ::grpc::ServerWriter< ::telerobotics::protos::ListSessionsResponse>* writer);
    // Deletes a session
    virtual ::grpc::Status Delete(::grpc::ServerContext* context, const ::telerobotics::protos::DeleteSessionRequest* request, ::telerobotics::protos::DeleteSessionResponse* response);
    // Connects a client waiting for a session
    virtual ::grpc::Status WaitFor(::grpc::ServerContext* context, const ::telerobotics::protos::WaitForSessionRequest* request, ::grpc::ServerWriter< ::telerobotics::protos::WaitForSessionResponse>* writer);
    // ListWaiting lists waiting clients
    // TODO: Rethink design. This seems odd
    virtual ::grpc::Status ListWaiting(::grpc::ServerContext* context, const ::telerobotics::protos::ListWaitingSessionRequest* request, ::grpc::ServerWriter< ::telerobotics::protos::ListWaitingSessionResponse>* writer);
    // Streams messages between the client and server indicating the session's status
    virtual ::grpc::Status Join(::grpc::ServerContext* context, const ::telerobotics::protos::JoinSessionRequest* request, ::grpc::ServerWriter< ::telerobotics::protos::JoinSessionResponse>* writer);
  };
  template <class BaseClass>
  class WithAsyncMethod_Create : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_Create() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_Create() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Create(::grpc::ServerContext* context, const ::telerobotics::protos::CreateSessionRequest* request, ::telerobotics::protos::CreateSessionResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreate(::grpc::ServerContext* context, ::telerobotics::protos::CreateSessionRequest* request, ::grpc::ServerAsyncResponseWriter< ::telerobotics::protos::CreateSessionResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Get : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_Get() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_Get() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Get(::grpc::ServerContext* context, const ::telerobotics::protos::GetSessionRequest* request, ::telerobotics::protos::GetSessionResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGet(::grpc::ServerContext* context, ::telerobotics::protos::GetSessionRequest* request, ::grpc::ServerAsyncResponseWriter< ::telerobotics::protos::GetSessionResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_List : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_List() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_List() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status List(::grpc::ServerContext* context, const ::telerobotics::protos::ListSessionsRequest* request, ::grpc::ServerWriter< ::telerobotics::protos::ListSessionsResponse>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestList(::grpc::ServerContext* context, ::telerobotics::protos::ListSessionsRequest* request, ::grpc::ServerAsyncWriter< ::telerobotics::protos::ListSessionsResponse>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(2, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Delete : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_Delete() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_Delete() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Delete(::grpc::ServerContext* context, const ::telerobotics::protos::DeleteSessionRequest* request, ::telerobotics::protos::DeleteSessionResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDelete(::grpc::ServerContext* context, ::telerobotics::protos::DeleteSessionRequest* request, ::grpc::ServerAsyncResponseWriter< ::telerobotics::protos::DeleteSessionResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_WaitFor : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_WaitFor() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_WaitFor() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status WaitFor(::grpc::ServerContext* context, const ::telerobotics::protos::WaitForSessionRequest* request, ::grpc::ServerWriter< ::telerobotics::protos::WaitForSessionResponse>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestWaitFor(::grpc::ServerContext* context, ::telerobotics::protos::WaitForSessionRequest* request, ::grpc::ServerAsyncWriter< ::telerobotics::protos::WaitForSessionResponse>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(4, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ListWaiting : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_ListWaiting() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_ListWaiting() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListWaiting(::grpc::ServerContext* context, const ::telerobotics::protos::ListWaitingSessionRequest* request, ::grpc::ServerWriter< ::telerobotics::protos::ListWaitingSessionResponse>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListWaiting(::grpc::ServerContext* context, ::telerobotics::protos::ListWaitingSessionRequest* request, ::grpc::ServerAsyncWriter< ::telerobotics::protos::ListWaitingSessionResponse>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(5, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Join : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_Join() {
      ::grpc::Service::MarkMethodAsync(6);
    }
    ~WithAsyncMethod_Join() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Join(::grpc::ServerContext* context, const ::telerobotics::protos::JoinSessionRequest* request, ::grpc::ServerWriter< ::telerobotics::protos::JoinSessionResponse>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestJoin(::grpc::ServerContext* context, ::telerobotics::protos::JoinSessionRequest* request, ::grpc::ServerAsyncWriter< ::telerobotics::protos::JoinSessionResponse>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(6, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_Create<WithAsyncMethod_Get<WithAsyncMethod_List<WithAsyncMethod_Delete<WithAsyncMethod_WaitFor<WithAsyncMethod_ListWaiting<WithAsyncMethod_Join<Service > > > > > > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_Create : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_Create() {
      ::grpc::Service::experimental().MarkMethodCallback(0,
        new ::grpc::internal::CallbackUnaryHandler< ::telerobotics::protos::CreateSessionRequest, ::telerobotics::protos::CreateSessionResponse>(
          [this](::grpc::ServerContext* context,
                 const ::telerobotics::protos::CreateSessionRequest* request,
                 ::telerobotics::protos::CreateSessionResponse* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->Create(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithCallbackMethod_Create() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Create(::grpc::ServerContext* context, const ::telerobotics::protos::CreateSessionRequest* request, ::telerobotics::protos::CreateSessionResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void Create(::grpc::ServerContext* context, const ::telerobotics::protos::CreateSessionRequest* request, ::telerobotics::protos::CreateSessionResponse* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_Get : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_Get() {
      ::grpc::Service::experimental().MarkMethodCallback(1,
        new ::grpc::internal::CallbackUnaryHandler< ::telerobotics::protos::GetSessionRequest, ::telerobotics::protos::GetSessionResponse>(
          [this](::grpc::ServerContext* context,
                 const ::telerobotics::protos::GetSessionRequest* request,
                 ::telerobotics::protos::GetSessionResponse* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->Get(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithCallbackMethod_Get() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Get(::grpc::ServerContext* context, const ::telerobotics::protos::GetSessionRequest* request, ::telerobotics::protos::GetSessionResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void Get(::grpc::ServerContext* context, const ::telerobotics::protos::GetSessionRequest* request, ::telerobotics::protos::GetSessionResponse* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_List : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_List() {
      ::grpc::Service::experimental().MarkMethodCallback(2,
        new ::grpc::internal::CallbackServerStreamingHandler< ::telerobotics::protos::ListSessionsRequest, ::telerobotics::protos::ListSessionsResponse>(
          [this] { return this->List(); }));
    }
    ~ExperimentalWithCallbackMethod_List() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status List(::grpc::ServerContext* context, const ::telerobotics::protos::ListSessionsRequest* request, ::grpc::ServerWriter< ::telerobotics::protos::ListSessionsResponse>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::experimental::ServerWriteReactor< ::telerobotics::protos::ListSessionsRequest, ::telerobotics::protos::ListSessionsResponse>* List() {
      return new ::grpc::internal::UnimplementedWriteReactor<
        ::telerobotics::protos::ListSessionsRequest, ::telerobotics::protos::ListSessionsResponse>;}
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_Delete : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_Delete() {
      ::grpc::Service::experimental().MarkMethodCallback(3,
        new ::grpc::internal::CallbackUnaryHandler< ::telerobotics::protos::DeleteSessionRequest, ::telerobotics::protos::DeleteSessionResponse>(
          [this](::grpc::ServerContext* context,
                 const ::telerobotics::protos::DeleteSessionRequest* request,
                 ::telerobotics::protos::DeleteSessionResponse* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->Delete(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithCallbackMethod_Delete() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Delete(::grpc::ServerContext* context, const ::telerobotics::protos::DeleteSessionRequest* request, ::telerobotics::protos::DeleteSessionResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void Delete(::grpc::ServerContext* context, const ::telerobotics::protos::DeleteSessionRequest* request, ::telerobotics::protos::DeleteSessionResponse* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_WaitFor : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_WaitFor() {
      ::grpc::Service::experimental().MarkMethodCallback(4,
        new ::grpc::internal::CallbackServerStreamingHandler< ::telerobotics::protos::WaitForSessionRequest, ::telerobotics::protos::WaitForSessionResponse>(
          [this] { return this->WaitFor(); }));
    }
    ~ExperimentalWithCallbackMethod_WaitFor() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status WaitFor(::grpc::ServerContext* context, const ::telerobotics::protos::WaitForSessionRequest* request, ::grpc::ServerWriter< ::telerobotics::protos::WaitForSessionResponse>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::experimental::ServerWriteReactor< ::telerobotics::protos::WaitForSessionRequest, ::telerobotics::protos::WaitForSessionResponse>* WaitFor() {
      return new ::grpc::internal::UnimplementedWriteReactor<
        ::telerobotics::protos::WaitForSessionRequest, ::telerobotics::protos::WaitForSessionResponse>;}
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_ListWaiting : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_ListWaiting() {
      ::grpc::Service::experimental().MarkMethodCallback(5,
        new ::grpc::internal::CallbackServerStreamingHandler< ::telerobotics::protos::ListWaitingSessionRequest, ::telerobotics::protos::ListWaitingSessionResponse>(
          [this] { return this->ListWaiting(); }));
    }
    ~ExperimentalWithCallbackMethod_ListWaiting() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListWaiting(::grpc::ServerContext* context, const ::telerobotics::protos::ListWaitingSessionRequest* request, ::grpc::ServerWriter< ::telerobotics::protos::ListWaitingSessionResponse>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::experimental::ServerWriteReactor< ::telerobotics::protos::ListWaitingSessionRequest, ::telerobotics::protos::ListWaitingSessionResponse>* ListWaiting() {
      return new ::grpc::internal::UnimplementedWriteReactor<
        ::telerobotics::protos::ListWaitingSessionRequest, ::telerobotics::protos::ListWaitingSessionResponse>;}
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_Join : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_Join() {
      ::grpc::Service::experimental().MarkMethodCallback(6,
        new ::grpc::internal::CallbackServerStreamingHandler< ::telerobotics::protos::JoinSessionRequest, ::telerobotics::protos::JoinSessionResponse>(
          [this] { return this->Join(); }));
    }
    ~ExperimentalWithCallbackMethod_Join() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Join(::grpc::ServerContext* context, const ::telerobotics::protos::JoinSessionRequest* request, ::grpc::ServerWriter< ::telerobotics::protos::JoinSessionResponse>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::experimental::ServerWriteReactor< ::telerobotics::protos::JoinSessionRequest, ::telerobotics::protos::JoinSessionResponse>* Join() {
      return new ::grpc::internal::UnimplementedWriteReactor<
        ::telerobotics::protos::JoinSessionRequest, ::telerobotics::protos::JoinSessionResponse>;}
  };
  typedef ExperimentalWithCallbackMethod_Create<ExperimentalWithCallbackMethod_Get<ExperimentalWithCallbackMethod_List<ExperimentalWithCallbackMethod_Delete<ExperimentalWithCallbackMethod_WaitFor<ExperimentalWithCallbackMethod_ListWaiting<ExperimentalWithCallbackMethod_Join<Service > > > > > > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_Create : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_Create() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_Create() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Create(::grpc::ServerContext* context, const ::telerobotics::protos::CreateSessionRequest* request, ::telerobotics::protos::CreateSessionResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Get : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_Get() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_Get() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Get(::grpc::ServerContext* context, const ::telerobotics::protos::GetSessionRequest* request, ::telerobotics::protos::GetSessionResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_List : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_List() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_List() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status List(::grpc::ServerContext* context, const ::telerobotics::protos::ListSessionsRequest* request, ::grpc::ServerWriter< ::telerobotics::protos::ListSessionsResponse>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Delete : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_Delete() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_Delete() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Delete(::grpc::ServerContext* context, const ::telerobotics::protos::DeleteSessionRequest* request, ::telerobotics::protos::DeleteSessionResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_WaitFor : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_WaitFor() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_WaitFor() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status WaitFor(::grpc::ServerContext* context, const ::telerobotics::protos::WaitForSessionRequest* request, ::grpc::ServerWriter< ::telerobotics::protos::WaitForSessionResponse>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ListWaiting : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_ListWaiting() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_ListWaiting() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListWaiting(::grpc::ServerContext* context, const ::telerobotics::protos::ListWaitingSessionRequest* request, ::grpc::ServerWriter< ::telerobotics::protos::ListWaitingSessionResponse>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Join : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_Join() {
      ::grpc::Service::MarkMethodGeneric(6);
    }
    ~WithGenericMethod_Join() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Join(::grpc::ServerContext* context, const ::telerobotics::protos::JoinSessionRequest* request, ::grpc::ServerWriter< ::telerobotics::protos::JoinSessionResponse>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_Create : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_Create() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_Create() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Create(::grpc::ServerContext* context, const ::telerobotics::protos::CreateSessionRequest* request, ::telerobotics::protos::CreateSessionResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreate(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Get : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_Get() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_Get() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Get(::grpc::ServerContext* context, const ::telerobotics::protos::GetSessionRequest* request, ::telerobotics::protos::GetSessionResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGet(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_List : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_List() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_List() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status List(::grpc::ServerContext* context, const ::telerobotics::protos::ListSessionsRequest* request, ::grpc::ServerWriter< ::telerobotics::protos::ListSessionsResponse>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestList(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(2, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Delete : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_Delete() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_Delete() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Delete(::grpc::ServerContext* context, const ::telerobotics::protos::DeleteSessionRequest* request, ::telerobotics::protos::DeleteSessionResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDelete(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_WaitFor : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_WaitFor() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_WaitFor() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status WaitFor(::grpc::ServerContext* context, const ::telerobotics::protos::WaitForSessionRequest* request, ::grpc::ServerWriter< ::telerobotics::protos::WaitForSessionResponse>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestWaitFor(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(4, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ListWaiting : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_ListWaiting() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_ListWaiting() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListWaiting(::grpc::ServerContext* context, const ::telerobotics::protos::ListWaitingSessionRequest* request, ::grpc::ServerWriter< ::telerobotics::protos::ListWaitingSessionResponse>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListWaiting(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(5, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Join : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_Join() {
      ::grpc::Service::MarkMethodRaw(6);
    }
    ~WithRawMethod_Join() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Join(::grpc::ServerContext* context, const ::telerobotics::protos::JoinSessionRequest* request, ::grpc::ServerWriter< ::telerobotics::protos::JoinSessionResponse>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestJoin(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(6, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_Create : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_Create() {
      ::grpc::Service::experimental().MarkMethodRawCallback(0,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->Create(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_Create() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Create(::grpc::ServerContext* context, const ::telerobotics::protos::CreateSessionRequest* request, ::telerobotics::protos::CreateSessionResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void Create(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_Get : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_Get() {
      ::grpc::Service::experimental().MarkMethodRawCallback(1,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->Get(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_Get() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Get(::grpc::ServerContext* context, const ::telerobotics::protos::GetSessionRequest* request, ::telerobotics::protos::GetSessionResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void Get(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_List : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_List() {
      ::grpc::Service::experimental().MarkMethodRawCallback(2,
        new ::grpc::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this] { return this->List(); }));
    }
    ~ExperimentalWithRawCallbackMethod_List() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status List(::grpc::ServerContext* context, const ::telerobotics::protos::ListSessionsRequest* request, ::grpc::ServerWriter< ::telerobotics::protos::ListSessionsResponse>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::experimental::ServerWriteReactor< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* List() {
      return new ::grpc::internal::UnimplementedWriteReactor<
        ::grpc::ByteBuffer, ::grpc::ByteBuffer>;}
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_Delete : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_Delete() {
      ::grpc::Service::experimental().MarkMethodRawCallback(3,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->Delete(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_Delete() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Delete(::grpc::ServerContext* context, const ::telerobotics::protos::DeleteSessionRequest* request, ::telerobotics::protos::DeleteSessionResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void Delete(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_WaitFor : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_WaitFor() {
      ::grpc::Service::experimental().MarkMethodRawCallback(4,
        new ::grpc::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this] { return this->WaitFor(); }));
    }
    ~ExperimentalWithRawCallbackMethod_WaitFor() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status WaitFor(::grpc::ServerContext* context, const ::telerobotics::protos::WaitForSessionRequest* request, ::grpc::ServerWriter< ::telerobotics::protos::WaitForSessionResponse>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::experimental::ServerWriteReactor< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* WaitFor() {
      return new ::grpc::internal::UnimplementedWriteReactor<
        ::grpc::ByteBuffer, ::grpc::ByteBuffer>;}
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_ListWaiting : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_ListWaiting() {
      ::grpc::Service::experimental().MarkMethodRawCallback(5,
        new ::grpc::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this] { return this->ListWaiting(); }));
    }
    ~ExperimentalWithRawCallbackMethod_ListWaiting() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListWaiting(::grpc::ServerContext* context, const ::telerobotics::protos::ListWaitingSessionRequest* request, ::grpc::ServerWriter< ::telerobotics::protos::ListWaitingSessionResponse>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::experimental::ServerWriteReactor< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* ListWaiting() {
      return new ::grpc::internal::UnimplementedWriteReactor<
        ::grpc::ByteBuffer, ::grpc::ByteBuffer>;}
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_Join : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_Join() {
      ::grpc::Service::experimental().MarkMethodRawCallback(6,
        new ::grpc::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this] { return this->Join(); }));
    }
    ~ExperimentalWithRawCallbackMethod_Join() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Join(::grpc::ServerContext* context, const ::telerobotics::protos::JoinSessionRequest* request, ::grpc::ServerWriter< ::telerobotics::protos::JoinSessionResponse>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::experimental::ServerWriteReactor< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* Join() {
      return new ::grpc::internal::UnimplementedWriteReactor<
        ::grpc::ByteBuffer, ::grpc::ByteBuffer>;}
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Create : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_Create() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler< ::telerobotics::protos::CreateSessionRequest, ::telerobotics::protos::CreateSessionResponse>(std::bind(&WithStreamedUnaryMethod_Create<BaseClass>::StreamedCreate, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_Create() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Create(::grpc::ServerContext* context, const ::telerobotics::protos::CreateSessionRequest* request, ::telerobotics::protos::CreateSessionResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCreate(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::telerobotics::protos::CreateSessionRequest,::telerobotics::protos::CreateSessionResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Get : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_Get() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler< ::telerobotics::protos::GetSessionRequest, ::telerobotics::protos::GetSessionResponse>(std::bind(&WithStreamedUnaryMethod_Get<BaseClass>::StreamedGet, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_Get() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Get(::grpc::ServerContext* context, const ::telerobotics::protos::GetSessionRequest* request, ::telerobotics::protos::GetSessionResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGet(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::telerobotics::protos::GetSessionRequest,::telerobotics::protos::GetSessionResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Delete : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_Delete() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler< ::telerobotics::protos::DeleteSessionRequest, ::telerobotics::protos::DeleteSessionResponse>(std::bind(&WithStreamedUnaryMethod_Delete<BaseClass>::StreamedDelete, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_Delete() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Delete(::grpc::ServerContext* context, const ::telerobotics::protos::DeleteSessionRequest* request, ::telerobotics::protos::DeleteSessionResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDelete(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::telerobotics::protos::DeleteSessionRequest,::telerobotics::protos::DeleteSessionResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_Create<WithStreamedUnaryMethod_Get<WithStreamedUnaryMethod_Delete<Service > > > StreamedUnaryService;
  template <class BaseClass>
  class WithSplitStreamingMethod_List : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithSplitStreamingMethod_List() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::SplitServerStreamingHandler< ::telerobotics::protos::ListSessionsRequest, ::telerobotics::protos::ListSessionsResponse>(std::bind(&WithSplitStreamingMethod_List<BaseClass>::StreamedList, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithSplitStreamingMethod_List() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status List(::grpc::ServerContext* context, const ::telerobotics::protos::ListSessionsRequest* request, ::grpc::ServerWriter< ::telerobotics::protos::ListSessionsResponse>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedList(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::telerobotics::protos::ListSessionsRequest,::telerobotics::protos::ListSessionsResponse>* server_split_streamer) = 0;
  };
  template <class BaseClass>
  class WithSplitStreamingMethod_WaitFor : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithSplitStreamingMethod_WaitFor() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::SplitServerStreamingHandler< ::telerobotics::protos::WaitForSessionRequest, ::telerobotics::protos::WaitForSessionResponse>(std::bind(&WithSplitStreamingMethod_WaitFor<BaseClass>::StreamedWaitFor, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithSplitStreamingMethod_WaitFor() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status WaitFor(::grpc::ServerContext* context, const ::telerobotics::protos::WaitForSessionRequest* request, ::grpc::ServerWriter< ::telerobotics::protos::WaitForSessionResponse>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedWaitFor(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::telerobotics::protos::WaitForSessionRequest,::telerobotics::protos::WaitForSessionResponse>* server_split_streamer) = 0;
  };
  template <class BaseClass>
  class WithSplitStreamingMethod_ListWaiting : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithSplitStreamingMethod_ListWaiting() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::SplitServerStreamingHandler< ::telerobotics::protos::ListWaitingSessionRequest, ::telerobotics::protos::ListWaitingSessionResponse>(std::bind(&WithSplitStreamingMethod_ListWaiting<BaseClass>::StreamedListWaiting, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithSplitStreamingMethod_ListWaiting() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ListWaiting(::grpc::ServerContext* context, const ::telerobotics::protos::ListWaitingSessionRequest* request, ::grpc::ServerWriter< ::telerobotics::protos::ListWaitingSessionResponse>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedListWaiting(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::telerobotics::protos::ListWaitingSessionRequest,::telerobotics::protos::ListWaitingSessionResponse>* server_split_streamer) = 0;
  };
  template <class BaseClass>
  class WithSplitStreamingMethod_Join : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithSplitStreamingMethod_Join() {
      ::grpc::Service::MarkMethodStreamed(6,
        new ::grpc::internal::SplitServerStreamingHandler< ::telerobotics::protos::JoinSessionRequest, ::telerobotics::protos::JoinSessionResponse>(std::bind(&WithSplitStreamingMethod_Join<BaseClass>::StreamedJoin, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithSplitStreamingMethod_Join() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Join(::grpc::ServerContext* context, const ::telerobotics::protos::JoinSessionRequest* request, ::grpc::ServerWriter< ::telerobotics::protos::JoinSessionResponse>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedJoin(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::telerobotics::protos::JoinSessionRequest,::telerobotics::protos::JoinSessionResponse>* server_split_streamer) = 0;
  };
  typedef WithSplitStreamingMethod_List<WithSplitStreamingMethod_WaitFor<WithSplitStreamingMethod_ListWaiting<WithSplitStreamingMethod_Join<Service > > > > SplitStreamedService;
  typedef WithStreamedUnaryMethod_Create<WithStreamedUnaryMethod_Get<WithSplitStreamingMethod_List<WithStreamedUnaryMethod_Delete<WithSplitStreamingMethod_WaitFor<WithSplitStreamingMethod_ListWaiting<WithSplitStreamingMethod_Join<Service > > > > > > > StreamedService;
};

}  // namespace protos
}  // namespace telerobotics


#endif  // GRPC_session_5fservice_2eproto__INCLUDED
