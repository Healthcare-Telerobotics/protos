// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: catheter_path_service.proto

#ifndef PROTOBUF_INCLUDED_catheter_5fpath_5fservice_2eproto
#define PROTOBUF_INCLUDED_catheter_5fpath_5fservice_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3007000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3007000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "common.pb.h"
#include <google/protobuf/timestamp.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_catheter_5fpath_5fservice_2eproto

// Internal implementation detail -- do not use these members.
struct TableStruct_catheter_5fpath_5fservice_2eproto {
  static const ::google::protobuf::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::ParseTable schema[9]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors_catheter_5fpath_5fservice_2eproto();
namespace github {
namespace com {
namespace pyrus {
namespace platform {
namespace protos {
class CatheterPath;
class CatheterPathDefaultTypeInternal;
extern CatheterPathDefaultTypeInternal _CatheterPath_default_instance_;
class CreateCatheterPathRequest;
class CreateCatheterPathRequestDefaultTypeInternal;
extern CreateCatheterPathRequestDefaultTypeInternal _CreateCatheterPathRequest_default_instance_;
class CreateCatheterPathResponse;
class CreateCatheterPathResponseDefaultTypeInternal;
extern CreateCatheterPathResponseDefaultTypeInternal _CreateCatheterPathResponse_default_instance_;
class GetCatheterPathRequest;
class GetCatheterPathRequestDefaultTypeInternal;
extern GetCatheterPathRequestDefaultTypeInternal _GetCatheterPathRequest_default_instance_;
class GetCatheterPathResponse;
class GetCatheterPathResponseDefaultTypeInternal;
extern GetCatheterPathResponseDefaultTypeInternal _GetCatheterPathResponse_default_instance_;
class GetCoordinatesCatheterPathRequest;
class GetCoordinatesCatheterPathRequestDefaultTypeInternal;
extern GetCoordinatesCatheterPathRequestDefaultTypeInternal _GetCoordinatesCatheterPathRequest_default_instance_;
class GetCoordinatesCatheterPathResponse;
class GetCoordinatesCatheterPathResponseDefaultTypeInternal;
extern GetCoordinatesCatheterPathResponseDefaultTypeInternal _GetCoordinatesCatheterPathResponse_default_instance_;
class ListCatheterPathsRequest;
class ListCatheterPathsRequestDefaultTypeInternal;
extern ListCatheterPathsRequestDefaultTypeInternal _ListCatheterPathsRequest_default_instance_;
class ListCatheterPathsResponse;
class ListCatheterPathsResponseDefaultTypeInternal;
extern ListCatheterPathsResponseDefaultTypeInternal _ListCatheterPathsResponse_default_instance_;
}  // namespace protos
}  // namespace platform
}  // namespace pyrus
}  // namespace com
}  // namespace github
namespace google {
namespace protobuf {
template<> ::github::com::pyrus::platform::protos::CatheterPath* Arena::CreateMaybeMessage<::github::com::pyrus::platform::protos::CatheterPath>(Arena*);
template<> ::github::com::pyrus::platform::protos::CreateCatheterPathRequest* Arena::CreateMaybeMessage<::github::com::pyrus::platform::protos::CreateCatheterPathRequest>(Arena*);
template<> ::github::com::pyrus::platform::protos::CreateCatheterPathResponse* Arena::CreateMaybeMessage<::github::com::pyrus::platform::protos::CreateCatheterPathResponse>(Arena*);
template<> ::github::com::pyrus::platform::protos::GetCatheterPathRequest* Arena::CreateMaybeMessage<::github::com::pyrus::platform::protos::GetCatheterPathRequest>(Arena*);
template<> ::github::com::pyrus::platform::protos::GetCatheterPathResponse* Arena::CreateMaybeMessage<::github::com::pyrus::platform::protos::GetCatheterPathResponse>(Arena*);
template<> ::github::com::pyrus::platform::protos::GetCoordinatesCatheterPathRequest* Arena::CreateMaybeMessage<::github::com::pyrus::platform::protos::GetCoordinatesCatheterPathRequest>(Arena*);
template<> ::github::com::pyrus::platform::protos::GetCoordinatesCatheterPathResponse* Arena::CreateMaybeMessage<::github::com::pyrus::platform::protos::GetCoordinatesCatheterPathResponse>(Arena*);
template<> ::github::com::pyrus::platform::protos::ListCatheterPathsRequest* Arena::CreateMaybeMessage<::github::com::pyrus::platform::protos::ListCatheterPathsRequest>(Arena*);
template<> ::github::com::pyrus::platform::protos::ListCatheterPathsResponse* Arena::CreateMaybeMessage<::github::com::pyrus::platform::protos::ListCatheterPathsResponse>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace github {
namespace com {
namespace pyrus {
namespace platform {
namespace protos {

// ===================================================================

class CreateCatheterPathRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:github.com.pyrus.platform.protos.CreateCatheterPathRequest) */ {
 public:
  CreateCatheterPathRequest();
  virtual ~CreateCatheterPathRequest();

  CreateCatheterPathRequest(const CreateCatheterPathRequest& from);

  inline CreateCatheterPathRequest& operator=(const CreateCatheterPathRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CreateCatheterPathRequest(CreateCatheterPathRequest&& from) noexcept
    : CreateCatheterPathRequest() {
    *this = ::std::move(from);
  }

  inline CreateCatheterPathRequest& operator=(CreateCatheterPathRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CreateCatheterPathRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CreateCatheterPathRequest* internal_default_instance() {
    return reinterpret_cast<const CreateCatheterPathRequest*>(
               &_CreateCatheterPathRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(CreateCatheterPathRequest* other);
  friend void swap(CreateCatheterPathRequest& a, CreateCatheterPathRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CreateCatheterPathRequest* New() const final {
    return CreateMaybeMessage<CreateCatheterPathRequest>(nullptr);
  }

  CreateCatheterPathRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CreateCatheterPathRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CreateCatheterPathRequest& from);
  void MergeFrom(const CreateCatheterPathRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateCatheterPathRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .github.com.pyrus.platform.protos.CatheterPath path = 1;
  bool has_path() const;
  void clear_path();
  static const int kPathFieldNumber = 1;
  const ::github::com::pyrus::platform::protos::CatheterPath& path() const;
  ::github::com::pyrus::platform::protos::CatheterPath* release_path();
  ::github::com::pyrus::platform::protos::CatheterPath* mutable_path();
  void set_allocated_path(::github::com::pyrus::platform::protos::CatheterPath* path);

  // @@protoc_insertion_point(class_scope:github.com.pyrus.platform.protos.CreateCatheterPathRequest)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::github::com::pyrus::platform::protos::CatheterPath* path_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_catheter_5fpath_5fservice_2eproto;
};
// -------------------------------------------------------------------

class CreateCatheterPathResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:github.com.pyrus.platform.protos.CreateCatheterPathResponse) */ {
 public:
  CreateCatheterPathResponse();
  virtual ~CreateCatheterPathResponse();

  CreateCatheterPathResponse(const CreateCatheterPathResponse& from);

  inline CreateCatheterPathResponse& operator=(const CreateCatheterPathResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CreateCatheterPathResponse(CreateCatheterPathResponse&& from) noexcept
    : CreateCatheterPathResponse() {
    *this = ::std::move(from);
  }

  inline CreateCatheterPathResponse& operator=(CreateCatheterPathResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CreateCatheterPathResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CreateCatheterPathResponse* internal_default_instance() {
    return reinterpret_cast<const CreateCatheterPathResponse*>(
               &_CreateCatheterPathResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(CreateCatheterPathResponse* other);
  friend void swap(CreateCatheterPathResponse& a, CreateCatheterPathResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CreateCatheterPathResponse* New() const final {
    return CreateMaybeMessage<CreateCatheterPathResponse>(nullptr);
  }

  CreateCatheterPathResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CreateCatheterPathResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CreateCatheterPathResponse& from);
  void MergeFrom(const CreateCatheterPathResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateCatheterPathResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint64 id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::uint64 id() const;
  void set_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:github.com.pyrus.platform.protos.CreateCatheterPathResponse)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint64 id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_catheter_5fpath_5fservice_2eproto;
};
// -------------------------------------------------------------------

class GetCatheterPathRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:github.com.pyrus.platform.protos.GetCatheterPathRequest) */ {
 public:
  GetCatheterPathRequest();
  virtual ~GetCatheterPathRequest();

  GetCatheterPathRequest(const GetCatheterPathRequest& from);

  inline GetCatheterPathRequest& operator=(const GetCatheterPathRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetCatheterPathRequest(GetCatheterPathRequest&& from) noexcept
    : GetCatheterPathRequest() {
    *this = ::std::move(from);
  }

  inline GetCatheterPathRequest& operator=(GetCatheterPathRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const GetCatheterPathRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetCatheterPathRequest* internal_default_instance() {
    return reinterpret_cast<const GetCatheterPathRequest*>(
               &_GetCatheterPathRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(GetCatheterPathRequest* other);
  friend void swap(GetCatheterPathRequest& a, GetCatheterPathRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetCatheterPathRequest* New() const final {
    return CreateMaybeMessage<GetCatheterPathRequest>(nullptr);
  }

  GetCatheterPathRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GetCatheterPathRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GetCatheterPathRequest& from);
  void MergeFrom(const GetCatheterPathRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetCatheterPathRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint64 id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::uint64 id() const;
  void set_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:github.com.pyrus.platform.protos.GetCatheterPathRequest)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint64 id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_catheter_5fpath_5fservice_2eproto;
};
// -------------------------------------------------------------------

class GetCatheterPathResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:github.com.pyrus.platform.protos.GetCatheterPathResponse) */ {
 public:
  GetCatheterPathResponse();
  virtual ~GetCatheterPathResponse();

  GetCatheterPathResponse(const GetCatheterPathResponse& from);

  inline GetCatheterPathResponse& operator=(const GetCatheterPathResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetCatheterPathResponse(GetCatheterPathResponse&& from) noexcept
    : GetCatheterPathResponse() {
    *this = ::std::move(from);
  }

  inline GetCatheterPathResponse& operator=(GetCatheterPathResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const GetCatheterPathResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetCatheterPathResponse* internal_default_instance() {
    return reinterpret_cast<const GetCatheterPathResponse*>(
               &_GetCatheterPathResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(GetCatheterPathResponse* other);
  friend void swap(GetCatheterPathResponse& a, GetCatheterPathResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetCatheterPathResponse* New() const final {
    return CreateMaybeMessage<GetCatheterPathResponse>(nullptr);
  }

  GetCatheterPathResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GetCatheterPathResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GetCatheterPathResponse& from);
  void MergeFrom(const GetCatheterPathResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetCatheterPathResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .github.com.pyrus.platform.protos.CatheterPath path = 1;
  bool has_path() const;
  void clear_path();
  static const int kPathFieldNumber = 1;
  const ::github::com::pyrus::platform::protos::CatheterPath& path() const;
  ::github::com::pyrus::platform::protos::CatheterPath* release_path();
  ::github::com::pyrus::platform::protos::CatheterPath* mutable_path();
  void set_allocated_path(::github::com::pyrus::platform::protos::CatheterPath* path);

  // @@protoc_insertion_point(class_scope:github.com.pyrus.platform.protos.GetCatheterPathResponse)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::github::com::pyrus::platform::protos::CatheterPath* path_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_catheter_5fpath_5fservice_2eproto;
};
// -------------------------------------------------------------------

class GetCoordinatesCatheterPathRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:github.com.pyrus.platform.protos.GetCoordinatesCatheterPathRequest) */ {
 public:
  GetCoordinatesCatheterPathRequest();
  virtual ~GetCoordinatesCatheterPathRequest();

  GetCoordinatesCatheterPathRequest(const GetCoordinatesCatheterPathRequest& from);

  inline GetCoordinatesCatheterPathRequest& operator=(const GetCoordinatesCatheterPathRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetCoordinatesCatheterPathRequest(GetCoordinatesCatheterPathRequest&& from) noexcept
    : GetCoordinatesCatheterPathRequest() {
    *this = ::std::move(from);
  }

  inline GetCoordinatesCatheterPathRequest& operator=(GetCoordinatesCatheterPathRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const GetCoordinatesCatheterPathRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetCoordinatesCatheterPathRequest* internal_default_instance() {
    return reinterpret_cast<const GetCoordinatesCatheterPathRequest*>(
               &_GetCoordinatesCatheterPathRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(GetCoordinatesCatheterPathRequest* other);
  friend void swap(GetCoordinatesCatheterPathRequest& a, GetCoordinatesCatheterPathRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetCoordinatesCatheterPathRequest* New() const final {
    return CreateMaybeMessage<GetCoordinatesCatheterPathRequest>(nullptr);
  }

  GetCoordinatesCatheterPathRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GetCoordinatesCatheterPathRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GetCoordinatesCatheterPathRequest& from);
  void MergeFrom(const GetCoordinatesCatheterPathRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetCoordinatesCatheterPathRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint64 id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::uint64 id() const;
  void set_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:github.com.pyrus.platform.protos.GetCoordinatesCatheterPathRequest)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint64 id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_catheter_5fpath_5fservice_2eproto;
};
// -------------------------------------------------------------------

class GetCoordinatesCatheterPathResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:github.com.pyrus.platform.protos.GetCoordinatesCatheterPathResponse) */ {
 public:
  GetCoordinatesCatheterPathResponse();
  virtual ~GetCoordinatesCatheterPathResponse();

  GetCoordinatesCatheterPathResponse(const GetCoordinatesCatheterPathResponse& from);

  inline GetCoordinatesCatheterPathResponse& operator=(const GetCoordinatesCatheterPathResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetCoordinatesCatheterPathResponse(GetCoordinatesCatheterPathResponse&& from) noexcept
    : GetCoordinatesCatheterPathResponse() {
    *this = ::std::move(from);
  }

  inline GetCoordinatesCatheterPathResponse& operator=(GetCoordinatesCatheterPathResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const GetCoordinatesCatheterPathResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetCoordinatesCatheterPathResponse* internal_default_instance() {
    return reinterpret_cast<const GetCoordinatesCatheterPathResponse*>(
               &_GetCoordinatesCatheterPathResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(GetCoordinatesCatheterPathResponse* other);
  friend void swap(GetCoordinatesCatheterPathResponse& a, GetCoordinatesCatheterPathResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetCoordinatesCatheterPathResponse* New() const final {
    return CreateMaybeMessage<GetCoordinatesCatheterPathResponse>(nullptr);
  }

  GetCoordinatesCatheterPathResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GetCoordinatesCatheterPathResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GetCoordinatesCatheterPathResponse& from);
  void MergeFrom(const GetCoordinatesCatheterPathResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetCoordinatesCatheterPathResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .github.com.pyrus.platform.protos.CatheterCoordinates coordinate = 1;
  bool has_coordinate() const;
  void clear_coordinate();
  static const int kCoordinateFieldNumber = 1;
  const ::github::com::pyrus::platform::protos::CatheterCoordinates& coordinate() const;
  ::github::com::pyrus::platform::protos::CatheterCoordinates* release_coordinate();
  ::github::com::pyrus::platform::protos::CatheterCoordinates* mutable_coordinate();
  void set_allocated_coordinate(::github::com::pyrus::platform::protos::CatheterCoordinates* coordinate);

  // @@protoc_insertion_point(class_scope:github.com.pyrus.platform.protos.GetCoordinatesCatheterPathResponse)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::github::com::pyrus::platform::protos::CatheterCoordinates* coordinate_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_catheter_5fpath_5fservice_2eproto;
};
// -------------------------------------------------------------------

class ListCatheterPathsRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:github.com.pyrus.platform.protos.ListCatheterPathsRequest) */ {
 public:
  ListCatheterPathsRequest();
  virtual ~ListCatheterPathsRequest();

  ListCatheterPathsRequest(const ListCatheterPathsRequest& from);

  inline ListCatheterPathsRequest& operator=(const ListCatheterPathsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ListCatheterPathsRequest(ListCatheterPathsRequest&& from) noexcept
    : ListCatheterPathsRequest() {
    *this = ::std::move(from);
  }

  inline ListCatheterPathsRequest& operator=(ListCatheterPathsRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const ListCatheterPathsRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ListCatheterPathsRequest* internal_default_instance() {
    return reinterpret_cast<const ListCatheterPathsRequest*>(
               &_ListCatheterPathsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(ListCatheterPathsRequest* other);
  friend void swap(ListCatheterPathsRequest& a, ListCatheterPathsRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ListCatheterPathsRequest* New() const final {
    return CreateMaybeMessage<ListCatheterPathsRequest>(nullptr);
  }

  ListCatheterPathsRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ListCatheterPathsRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ListCatheterPathsRequest& from);
  void MergeFrom(const ListCatheterPathsRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListCatheterPathsRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:github.com.pyrus.platform.protos.ListCatheterPathsRequest)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_catheter_5fpath_5fservice_2eproto;
};
// -------------------------------------------------------------------

class ListCatheterPathsResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:github.com.pyrus.platform.protos.ListCatheterPathsResponse) */ {
 public:
  ListCatheterPathsResponse();
  virtual ~ListCatheterPathsResponse();

  ListCatheterPathsResponse(const ListCatheterPathsResponse& from);

  inline ListCatheterPathsResponse& operator=(const ListCatheterPathsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ListCatheterPathsResponse(ListCatheterPathsResponse&& from) noexcept
    : ListCatheterPathsResponse() {
    *this = ::std::move(from);
  }

  inline ListCatheterPathsResponse& operator=(ListCatheterPathsResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const ListCatheterPathsResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ListCatheterPathsResponse* internal_default_instance() {
    return reinterpret_cast<const ListCatheterPathsResponse*>(
               &_ListCatheterPathsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void Swap(ListCatheterPathsResponse* other);
  friend void swap(ListCatheterPathsResponse& a, ListCatheterPathsResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ListCatheterPathsResponse* New() const final {
    return CreateMaybeMessage<ListCatheterPathsResponse>(nullptr);
  }

  ListCatheterPathsResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ListCatheterPathsResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ListCatheterPathsResponse& from);
  void MergeFrom(const ListCatheterPathsResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListCatheterPathsResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .github.com.pyrus.platform.protos.CatheterPath path = 1;
  bool has_path() const;
  void clear_path();
  static const int kPathFieldNumber = 1;
  const ::github::com::pyrus::platform::protos::CatheterPath& path() const;
  ::github::com::pyrus::platform::protos::CatheterPath* release_path();
  ::github::com::pyrus::platform::protos::CatheterPath* mutable_path();
  void set_allocated_path(::github::com::pyrus::platform::protos::CatheterPath* path);

  // @@protoc_insertion_point(class_scope:github.com.pyrus.platform.protos.ListCatheterPathsResponse)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::github::com::pyrus::platform::protos::CatheterPath* path_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_catheter_5fpath_5fservice_2eproto;
};
// -------------------------------------------------------------------

class CatheterPath final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:github.com.pyrus.platform.protos.CatheterPath) */ {
 public:
  CatheterPath();
  virtual ~CatheterPath();

  CatheterPath(const CatheterPath& from);

  inline CatheterPath& operator=(const CatheterPath& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CatheterPath(CatheterPath&& from) noexcept
    : CatheterPath() {
    *this = ::std::move(from);
  }

  inline CatheterPath& operator=(CatheterPath&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CatheterPath& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CatheterPath* internal_default_instance() {
    return reinterpret_cast<const CatheterPath*>(
               &_CatheterPath_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  void Swap(CatheterPath* other);
  friend void swap(CatheterPath& a, CatheterPath& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CatheterPath* New() const final {
    return CreateMaybeMessage<CatheterPath>(nullptr);
  }

  CatheterPath* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CatheterPath>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CatheterPath& from);
  void MergeFrom(const CatheterPath& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CatheterPath* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 4;
  void clear_name();
  static const int kNameFieldNumber = 4;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // .google.protobuf.Timestamp created = 5;
  bool has_created() const;
  void clear_created();
  static const int kCreatedFieldNumber = 5;
  const ::google::protobuf::Timestamp& created() const;
  ::google::protobuf::Timestamp* release_created();
  ::google::protobuf::Timestamp* mutable_created();
  void set_allocated_created(::google::protobuf::Timestamp* created);

  // uint64 id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::uint64 id() const;
  void set_id(::google::protobuf::uint64 value);

  // uint64 startCatheterDataID = 2;
  void clear_startcatheterdataid();
  static const int kStartCatheterDataIDFieldNumber = 2;
  ::google::protobuf::uint64 startcatheterdataid() const;
  void set_startcatheterdataid(::google::protobuf::uint64 value);

  // uint64 endCatheterDataID = 3;
  void clear_endcatheterdataid();
  static const int kEndCatheterDataIDFieldNumber = 3;
  ::google::protobuf::uint64 endcatheterdataid() const;
  void set_endcatheterdataid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:github.com.pyrus.platform.protos.CatheterPath)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::Timestamp* created_;
  ::google::protobuf::uint64 id_;
  ::google::protobuf::uint64 startcatheterdataid_;
  ::google::protobuf::uint64 endcatheterdataid_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_catheter_5fpath_5fservice_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CreateCatheterPathRequest

// .github.com.pyrus.platform.protos.CatheterPath path = 1;
inline bool CreateCatheterPathRequest::has_path() const {
  return this != internal_default_instance() && path_ != nullptr;
}
inline void CreateCatheterPathRequest::clear_path() {
  if (GetArenaNoVirtual() == nullptr && path_ != nullptr) {
    delete path_;
  }
  path_ = nullptr;
}
inline const ::github::com::pyrus::platform::protos::CatheterPath& CreateCatheterPathRequest::path() const {
  const ::github::com::pyrus::platform::protos::CatheterPath* p = path_;
  // @@protoc_insertion_point(field_get:github.com.pyrus.platform.protos.CreateCatheterPathRequest.path)
  return p != nullptr ? *p : *reinterpret_cast<const ::github::com::pyrus::platform::protos::CatheterPath*>(
      &::github::com::pyrus::platform::protos::_CatheterPath_default_instance_);
}
inline ::github::com::pyrus::platform::protos::CatheterPath* CreateCatheterPathRequest::release_path() {
  // @@protoc_insertion_point(field_release:github.com.pyrus.platform.protos.CreateCatheterPathRequest.path)
  
  ::github::com::pyrus::platform::protos::CatheterPath* temp = path_;
  path_ = nullptr;
  return temp;
}
inline ::github::com::pyrus::platform::protos::CatheterPath* CreateCatheterPathRequest::mutable_path() {
  
  if (path_ == nullptr) {
    auto* p = CreateMaybeMessage<::github::com::pyrus::platform::protos::CatheterPath>(GetArenaNoVirtual());
    path_ = p;
  }
  // @@protoc_insertion_point(field_mutable:github.com.pyrus.platform.protos.CreateCatheterPathRequest.path)
  return path_;
}
inline void CreateCatheterPathRequest::set_allocated_path(::github::com::pyrus::platform::protos::CatheterPath* path) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete path_;
  }
  if (path) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      path = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, path, submessage_arena);
    }
    
  } else {
    
  }
  path_ = path;
  // @@protoc_insertion_point(field_set_allocated:github.com.pyrus.platform.protos.CreateCatheterPathRequest.path)
}

// -------------------------------------------------------------------

// CreateCatheterPathResponse

// uint64 id = 1;
inline void CreateCatheterPathResponse::clear_id() {
  id_ = PROTOBUF_ULONGLONG(0);
}
inline ::google::protobuf::uint64 CreateCatheterPathResponse::id() const {
  // @@protoc_insertion_point(field_get:github.com.pyrus.platform.protos.CreateCatheterPathResponse.id)
  return id_;
}
inline void CreateCatheterPathResponse::set_id(::google::protobuf::uint64 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:github.com.pyrus.platform.protos.CreateCatheterPathResponse.id)
}

// -------------------------------------------------------------------

// GetCatheterPathRequest

// uint64 id = 1;
inline void GetCatheterPathRequest::clear_id() {
  id_ = PROTOBUF_ULONGLONG(0);
}
inline ::google::protobuf::uint64 GetCatheterPathRequest::id() const {
  // @@protoc_insertion_point(field_get:github.com.pyrus.platform.protos.GetCatheterPathRequest.id)
  return id_;
}
inline void GetCatheterPathRequest::set_id(::google::protobuf::uint64 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:github.com.pyrus.platform.protos.GetCatheterPathRequest.id)
}

// -------------------------------------------------------------------

// GetCatheterPathResponse

// .github.com.pyrus.platform.protos.CatheterPath path = 1;
inline bool GetCatheterPathResponse::has_path() const {
  return this != internal_default_instance() && path_ != nullptr;
}
inline void GetCatheterPathResponse::clear_path() {
  if (GetArenaNoVirtual() == nullptr && path_ != nullptr) {
    delete path_;
  }
  path_ = nullptr;
}
inline const ::github::com::pyrus::platform::protos::CatheterPath& GetCatheterPathResponse::path() const {
  const ::github::com::pyrus::platform::protos::CatheterPath* p = path_;
  // @@protoc_insertion_point(field_get:github.com.pyrus.platform.protos.GetCatheterPathResponse.path)
  return p != nullptr ? *p : *reinterpret_cast<const ::github::com::pyrus::platform::protos::CatheterPath*>(
      &::github::com::pyrus::platform::protos::_CatheterPath_default_instance_);
}
inline ::github::com::pyrus::platform::protos::CatheterPath* GetCatheterPathResponse::release_path() {
  // @@protoc_insertion_point(field_release:github.com.pyrus.platform.protos.GetCatheterPathResponse.path)
  
  ::github::com::pyrus::platform::protos::CatheterPath* temp = path_;
  path_ = nullptr;
  return temp;
}
inline ::github::com::pyrus::platform::protos::CatheterPath* GetCatheterPathResponse::mutable_path() {
  
  if (path_ == nullptr) {
    auto* p = CreateMaybeMessage<::github::com::pyrus::platform::protos::CatheterPath>(GetArenaNoVirtual());
    path_ = p;
  }
  // @@protoc_insertion_point(field_mutable:github.com.pyrus.platform.protos.GetCatheterPathResponse.path)
  return path_;
}
inline void GetCatheterPathResponse::set_allocated_path(::github::com::pyrus::platform::protos::CatheterPath* path) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete path_;
  }
  if (path) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      path = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, path, submessage_arena);
    }
    
  } else {
    
  }
  path_ = path;
  // @@protoc_insertion_point(field_set_allocated:github.com.pyrus.platform.protos.GetCatheterPathResponse.path)
}

// -------------------------------------------------------------------

// GetCoordinatesCatheterPathRequest

// uint64 id = 1;
inline void GetCoordinatesCatheterPathRequest::clear_id() {
  id_ = PROTOBUF_ULONGLONG(0);
}
inline ::google::protobuf::uint64 GetCoordinatesCatheterPathRequest::id() const {
  // @@protoc_insertion_point(field_get:github.com.pyrus.platform.protos.GetCoordinatesCatheterPathRequest.id)
  return id_;
}
inline void GetCoordinatesCatheterPathRequest::set_id(::google::protobuf::uint64 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:github.com.pyrus.platform.protos.GetCoordinatesCatheterPathRequest.id)
}

// -------------------------------------------------------------------

// GetCoordinatesCatheterPathResponse

// .github.com.pyrus.platform.protos.CatheterCoordinates coordinate = 1;
inline bool GetCoordinatesCatheterPathResponse::has_coordinate() const {
  return this != internal_default_instance() && coordinate_ != nullptr;
}
inline const ::github::com::pyrus::platform::protos::CatheterCoordinates& GetCoordinatesCatheterPathResponse::coordinate() const {
  const ::github::com::pyrus::platform::protos::CatheterCoordinates* p = coordinate_;
  // @@protoc_insertion_point(field_get:github.com.pyrus.platform.protos.GetCoordinatesCatheterPathResponse.coordinate)
  return p != nullptr ? *p : *reinterpret_cast<const ::github::com::pyrus::platform::protos::CatheterCoordinates*>(
      &::github::com::pyrus::platform::protos::_CatheterCoordinates_default_instance_);
}
inline ::github::com::pyrus::platform::protos::CatheterCoordinates* GetCoordinatesCatheterPathResponse::release_coordinate() {
  // @@protoc_insertion_point(field_release:github.com.pyrus.platform.protos.GetCoordinatesCatheterPathResponse.coordinate)
  
  ::github::com::pyrus::platform::protos::CatheterCoordinates* temp = coordinate_;
  coordinate_ = nullptr;
  return temp;
}
inline ::github::com::pyrus::platform::protos::CatheterCoordinates* GetCoordinatesCatheterPathResponse::mutable_coordinate() {
  
  if (coordinate_ == nullptr) {
    auto* p = CreateMaybeMessage<::github::com::pyrus::platform::protos::CatheterCoordinates>(GetArenaNoVirtual());
    coordinate_ = p;
  }
  // @@protoc_insertion_point(field_mutable:github.com.pyrus.platform.protos.GetCoordinatesCatheterPathResponse.coordinate)
  return coordinate_;
}
inline void GetCoordinatesCatheterPathResponse::set_allocated_coordinate(::github::com::pyrus::platform::protos::CatheterCoordinates* coordinate) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(coordinate_);
  }
  if (coordinate) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      coordinate = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, coordinate, submessage_arena);
    }
    
  } else {
    
  }
  coordinate_ = coordinate;
  // @@protoc_insertion_point(field_set_allocated:github.com.pyrus.platform.protos.GetCoordinatesCatheterPathResponse.coordinate)
}

// -------------------------------------------------------------------

// ListCatheterPathsRequest

// -------------------------------------------------------------------

// ListCatheterPathsResponse

// .github.com.pyrus.platform.protos.CatheterPath path = 1;
inline bool ListCatheterPathsResponse::has_path() const {
  return this != internal_default_instance() && path_ != nullptr;
}
inline void ListCatheterPathsResponse::clear_path() {
  if (GetArenaNoVirtual() == nullptr && path_ != nullptr) {
    delete path_;
  }
  path_ = nullptr;
}
inline const ::github::com::pyrus::platform::protos::CatheterPath& ListCatheterPathsResponse::path() const {
  const ::github::com::pyrus::platform::protos::CatheterPath* p = path_;
  // @@protoc_insertion_point(field_get:github.com.pyrus.platform.protos.ListCatheterPathsResponse.path)
  return p != nullptr ? *p : *reinterpret_cast<const ::github::com::pyrus::platform::protos::CatheterPath*>(
      &::github::com::pyrus::platform::protos::_CatheterPath_default_instance_);
}
inline ::github::com::pyrus::platform::protos::CatheterPath* ListCatheterPathsResponse::release_path() {
  // @@protoc_insertion_point(field_release:github.com.pyrus.platform.protos.ListCatheterPathsResponse.path)
  
  ::github::com::pyrus::platform::protos::CatheterPath* temp = path_;
  path_ = nullptr;
  return temp;
}
inline ::github::com::pyrus::platform::protos::CatheterPath* ListCatheterPathsResponse::mutable_path() {
  
  if (path_ == nullptr) {
    auto* p = CreateMaybeMessage<::github::com::pyrus::platform::protos::CatheterPath>(GetArenaNoVirtual());
    path_ = p;
  }
  // @@protoc_insertion_point(field_mutable:github.com.pyrus.platform.protos.ListCatheterPathsResponse.path)
  return path_;
}
inline void ListCatheterPathsResponse::set_allocated_path(::github::com::pyrus::platform::protos::CatheterPath* path) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete path_;
  }
  if (path) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      path = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, path, submessage_arena);
    }
    
  } else {
    
  }
  path_ = path;
  // @@protoc_insertion_point(field_set_allocated:github.com.pyrus.platform.protos.ListCatheterPathsResponse.path)
}

// -------------------------------------------------------------------

// CatheterPath

// uint64 id = 1;
inline void CatheterPath::clear_id() {
  id_ = PROTOBUF_ULONGLONG(0);
}
inline ::google::protobuf::uint64 CatheterPath::id() const {
  // @@protoc_insertion_point(field_get:github.com.pyrus.platform.protos.CatheterPath.id)
  return id_;
}
inline void CatheterPath::set_id(::google::protobuf::uint64 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:github.com.pyrus.platform.protos.CatheterPath.id)
}

// uint64 startCatheterDataID = 2;
inline void CatheterPath::clear_startcatheterdataid() {
  startcatheterdataid_ = PROTOBUF_ULONGLONG(0);
}
inline ::google::protobuf::uint64 CatheterPath::startcatheterdataid() const {
  // @@protoc_insertion_point(field_get:github.com.pyrus.platform.protos.CatheterPath.startCatheterDataID)
  return startcatheterdataid_;
}
inline void CatheterPath::set_startcatheterdataid(::google::protobuf::uint64 value) {
  
  startcatheterdataid_ = value;
  // @@protoc_insertion_point(field_set:github.com.pyrus.platform.protos.CatheterPath.startCatheterDataID)
}

// uint64 endCatheterDataID = 3;
inline void CatheterPath::clear_endcatheterdataid() {
  endcatheterdataid_ = PROTOBUF_ULONGLONG(0);
}
inline ::google::protobuf::uint64 CatheterPath::endcatheterdataid() const {
  // @@protoc_insertion_point(field_get:github.com.pyrus.platform.protos.CatheterPath.endCatheterDataID)
  return endcatheterdataid_;
}
inline void CatheterPath::set_endcatheterdataid(::google::protobuf::uint64 value) {
  
  endcatheterdataid_ = value;
  // @@protoc_insertion_point(field_set:github.com.pyrus.platform.protos.CatheterPath.endCatheterDataID)
}

// string name = 4;
inline void CatheterPath::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CatheterPath::name() const {
  // @@protoc_insertion_point(field_get:github.com.pyrus.platform.protos.CatheterPath.name)
  return name_.GetNoArena();
}
inline void CatheterPath::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:github.com.pyrus.platform.protos.CatheterPath.name)
}
#if LANG_CXX11
inline void CatheterPath::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:github.com.pyrus.platform.protos.CatheterPath.name)
}
#endif
inline void CatheterPath::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:github.com.pyrus.platform.protos.CatheterPath.name)
}
inline void CatheterPath::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:github.com.pyrus.platform.protos.CatheterPath.name)
}
inline ::std::string* CatheterPath::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:github.com.pyrus.platform.protos.CatheterPath.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CatheterPath::release_name() {
  // @@protoc_insertion_point(field_release:github.com.pyrus.platform.protos.CatheterPath.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CatheterPath::set_allocated_name(::std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:github.com.pyrus.platform.protos.CatheterPath.name)
}

// .google.protobuf.Timestamp created = 5;
inline bool CatheterPath::has_created() const {
  return this != internal_default_instance() && created_ != nullptr;
}
inline const ::google::protobuf::Timestamp& CatheterPath::created() const {
  const ::google::protobuf::Timestamp* p = created_;
  // @@protoc_insertion_point(field_get:github.com.pyrus.platform.protos.CatheterPath.created)
  return p != nullptr ? *p : *reinterpret_cast<const ::google::protobuf::Timestamp*>(
      &::google::protobuf::_Timestamp_default_instance_);
}
inline ::google::protobuf::Timestamp* CatheterPath::release_created() {
  // @@protoc_insertion_point(field_release:github.com.pyrus.platform.protos.CatheterPath.created)
  
  ::google::protobuf::Timestamp* temp = created_;
  created_ = nullptr;
  return temp;
}
inline ::google::protobuf::Timestamp* CatheterPath::mutable_created() {
  
  if (created_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::protobuf::Timestamp>(GetArenaNoVirtual());
    created_ = p;
  }
  // @@protoc_insertion_point(field_mutable:github.com.pyrus.platform.protos.CatheterPath.created)
  return created_;
}
inline void CatheterPath::set_allocated_created(::google::protobuf::Timestamp* created) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(created_);
  }
  if (created) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(created)->GetArena();
    if (message_arena != submessage_arena) {
      created = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, created, submessage_arena);
    }
    
  } else {
    
  }
  created_ = created;
  // @@protoc_insertion_point(field_set_allocated:github.com.pyrus.platform.protos.CatheterPath.created)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace protos
}  // namespace platform
}  // namespace pyrus
}  // namespace com
}  // namespace github

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // PROTOBUF_INCLUDED_catheter_5fpath_5fservice_2eproto
