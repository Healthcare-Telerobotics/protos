// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: catheter_recording_service.proto
#ifndef GRPC_catheter_5frecording_5fservice_2eproto__INCLUDED
#define GRPC_catheter_5frecording_5fservice_2eproto__INCLUDED

#include "catheter_recording_service.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace grpc {
class CompletionQueue;
class Channel;
class ServerCompletionQueue;
class ServerContext;
}  // namespace grpc

namespace telerobotics {
namespace protos {

//
// Service for recording catheter data
class CatheterRecordingService final {
 public:
  static constexpr char const* service_full_name() {
    return "telerobotics.protos.CatheterRecordingService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // Record catheter data
    std::unique_ptr< ::grpc::ClientWriterInterface< ::telerobotics::protos::RecordCatheterRequest>> Record(::grpc::ClientContext* context, ::telerobotics::protos::RecordCatheterResponse* response) {
      return std::unique_ptr< ::grpc::ClientWriterInterface< ::telerobotics::protos::RecordCatheterRequest>>(RecordRaw(context, response));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::telerobotics::protos::RecordCatheterRequest>> AsyncRecord(::grpc::ClientContext* context, ::telerobotics::protos::RecordCatheterResponse* response, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::telerobotics::protos::RecordCatheterRequest>>(AsyncRecordRaw(context, response, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::telerobotics::protos::RecordCatheterRequest>> PrepareAsyncRecord(::grpc::ClientContext* context, ::telerobotics::protos::RecordCatheterResponse* response, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::telerobotics::protos::RecordCatheterRequest>>(PrepareAsyncRecordRaw(context, response, cq));
    }
    // Let the server know you recieved 
    std::unique_ptr< ::grpc::ClientWriterInterface< ::telerobotics::protos::AckReceivedCatheterRequest>> AckReceived(::grpc::ClientContext* context, ::telerobotics::protos::AckReceivedCatheterResponse* response) {
      return std::unique_ptr< ::grpc::ClientWriterInterface< ::telerobotics::protos::AckReceivedCatheterRequest>>(AckReceivedRaw(context, response));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::telerobotics::protos::AckReceivedCatheterRequest>> AsyncAckReceived(::grpc::ClientContext* context, ::telerobotics::protos::AckReceivedCatheterResponse* response, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::telerobotics::protos::AckReceivedCatheterRequest>>(AsyncAckReceivedRaw(context, response, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::telerobotics::protos::AckReceivedCatheterRequest>> PrepareAsyncAckReceived(::grpc::ClientContext* context, ::telerobotics::protos::AckReceivedCatheterResponse* response, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::telerobotics::protos::AckReceivedCatheterRequest>>(PrepareAsyncAckReceivedRaw(context, response, cq));
    }
    // List records
    std::unique_ptr< ::grpc::ClientReaderInterface< ::telerobotics::protos::ListCatheterResponse>> List(::grpc::ClientContext* context, const ::telerobotics::protos::ListCatheterRequest& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::telerobotics::protos::ListCatheterResponse>>(ListRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::telerobotics::protos::ListCatheterResponse>> AsyncList(::grpc::ClientContext* context, const ::telerobotics::protos::ListCatheterRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::telerobotics::protos::ListCatheterResponse>>(AsyncListRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::telerobotics::protos::ListCatheterResponse>> PrepareAsyncList(::grpc::ClientContext* context, const ::telerobotics::protos::ListCatheterRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::telerobotics::protos::ListCatheterResponse>>(PrepareAsyncListRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      // Record catheter data
      virtual void Record(::grpc::ClientContext* context, ::telerobotics::protos::RecordCatheterResponse* response, ::grpc::experimental::ClientWriteReactor< ::telerobotics::protos::RecordCatheterRequest>* reactor) = 0;
      // Let the server know you recieved 
      virtual void AckReceived(::grpc::ClientContext* context, ::telerobotics::protos::AckReceivedCatheterResponse* response, ::grpc::experimental::ClientWriteReactor< ::telerobotics::protos::AckReceivedCatheterRequest>* reactor) = 0;
      // List records
      virtual void List(::grpc::ClientContext* context, ::telerobotics::protos::ListCatheterRequest* request, ::grpc::experimental::ClientReadReactor< ::telerobotics::protos::ListCatheterResponse>* reactor) = 0;
    };
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientWriterInterface< ::telerobotics::protos::RecordCatheterRequest>* RecordRaw(::grpc::ClientContext* context, ::telerobotics::protos::RecordCatheterResponse* response) = 0;
    virtual ::grpc::ClientAsyncWriterInterface< ::telerobotics::protos::RecordCatheterRequest>* AsyncRecordRaw(::grpc::ClientContext* context, ::telerobotics::protos::RecordCatheterResponse* response, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncWriterInterface< ::telerobotics::protos::RecordCatheterRequest>* PrepareAsyncRecordRaw(::grpc::ClientContext* context, ::telerobotics::protos::RecordCatheterResponse* response, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientWriterInterface< ::telerobotics::protos::AckReceivedCatheterRequest>* AckReceivedRaw(::grpc::ClientContext* context, ::telerobotics::protos::AckReceivedCatheterResponse* response) = 0;
    virtual ::grpc::ClientAsyncWriterInterface< ::telerobotics::protos::AckReceivedCatheterRequest>* AsyncAckReceivedRaw(::grpc::ClientContext* context, ::telerobotics::protos::AckReceivedCatheterResponse* response, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncWriterInterface< ::telerobotics::protos::AckReceivedCatheterRequest>* PrepareAsyncAckReceivedRaw(::grpc::ClientContext* context, ::telerobotics::protos::AckReceivedCatheterResponse* response, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::telerobotics::protos::ListCatheterResponse>* ListRaw(::grpc::ClientContext* context, const ::telerobotics::protos::ListCatheterRequest& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::telerobotics::protos::ListCatheterResponse>* AsyncListRaw(::grpc::ClientContext* context, const ::telerobotics::protos::ListCatheterRequest& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::telerobotics::protos::ListCatheterResponse>* PrepareAsyncListRaw(::grpc::ClientContext* context, const ::telerobotics::protos::ListCatheterRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    std::unique_ptr< ::grpc::ClientWriter< ::telerobotics::protos::RecordCatheterRequest>> Record(::grpc::ClientContext* context, ::telerobotics::protos::RecordCatheterResponse* response) {
      return std::unique_ptr< ::grpc::ClientWriter< ::telerobotics::protos::RecordCatheterRequest>>(RecordRaw(context, response));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriter< ::telerobotics::protos::RecordCatheterRequest>> AsyncRecord(::grpc::ClientContext* context, ::telerobotics::protos::RecordCatheterResponse* response, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncWriter< ::telerobotics::protos::RecordCatheterRequest>>(AsyncRecordRaw(context, response, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriter< ::telerobotics::protos::RecordCatheterRequest>> PrepareAsyncRecord(::grpc::ClientContext* context, ::telerobotics::protos::RecordCatheterResponse* response, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncWriter< ::telerobotics::protos::RecordCatheterRequest>>(PrepareAsyncRecordRaw(context, response, cq));
    }
    std::unique_ptr< ::grpc::ClientWriter< ::telerobotics::protos::AckReceivedCatheterRequest>> AckReceived(::grpc::ClientContext* context, ::telerobotics::protos::AckReceivedCatheterResponse* response) {
      return std::unique_ptr< ::grpc::ClientWriter< ::telerobotics::protos::AckReceivedCatheterRequest>>(AckReceivedRaw(context, response));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriter< ::telerobotics::protos::AckReceivedCatheterRequest>> AsyncAckReceived(::grpc::ClientContext* context, ::telerobotics::protos::AckReceivedCatheterResponse* response, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncWriter< ::telerobotics::protos::AckReceivedCatheterRequest>>(AsyncAckReceivedRaw(context, response, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriter< ::telerobotics::protos::AckReceivedCatheterRequest>> PrepareAsyncAckReceived(::grpc::ClientContext* context, ::telerobotics::protos::AckReceivedCatheterResponse* response, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncWriter< ::telerobotics::protos::AckReceivedCatheterRequest>>(PrepareAsyncAckReceivedRaw(context, response, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::telerobotics::protos::ListCatheterResponse>> List(::grpc::ClientContext* context, const ::telerobotics::protos::ListCatheterRequest& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::telerobotics::protos::ListCatheterResponse>>(ListRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::telerobotics::protos::ListCatheterResponse>> AsyncList(::grpc::ClientContext* context, const ::telerobotics::protos::ListCatheterRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::telerobotics::protos::ListCatheterResponse>>(AsyncListRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::telerobotics::protos::ListCatheterResponse>> PrepareAsyncList(::grpc::ClientContext* context, const ::telerobotics::protos::ListCatheterRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::telerobotics::protos::ListCatheterResponse>>(PrepareAsyncListRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void Record(::grpc::ClientContext* context, ::telerobotics::protos::RecordCatheterResponse* response, ::grpc::experimental::ClientWriteReactor< ::telerobotics::protos::RecordCatheterRequest>* reactor) override;
      void AckReceived(::grpc::ClientContext* context, ::telerobotics::protos::AckReceivedCatheterResponse* response, ::grpc::experimental::ClientWriteReactor< ::telerobotics::protos::AckReceivedCatheterRequest>* reactor) override;
      void List(::grpc::ClientContext* context, ::telerobotics::protos::ListCatheterRequest* request, ::grpc::experimental::ClientReadReactor< ::telerobotics::protos::ListCatheterResponse>* reactor) override;
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientWriter< ::telerobotics::protos::RecordCatheterRequest>* RecordRaw(::grpc::ClientContext* context, ::telerobotics::protos::RecordCatheterResponse* response) override;
    ::grpc::ClientAsyncWriter< ::telerobotics::protos::RecordCatheterRequest>* AsyncRecordRaw(::grpc::ClientContext* context, ::telerobotics::protos::RecordCatheterResponse* response, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncWriter< ::telerobotics::protos::RecordCatheterRequest>* PrepareAsyncRecordRaw(::grpc::ClientContext* context, ::telerobotics::protos::RecordCatheterResponse* response, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientWriter< ::telerobotics::protos::AckReceivedCatheterRequest>* AckReceivedRaw(::grpc::ClientContext* context, ::telerobotics::protos::AckReceivedCatheterResponse* response) override;
    ::grpc::ClientAsyncWriter< ::telerobotics::protos::AckReceivedCatheterRequest>* AsyncAckReceivedRaw(::grpc::ClientContext* context, ::telerobotics::protos::AckReceivedCatheterResponse* response, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncWriter< ::telerobotics::protos::AckReceivedCatheterRequest>* PrepareAsyncAckReceivedRaw(::grpc::ClientContext* context, ::telerobotics::protos::AckReceivedCatheterResponse* response, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::telerobotics::protos::ListCatheterResponse>* ListRaw(::grpc::ClientContext* context, const ::telerobotics::protos::ListCatheterRequest& request) override;
    ::grpc::ClientAsyncReader< ::telerobotics::protos::ListCatheterResponse>* AsyncListRaw(::grpc::ClientContext* context, const ::telerobotics::protos::ListCatheterRequest& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::telerobotics::protos::ListCatheterResponse>* PrepareAsyncListRaw(::grpc::ClientContext* context, const ::telerobotics::protos::ListCatheterRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_Record_;
    const ::grpc::internal::RpcMethod rpcmethod_AckReceived_;
    const ::grpc::internal::RpcMethod rpcmethod_List_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // Record catheter data
    virtual ::grpc::Status Record(::grpc::ServerContext* context, ::grpc::ServerReader< ::telerobotics::protos::RecordCatheterRequest>* reader, ::telerobotics::protos::RecordCatheterResponse* response);
    // Let the server know you recieved 
    virtual ::grpc::Status AckReceived(::grpc::ServerContext* context, ::grpc::ServerReader< ::telerobotics::protos::AckReceivedCatheterRequest>* reader, ::telerobotics::protos::AckReceivedCatheterResponse* response);
    // List records
    virtual ::grpc::Status List(::grpc::ServerContext* context, const ::telerobotics::protos::ListCatheterRequest* request, ::grpc::ServerWriter< ::telerobotics::protos::ListCatheterResponse>* writer);
  };
  template <class BaseClass>
  class WithAsyncMethod_Record : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_Record() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_Record() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Record(::grpc::ServerContext* context, ::grpc::ServerReader< ::telerobotics::protos::RecordCatheterRequest>* reader, ::telerobotics::protos::RecordCatheterResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRecord(::grpc::ServerContext* context, ::grpc::ServerAsyncReader< ::telerobotics::protos::RecordCatheterResponse, ::telerobotics::protos::RecordCatheterRequest>* reader, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncClientStreaming(0, context, reader, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_AckReceived : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_AckReceived() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_AckReceived() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AckReceived(::grpc::ServerContext* context, ::grpc::ServerReader< ::telerobotics::protos::AckReceivedCatheterRequest>* reader, ::telerobotics::protos::AckReceivedCatheterResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAckReceived(::grpc::ServerContext* context, ::grpc::ServerAsyncReader< ::telerobotics::protos::AckReceivedCatheterResponse, ::telerobotics::protos::AckReceivedCatheterRequest>* reader, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncClientStreaming(1, context, reader, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_List : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_List() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_List() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status List(::grpc::ServerContext* context, const ::telerobotics::protos::ListCatheterRequest* request, ::grpc::ServerWriter< ::telerobotics::protos::ListCatheterResponse>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestList(::grpc::ServerContext* context, ::telerobotics::protos::ListCatheterRequest* request, ::grpc::ServerAsyncWriter< ::telerobotics::protos::ListCatheterResponse>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(2, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_Record<WithAsyncMethod_AckReceived<WithAsyncMethod_List<Service > > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_Record : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_Record() {
      ::grpc::Service::experimental().MarkMethodCallback(0,
        new ::grpc::internal::CallbackClientStreamingHandler< ::telerobotics::protos::RecordCatheterRequest, ::telerobotics::protos::RecordCatheterResponse>(
          [this] { return this->Record(); }));
    }
    ~ExperimentalWithCallbackMethod_Record() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Record(::grpc::ServerContext* context, ::grpc::ServerReader< ::telerobotics::protos::RecordCatheterRequest>* reader, ::telerobotics::protos::RecordCatheterResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::experimental::ServerReadReactor< ::telerobotics::protos::RecordCatheterRequest, ::telerobotics::protos::RecordCatheterResponse>* Record() {
      return new ::grpc::internal::UnimplementedReadReactor<
        ::telerobotics::protos::RecordCatheterRequest, ::telerobotics::protos::RecordCatheterResponse>;}
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_AckReceived : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_AckReceived() {
      ::grpc::Service::experimental().MarkMethodCallback(1,
        new ::grpc::internal::CallbackClientStreamingHandler< ::telerobotics::protos::AckReceivedCatheterRequest, ::telerobotics::protos::AckReceivedCatheterResponse>(
          [this] { return this->AckReceived(); }));
    }
    ~ExperimentalWithCallbackMethod_AckReceived() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AckReceived(::grpc::ServerContext* context, ::grpc::ServerReader< ::telerobotics::protos::AckReceivedCatheterRequest>* reader, ::telerobotics::protos::AckReceivedCatheterResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::experimental::ServerReadReactor< ::telerobotics::protos::AckReceivedCatheterRequest, ::telerobotics::protos::AckReceivedCatheterResponse>* AckReceived() {
      return new ::grpc::internal::UnimplementedReadReactor<
        ::telerobotics::protos::AckReceivedCatheterRequest, ::telerobotics::protos::AckReceivedCatheterResponse>;}
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_List : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_List() {
      ::grpc::Service::experimental().MarkMethodCallback(2,
        new ::grpc::internal::CallbackServerStreamingHandler< ::telerobotics::protos::ListCatheterRequest, ::telerobotics::protos::ListCatheterResponse>(
          [this] { return this->List(); }));
    }
    ~ExperimentalWithCallbackMethod_List() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status List(::grpc::ServerContext* context, const ::telerobotics::protos::ListCatheterRequest* request, ::grpc::ServerWriter< ::telerobotics::protos::ListCatheterResponse>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::experimental::ServerWriteReactor< ::telerobotics::protos::ListCatheterRequest, ::telerobotics::protos::ListCatheterResponse>* List() {
      return new ::grpc::internal::UnimplementedWriteReactor<
        ::telerobotics::protos::ListCatheterRequest, ::telerobotics::protos::ListCatheterResponse>;}
  };
  typedef ExperimentalWithCallbackMethod_Record<ExperimentalWithCallbackMethod_AckReceived<ExperimentalWithCallbackMethod_List<Service > > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_Record : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_Record() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_Record() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Record(::grpc::ServerContext* context, ::grpc::ServerReader< ::telerobotics::protos::RecordCatheterRequest>* reader, ::telerobotics::protos::RecordCatheterResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_AckReceived : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_AckReceived() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_AckReceived() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AckReceived(::grpc::ServerContext* context, ::grpc::ServerReader< ::telerobotics::protos::AckReceivedCatheterRequest>* reader, ::telerobotics::protos::AckReceivedCatheterResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_List : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_List() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_List() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status List(::grpc::ServerContext* context, const ::telerobotics::protos::ListCatheterRequest* request, ::grpc::ServerWriter< ::telerobotics::protos::ListCatheterResponse>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_Record : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_Record() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_Record() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Record(::grpc::ServerContext* context, ::grpc::ServerReader< ::telerobotics::protos::RecordCatheterRequest>* reader, ::telerobotics::protos::RecordCatheterResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRecord(::grpc::ServerContext* context, ::grpc::ServerAsyncReader< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* reader, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncClientStreaming(0, context, reader, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_AckReceived : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_AckReceived() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_AckReceived() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AckReceived(::grpc::ServerContext* context, ::grpc::ServerReader< ::telerobotics::protos::AckReceivedCatheterRequest>* reader, ::telerobotics::protos::AckReceivedCatheterResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAckReceived(::grpc::ServerContext* context, ::grpc::ServerAsyncReader< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* reader, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncClientStreaming(1, context, reader, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_List : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_List() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_List() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status List(::grpc::ServerContext* context, const ::telerobotics::protos::ListCatheterRequest* request, ::grpc::ServerWriter< ::telerobotics::protos::ListCatheterResponse>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestList(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(2, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_Record : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_Record() {
      ::grpc::Service::experimental().MarkMethodRawCallback(0,
        new ::grpc::internal::CallbackClientStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this] { return this->Record(); }));
    }
    ~ExperimentalWithRawCallbackMethod_Record() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Record(::grpc::ServerContext* context, ::grpc::ServerReader< ::telerobotics::protos::RecordCatheterRequest>* reader, ::telerobotics::protos::RecordCatheterResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::experimental::ServerReadReactor< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* Record() {
      return new ::grpc::internal::UnimplementedReadReactor<
        ::grpc::ByteBuffer, ::grpc::ByteBuffer>;}
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_AckReceived : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_AckReceived() {
      ::grpc::Service::experimental().MarkMethodRawCallback(1,
        new ::grpc::internal::CallbackClientStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this] { return this->AckReceived(); }));
    }
    ~ExperimentalWithRawCallbackMethod_AckReceived() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AckReceived(::grpc::ServerContext* context, ::grpc::ServerReader< ::telerobotics::protos::AckReceivedCatheterRequest>* reader, ::telerobotics::protos::AckReceivedCatheterResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::experimental::ServerReadReactor< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* AckReceived() {
      return new ::grpc::internal::UnimplementedReadReactor<
        ::grpc::ByteBuffer, ::grpc::ByteBuffer>;}
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_List : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_List() {
      ::grpc::Service::experimental().MarkMethodRawCallback(2,
        new ::grpc::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this] { return this->List(); }));
    }
    ~ExperimentalWithRawCallbackMethod_List() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status List(::grpc::ServerContext* context, const ::telerobotics::protos::ListCatheterRequest* request, ::grpc::ServerWriter< ::telerobotics::protos::ListCatheterResponse>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::experimental::ServerWriteReactor< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* List() {
      return new ::grpc::internal::UnimplementedWriteReactor<
        ::grpc::ByteBuffer, ::grpc::ByteBuffer>;}
  };
  typedef Service StreamedUnaryService;
  template <class BaseClass>
  class WithSplitStreamingMethod_List : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithSplitStreamingMethod_List() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::SplitServerStreamingHandler< ::telerobotics::protos::ListCatheterRequest, ::telerobotics::protos::ListCatheterResponse>(std::bind(&WithSplitStreamingMethod_List<BaseClass>::StreamedList, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithSplitStreamingMethod_List() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status List(::grpc::ServerContext* context, const ::telerobotics::protos::ListCatheterRequest* request, ::grpc::ServerWriter< ::telerobotics::protos::ListCatheterResponse>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedList(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::telerobotics::protos::ListCatheterRequest,::telerobotics::protos::ListCatheterResponse>* server_split_streamer) = 0;
  };
  typedef WithSplitStreamingMethod_List<Service > SplitStreamedService;
  typedef WithSplitStreamingMethod_List<Service > StreamedService;
};

}  // namespace protos
}  // namespace telerobotics


#endif  // GRPC_catheter_5frecording_5fservice_2eproto__INCLUDED
