// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: device_service.proto
#ifndef GRPC_device_5fservice_2eproto__INCLUDED
#define GRPC_device_5fservice_2eproto__INCLUDED

#include "device_service.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace grpc {
class CompletionQueue;
class Channel;
class ServerCompletionQueue;
class ServerContext;
}  // namespace grpc

namespace telerobotics {
namespace protos {

//
// The DeviceService manages devices. Once a device is created
// it can be used in a telerobotic procedure.
class DeviceService final {
 public:
  static constexpr char const* service_full_name() {
    return "telerobotics.protos.DeviceService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // Creates a new device
    virtual ::grpc::Status Create(::grpc::ClientContext* context, const ::telerobotics::protos::CreateDeviceRequest& request, ::telerobotics::protos::CreateDeviceResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::telerobotics::protos::CreateDeviceResponse>> AsyncCreate(::grpc::ClientContext* context, const ::telerobotics::protos::CreateDeviceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::telerobotics::protos::CreateDeviceResponse>>(AsyncCreateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::telerobotics::protos::CreateDeviceResponse>> PrepareAsyncCreate(::grpc::ClientContext* context, const ::telerobotics::protos::CreateDeviceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::telerobotics::protos::CreateDeviceResponse>>(PrepareAsyncCreateRaw(context, request, cq));
    }
    // Get information about a single device
    virtual ::grpc::Status Get(::grpc::ClientContext* context, const ::telerobotics::protos::GetDeviceRequest& request, ::telerobotics::protos::GetDeviceResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::telerobotics::protos::GetDeviceResponse>> AsyncGet(::grpc::ClientContext* context, const ::telerobotics::protos::GetDeviceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::telerobotics::protos::GetDeviceResponse>>(AsyncGetRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::telerobotics::protos::GetDeviceResponse>> PrepareAsyncGet(::grpc::ClientContext* context, const ::telerobotics::protos::GetDeviceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::telerobotics::protos::GetDeviceResponse>>(PrepareAsyncGetRaw(context, request, cq));
    }
    // Update information about a single device
    virtual ::grpc::Status Update(::grpc::ClientContext* context, const ::telerobotics::protos::UpdateDeviceRequest& request, ::telerobotics::protos::UpdateDeviceResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::telerobotics::protos::UpdateDeviceResponse>> AsyncUpdate(::grpc::ClientContext* context, const ::telerobotics::protos::UpdateDeviceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::telerobotics::protos::UpdateDeviceResponse>>(AsyncUpdateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::telerobotics::protos::UpdateDeviceResponse>> PrepareAsyncUpdate(::grpc::ClientContext* context, const ::telerobotics::protos::UpdateDeviceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::telerobotics::protos::UpdateDeviceResponse>>(PrepareAsyncUpdateRaw(context, request, cq));
    }
    // Lists all devices
    std::unique_ptr< ::grpc::ClientReaderInterface< ::telerobotics::protos::ListDevicesResponse>> List(::grpc::ClientContext* context, const ::telerobotics::protos::ListDevicesRequest& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::telerobotics::protos::ListDevicesResponse>>(ListRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::telerobotics::protos::ListDevicesResponse>> AsyncList(::grpc::ClientContext* context, const ::telerobotics::protos::ListDevicesRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::telerobotics::protos::ListDevicesResponse>>(AsyncListRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::telerobotics::protos::ListDevicesResponse>> PrepareAsyncList(::grpc::ClientContext* context, const ::telerobotics::protos::ListDevicesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::telerobotics::protos::ListDevicesResponse>>(PrepareAsyncListRaw(context, request, cq));
    }
    // Deletes a device
    virtual ::grpc::Status Delete(::grpc::ClientContext* context, const ::telerobotics::protos::DeleteDeviceRequest& request, ::telerobotics::protos::DeleteDeviceResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::telerobotics::protos::DeleteDeviceResponse>> AsyncDelete(::grpc::ClientContext* context, const ::telerobotics::protos::DeleteDeviceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::telerobotics::protos::DeleteDeviceResponse>>(AsyncDeleteRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::telerobotics::protos::DeleteDeviceResponse>> PrepareAsyncDelete(::grpc::ClientContext* context, const ::telerobotics::protos::DeleteDeviceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::telerobotics::protos::DeleteDeviceResponse>>(PrepareAsyncDeleteRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      // Creates a new device
      virtual void Create(::grpc::ClientContext* context, const ::telerobotics::protos::CreateDeviceRequest* request, ::telerobotics::protos::CreateDeviceResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Create(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::telerobotics::protos::CreateDeviceResponse* response, std::function<void(::grpc::Status)>) = 0;
      // Get information about a single device
      virtual void Get(::grpc::ClientContext* context, const ::telerobotics::protos::GetDeviceRequest* request, ::telerobotics::protos::GetDeviceResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Get(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::telerobotics::protos::GetDeviceResponse* response, std::function<void(::grpc::Status)>) = 0;
      // Update information about a single device
      virtual void Update(::grpc::ClientContext* context, const ::telerobotics::protos::UpdateDeviceRequest* request, ::telerobotics::protos::UpdateDeviceResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Update(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::telerobotics::protos::UpdateDeviceResponse* response, std::function<void(::grpc::Status)>) = 0;
      // Lists all devices
      virtual void List(::grpc::ClientContext* context, ::telerobotics::protos::ListDevicesRequest* request, ::grpc::experimental::ClientReadReactor< ::telerobotics::protos::ListDevicesResponse>* reactor) = 0;
      // Deletes a device
      virtual void Delete(::grpc::ClientContext* context, const ::telerobotics::protos::DeleteDeviceRequest* request, ::telerobotics::protos::DeleteDeviceResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Delete(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::telerobotics::protos::DeleteDeviceResponse* response, std::function<void(::grpc::Status)>) = 0;
    };
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::telerobotics::protos::CreateDeviceResponse>* AsyncCreateRaw(::grpc::ClientContext* context, const ::telerobotics::protos::CreateDeviceRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::telerobotics::protos::CreateDeviceResponse>* PrepareAsyncCreateRaw(::grpc::ClientContext* context, const ::telerobotics::protos::CreateDeviceRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::telerobotics::protos::GetDeviceResponse>* AsyncGetRaw(::grpc::ClientContext* context, const ::telerobotics::protos::GetDeviceRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::telerobotics::protos::GetDeviceResponse>* PrepareAsyncGetRaw(::grpc::ClientContext* context, const ::telerobotics::protos::GetDeviceRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::telerobotics::protos::UpdateDeviceResponse>* AsyncUpdateRaw(::grpc::ClientContext* context, const ::telerobotics::protos::UpdateDeviceRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::telerobotics::protos::UpdateDeviceResponse>* PrepareAsyncUpdateRaw(::grpc::ClientContext* context, const ::telerobotics::protos::UpdateDeviceRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::telerobotics::protos::ListDevicesResponse>* ListRaw(::grpc::ClientContext* context, const ::telerobotics::protos::ListDevicesRequest& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::telerobotics::protos::ListDevicesResponse>* AsyncListRaw(::grpc::ClientContext* context, const ::telerobotics::protos::ListDevicesRequest& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::telerobotics::protos::ListDevicesResponse>* PrepareAsyncListRaw(::grpc::ClientContext* context, const ::telerobotics::protos::ListDevicesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::telerobotics::protos::DeleteDeviceResponse>* AsyncDeleteRaw(::grpc::ClientContext* context, const ::telerobotics::protos::DeleteDeviceRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::telerobotics::protos::DeleteDeviceResponse>* PrepareAsyncDeleteRaw(::grpc::ClientContext* context, const ::telerobotics::protos::DeleteDeviceRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status Create(::grpc::ClientContext* context, const ::telerobotics::protos::CreateDeviceRequest& request, ::telerobotics::protos::CreateDeviceResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::telerobotics::protos::CreateDeviceResponse>> AsyncCreate(::grpc::ClientContext* context, const ::telerobotics::protos::CreateDeviceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::telerobotics::protos::CreateDeviceResponse>>(AsyncCreateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::telerobotics::protos::CreateDeviceResponse>> PrepareAsyncCreate(::grpc::ClientContext* context, const ::telerobotics::protos::CreateDeviceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::telerobotics::protos::CreateDeviceResponse>>(PrepareAsyncCreateRaw(context, request, cq));
    }
    ::grpc::Status Get(::grpc::ClientContext* context, const ::telerobotics::protos::GetDeviceRequest& request, ::telerobotics::protos::GetDeviceResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::telerobotics::protos::GetDeviceResponse>> AsyncGet(::grpc::ClientContext* context, const ::telerobotics::protos::GetDeviceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::telerobotics::protos::GetDeviceResponse>>(AsyncGetRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::telerobotics::protos::GetDeviceResponse>> PrepareAsyncGet(::grpc::ClientContext* context, const ::telerobotics::protos::GetDeviceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::telerobotics::protos::GetDeviceResponse>>(PrepareAsyncGetRaw(context, request, cq));
    }
    ::grpc::Status Update(::grpc::ClientContext* context, const ::telerobotics::protos::UpdateDeviceRequest& request, ::telerobotics::protos::UpdateDeviceResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::telerobotics::protos::UpdateDeviceResponse>> AsyncUpdate(::grpc::ClientContext* context, const ::telerobotics::protos::UpdateDeviceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::telerobotics::protos::UpdateDeviceResponse>>(AsyncUpdateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::telerobotics::protos::UpdateDeviceResponse>> PrepareAsyncUpdate(::grpc::ClientContext* context, const ::telerobotics::protos::UpdateDeviceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::telerobotics::protos::UpdateDeviceResponse>>(PrepareAsyncUpdateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::telerobotics::protos::ListDevicesResponse>> List(::grpc::ClientContext* context, const ::telerobotics::protos::ListDevicesRequest& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::telerobotics::protos::ListDevicesResponse>>(ListRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::telerobotics::protos::ListDevicesResponse>> AsyncList(::grpc::ClientContext* context, const ::telerobotics::protos::ListDevicesRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::telerobotics::protos::ListDevicesResponse>>(AsyncListRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::telerobotics::protos::ListDevicesResponse>> PrepareAsyncList(::grpc::ClientContext* context, const ::telerobotics::protos::ListDevicesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::telerobotics::protos::ListDevicesResponse>>(PrepareAsyncListRaw(context, request, cq));
    }
    ::grpc::Status Delete(::grpc::ClientContext* context, const ::telerobotics::protos::DeleteDeviceRequest& request, ::telerobotics::protos::DeleteDeviceResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::telerobotics::protos::DeleteDeviceResponse>> AsyncDelete(::grpc::ClientContext* context, const ::telerobotics::protos::DeleteDeviceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::telerobotics::protos::DeleteDeviceResponse>>(AsyncDeleteRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::telerobotics::protos::DeleteDeviceResponse>> PrepareAsyncDelete(::grpc::ClientContext* context, const ::telerobotics::protos::DeleteDeviceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::telerobotics::protos::DeleteDeviceResponse>>(PrepareAsyncDeleteRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void Create(::grpc::ClientContext* context, const ::telerobotics::protos::CreateDeviceRequest* request, ::telerobotics::protos::CreateDeviceResponse* response, std::function<void(::grpc::Status)>) override;
      void Create(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::telerobotics::protos::CreateDeviceResponse* response, std::function<void(::grpc::Status)>) override;
      void Get(::grpc::ClientContext* context, const ::telerobotics::protos::GetDeviceRequest* request, ::telerobotics::protos::GetDeviceResponse* response, std::function<void(::grpc::Status)>) override;
      void Get(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::telerobotics::protos::GetDeviceResponse* response, std::function<void(::grpc::Status)>) override;
      void Update(::grpc::ClientContext* context, const ::telerobotics::protos::UpdateDeviceRequest* request, ::telerobotics::protos::UpdateDeviceResponse* response, std::function<void(::grpc::Status)>) override;
      void Update(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::telerobotics::protos::UpdateDeviceResponse* response, std::function<void(::grpc::Status)>) override;
      void List(::grpc::ClientContext* context, ::telerobotics::protos::ListDevicesRequest* request, ::grpc::experimental::ClientReadReactor< ::telerobotics::protos::ListDevicesResponse>* reactor) override;
      void Delete(::grpc::ClientContext* context, const ::telerobotics::protos::DeleteDeviceRequest* request, ::telerobotics::protos::DeleteDeviceResponse* response, std::function<void(::grpc::Status)>) override;
      void Delete(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::telerobotics::protos::DeleteDeviceResponse* response, std::function<void(::grpc::Status)>) override;
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::telerobotics::protos::CreateDeviceResponse>* AsyncCreateRaw(::grpc::ClientContext* context, const ::telerobotics::protos::CreateDeviceRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::telerobotics::protos::CreateDeviceResponse>* PrepareAsyncCreateRaw(::grpc::ClientContext* context, const ::telerobotics::protos::CreateDeviceRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::telerobotics::protos::GetDeviceResponse>* AsyncGetRaw(::grpc::ClientContext* context, const ::telerobotics::protos::GetDeviceRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::telerobotics::protos::GetDeviceResponse>* PrepareAsyncGetRaw(::grpc::ClientContext* context, const ::telerobotics::protos::GetDeviceRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::telerobotics::protos::UpdateDeviceResponse>* AsyncUpdateRaw(::grpc::ClientContext* context, const ::telerobotics::protos::UpdateDeviceRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::telerobotics::protos::UpdateDeviceResponse>* PrepareAsyncUpdateRaw(::grpc::ClientContext* context, const ::telerobotics::protos::UpdateDeviceRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::telerobotics::protos::ListDevicesResponse>* ListRaw(::grpc::ClientContext* context, const ::telerobotics::protos::ListDevicesRequest& request) override;
    ::grpc::ClientAsyncReader< ::telerobotics::protos::ListDevicesResponse>* AsyncListRaw(::grpc::ClientContext* context, const ::telerobotics::protos::ListDevicesRequest& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::telerobotics::protos::ListDevicesResponse>* PrepareAsyncListRaw(::grpc::ClientContext* context, const ::telerobotics::protos::ListDevicesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::telerobotics::protos::DeleteDeviceResponse>* AsyncDeleteRaw(::grpc::ClientContext* context, const ::telerobotics::protos::DeleteDeviceRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::telerobotics::protos::DeleteDeviceResponse>* PrepareAsyncDeleteRaw(::grpc::ClientContext* context, const ::telerobotics::protos::DeleteDeviceRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_Create_;
    const ::grpc::internal::RpcMethod rpcmethod_Get_;
    const ::grpc::internal::RpcMethod rpcmethod_Update_;
    const ::grpc::internal::RpcMethod rpcmethod_List_;
    const ::grpc::internal::RpcMethod rpcmethod_Delete_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // Creates a new device
    virtual ::grpc::Status Create(::grpc::ServerContext* context, const ::telerobotics::protos::CreateDeviceRequest* request, ::telerobotics::protos::CreateDeviceResponse* response);
    // Get information about a single device
    virtual ::grpc::Status Get(::grpc::ServerContext* context, const ::telerobotics::protos::GetDeviceRequest* request, ::telerobotics::protos::GetDeviceResponse* response);
    // Update information about a single device
    virtual ::grpc::Status Update(::grpc::ServerContext* context, const ::telerobotics::protos::UpdateDeviceRequest* request, ::telerobotics::protos::UpdateDeviceResponse* response);
    // Lists all devices
    virtual ::grpc::Status List(::grpc::ServerContext* context, const ::telerobotics::protos::ListDevicesRequest* request, ::grpc::ServerWriter< ::telerobotics::protos::ListDevicesResponse>* writer);
    // Deletes a device
    virtual ::grpc::Status Delete(::grpc::ServerContext* context, const ::telerobotics::protos::DeleteDeviceRequest* request, ::telerobotics::protos::DeleteDeviceResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_Create : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_Create() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_Create() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Create(::grpc::ServerContext* context, const ::telerobotics::protos::CreateDeviceRequest* request, ::telerobotics::protos::CreateDeviceResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreate(::grpc::ServerContext* context, ::telerobotics::protos::CreateDeviceRequest* request, ::grpc::ServerAsyncResponseWriter< ::telerobotics::protos::CreateDeviceResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Get : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_Get() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_Get() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Get(::grpc::ServerContext* context, const ::telerobotics::protos::GetDeviceRequest* request, ::telerobotics::protos::GetDeviceResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGet(::grpc::ServerContext* context, ::telerobotics::protos::GetDeviceRequest* request, ::grpc::ServerAsyncResponseWriter< ::telerobotics::protos::GetDeviceResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Update : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_Update() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_Update() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Update(::grpc::ServerContext* context, const ::telerobotics::protos::UpdateDeviceRequest* request, ::telerobotics::protos::UpdateDeviceResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdate(::grpc::ServerContext* context, ::telerobotics::protos::UpdateDeviceRequest* request, ::grpc::ServerAsyncResponseWriter< ::telerobotics::protos::UpdateDeviceResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_List : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_List() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_List() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status List(::grpc::ServerContext* context, const ::telerobotics::protos::ListDevicesRequest* request, ::grpc::ServerWriter< ::telerobotics::protos::ListDevicesResponse>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestList(::grpc::ServerContext* context, ::telerobotics::protos::ListDevicesRequest* request, ::grpc::ServerAsyncWriter< ::telerobotics::protos::ListDevicesResponse>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(3, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Delete : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_Delete() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_Delete() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Delete(::grpc::ServerContext* context, const ::telerobotics::protos::DeleteDeviceRequest* request, ::telerobotics::protos::DeleteDeviceResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDelete(::grpc::ServerContext* context, ::telerobotics::protos::DeleteDeviceRequest* request, ::grpc::ServerAsyncResponseWriter< ::telerobotics::protos::DeleteDeviceResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_Create<WithAsyncMethod_Get<WithAsyncMethod_Update<WithAsyncMethod_List<WithAsyncMethod_Delete<Service > > > > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_Create : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_Create() {
      ::grpc::Service::experimental().MarkMethodCallback(0,
        new ::grpc::internal::CallbackUnaryHandler< ::telerobotics::protos::CreateDeviceRequest, ::telerobotics::protos::CreateDeviceResponse>(
          [this](::grpc::ServerContext* context,
                 const ::telerobotics::protos::CreateDeviceRequest* request,
                 ::telerobotics::protos::CreateDeviceResponse* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->Create(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithCallbackMethod_Create() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Create(::grpc::ServerContext* context, const ::telerobotics::protos::CreateDeviceRequest* request, ::telerobotics::protos::CreateDeviceResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void Create(::grpc::ServerContext* context, const ::telerobotics::protos::CreateDeviceRequest* request, ::telerobotics::protos::CreateDeviceResponse* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_Get : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_Get() {
      ::grpc::Service::experimental().MarkMethodCallback(1,
        new ::grpc::internal::CallbackUnaryHandler< ::telerobotics::protos::GetDeviceRequest, ::telerobotics::protos::GetDeviceResponse>(
          [this](::grpc::ServerContext* context,
                 const ::telerobotics::protos::GetDeviceRequest* request,
                 ::telerobotics::protos::GetDeviceResponse* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->Get(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithCallbackMethod_Get() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Get(::grpc::ServerContext* context, const ::telerobotics::protos::GetDeviceRequest* request, ::telerobotics::protos::GetDeviceResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void Get(::grpc::ServerContext* context, const ::telerobotics::protos::GetDeviceRequest* request, ::telerobotics::protos::GetDeviceResponse* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_Update : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_Update() {
      ::grpc::Service::experimental().MarkMethodCallback(2,
        new ::grpc::internal::CallbackUnaryHandler< ::telerobotics::protos::UpdateDeviceRequest, ::telerobotics::protos::UpdateDeviceResponse>(
          [this](::grpc::ServerContext* context,
                 const ::telerobotics::protos::UpdateDeviceRequest* request,
                 ::telerobotics::protos::UpdateDeviceResponse* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->Update(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithCallbackMethod_Update() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Update(::grpc::ServerContext* context, const ::telerobotics::protos::UpdateDeviceRequest* request, ::telerobotics::protos::UpdateDeviceResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void Update(::grpc::ServerContext* context, const ::telerobotics::protos::UpdateDeviceRequest* request, ::telerobotics::protos::UpdateDeviceResponse* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_List : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_List() {
      ::grpc::Service::experimental().MarkMethodCallback(3,
        new ::grpc::internal::CallbackServerStreamingHandler< ::telerobotics::protos::ListDevicesRequest, ::telerobotics::protos::ListDevicesResponse>(
          [this] { return this->List(); }));
    }
    ~ExperimentalWithCallbackMethod_List() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status List(::grpc::ServerContext* context, const ::telerobotics::protos::ListDevicesRequest* request, ::grpc::ServerWriter< ::telerobotics::protos::ListDevicesResponse>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::experimental::ServerWriteReactor< ::telerobotics::protos::ListDevicesRequest, ::telerobotics::protos::ListDevicesResponse>* List() {
      return new ::grpc::internal::UnimplementedWriteReactor<
        ::telerobotics::protos::ListDevicesRequest, ::telerobotics::protos::ListDevicesResponse>;}
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_Delete : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_Delete() {
      ::grpc::Service::experimental().MarkMethodCallback(4,
        new ::grpc::internal::CallbackUnaryHandler< ::telerobotics::protos::DeleteDeviceRequest, ::telerobotics::protos::DeleteDeviceResponse>(
          [this](::grpc::ServerContext* context,
                 const ::telerobotics::protos::DeleteDeviceRequest* request,
                 ::telerobotics::protos::DeleteDeviceResponse* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->Delete(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithCallbackMethod_Delete() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Delete(::grpc::ServerContext* context, const ::telerobotics::protos::DeleteDeviceRequest* request, ::telerobotics::protos::DeleteDeviceResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void Delete(::grpc::ServerContext* context, const ::telerobotics::protos::DeleteDeviceRequest* request, ::telerobotics::protos::DeleteDeviceResponse* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  typedef ExperimentalWithCallbackMethod_Create<ExperimentalWithCallbackMethod_Get<ExperimentalWithCallbackMethod_Update<ExperimentalWithCallbackMethod_List<ExperimentalWithCallbackMethod_Delete<Service > > > > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_Create : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_Create() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_Create() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Create(::grpc::ServerContext* context, const ::telerobotics::protos::CreateDeviceRequest* request, ::telerobotics::protos::CreateDeviceResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Get : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_Get() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_Get() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Get(::grpc::ServerContext* context, const ::telerobotics::protos::GetDeviceRequest* request, ::telerobotics::protos::GetDeviceResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Update : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_Update() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_Update() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Update(::grpc::ServerContext* context, const ::telerobotics::protos::UpdateDeviceRequest* request, ::telerobotics::protos::UpdateDeviceResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_List : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_List() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_List() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status List(::grpc::ServerContext* context, const ::telerobotics::protos::ListDevicesRequest* request, ::grpc::ServerWriter< ::telerobotics::protos::ListDevicesResponse>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Delete : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_Delete() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_Delete() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Delete(::grpc::ServerContext* context, const ::telerobotics::protos::DeleteDeviceRequest* request, ::telerobotics::protos::DeleteDeviceResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_Create : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_Create() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_Create() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Create(::grpc::ServerContext* context, const ::telerobotics::protos::CreateDeviceRequest* request, ::telerobotics::protos::CreateDeviceResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreate(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Get : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_Get() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_Get() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Get(::grpc::ServerContext* context, const ::telerobotics::protos::GetDeviceRequest* request, ::telerobotics::protos::GetDeviceResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGet(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Update : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_Update() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_Update() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Update(::grpc::ServerContext* context, const ::telerobotics::protos::UpdateDeviceRequest* request, ::telerobotics::protos::UpdateDeviceResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdate(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_List : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_List() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_List() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status List(::grpc::ServerContext* context, const ::telerobotics::protos::ListDevicesRequest* request, ::grpc::ServerWriter< ::telerobotics::protos::ListDevicesResponse>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestList(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(3, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Delete : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_Delete() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_Delete() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Delete(::grpc::ServerContext* context, const ::telerobotics::protos::DeleteDeviceRequest* request, ::telerobotics::protos::DeleteDeviceResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDelete(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_Create : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_Create() {
      ::grpc::Service::experimental().MarkMethodRawCallback(0,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->Create(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_Create() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Create(::grpc::ServerContext* context, const ::telerobotics::protos::CreateDeviceRequest* request, ::telerobotics::protos::CreateDeviceResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void Create(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_Get : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_Get() {
      ::grpc::Service::experimental().MarkMethodRawCallback(1,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->Get(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_Get() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Get(::grpc::ServerContext* context, const ::telerobotics::protos::GetDeviceRequest* request, ::telerobotics::protos::GetDeviceResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void Get(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_Update : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_Update() {
      ::grpc::Service::experimental().MarkMethodRawCallback(2,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->Update(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_Update() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Update(::grpc::ServerContext* context, const ::telerobotics::protos::UpdateDeviceRequest* request, ::telerobotics::protos::UpdateDeviceResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void Update(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_List : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_List() {
      ::grpc::Service::experimental().MarkMethodRawCallback(3,
        new ::grpc::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this] { return this->List(); }));
    }
    ~ExperimentalWithRawCallbackMethod_List() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status List(::grpc::ServerContext* context, const ::telerobotics::protos::ListDevicesRequest* request, ::grpc::ServerWriter< ::telerobotics::protos::ListDevicesResponse>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::experimental::ServerWriteReactor< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* List() {
      return new ::grpc::internal::UnimplementedWriteReactor<
        ::grpc::ByteBuffer, ::grpc::ByteBuffer>;}
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_Delete : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_Delete() {
      ::grpc::Service::experimental().MarkMethodRawCallback(4,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->Delete(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_Delete() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Delete(::grpc::ServerContext* context, const ::telerobotics::protos::DeleteDeviceRequest* request, ::telerobotics::protos::DeleteDeviceResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void Delete(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Create : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_Create() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler< ::telerobotics::protos::CreateDeviceRequest, ::telerobotics::protos::CreateDeviceResponse>(std::bind(&WithStreamedUnaryMethod_Create<BaseClass>::StreamedCreate, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_Create() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Create(::grpc::ServerContext* context, const ::telerobotics::protos::CreateDeviceRequest* request, ::telerobotics::protos::CreateDeviceResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCreate(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::telerobotics::protos::CreateDeviceRequest,::telerobotics::protos::CreateDeviceResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Get : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_Get() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler< ::telerobotics::protos::GetDeviceRequest, ::telerobotics::protos::GetDeviceResponse>(std::bind(&WithStreamedUnaryMethod_Get<BaseClass>::StreamedGet, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_Get() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Get(::grpc::ServerContext* context, const ::telerobotics::protos::GetDeviceRequest* request, ::telerobotics::protos::GetDeviceResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGet(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::telerobotics::protos::GetDeviceRequest,::telerobotics::protos::GetDeviceResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Update : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_Update() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler< ::telerobotics::protos::UpdateDeviceRequest, ::telerobotics::protos::UpdateDeviceResponse>(std::bind(&WithStreamedUnaryMethod_Update<BaseClass>::StreamedUpdate, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_Update() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Update(::grpc::ServerContext* context, const ::telerobotics::protos::UpdateDeviceRequest* request, ::telerobotics::protos::UpdateDeviceResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedUpdate(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::telerobotics::protos::UpdateDeviceRequest,::telerobotics::protos::UpdateDeviceResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Delete : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_Delete() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler< ::telerobotics::protos::DeleteDeviceRequest, ::telerobotics::protos::DeleteDeviceResponse>(std::bind(&WithStreamedUnaryMethod_Delete<BaseClass>::StreamedDelete, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_Delete() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Delete(::grpc::ServerContext* context, const ::telerobotics::protos::DeleteDeviceRequest* request, ::telerobotics::protos::DeleteDeviceResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDelete(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::telerobotics::protos::DeleteDeviceRequest,::telerobotics::protos::DeleteDeviceResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_Create<WithStreamedUnaryMethod_Get<WithStreamedUnaryMethod_Update<WithStreamedUnaryMethod_Delete<Service > > > > StreamedUnaryService;
  template <class BaseClass>
  class WithSplitStreamingMethod_List : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithSplitStreamingMethod_List() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::SplitServerStreamingHandler< ::telerobotics::protos::ListDevicesRequest, ::telerobotics::protos::ListDevicesResponse>(std::bind(&WithSplitStreamingMethod_List<BaseClass>::StreamedList, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithSplitStreamingMethod_List() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status List(::grpc::ServerContext* context, const ::telerobotics::protos::ListDevicesRequest* request, ::grpc::ServerWriter< ::telerobotics::protos::ListDevicesResponse>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedList(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::telerobotics::protos::ListDevicesRequest,::telerobotics::protos::ListDevicesResponse>* server_split_streamer) = 0;
  };
  typedef WithSplitStreamingMethod_List<Service > SplitStreamedService;
  typedef WithStreamedUnaryMethod_Create<WithStreamedUnaryMethod_Get<WithStreamedUnaryMethod_Update<WithSplitStreamingMethod_List<WithStreamedUnaryMethod_Delete<Service > > > > > StreamedService;
};

}  // namespace protos
}  // namespace telerobotics


#endif  // GRPC_device_5fservice_2eproto__INCLUDED
