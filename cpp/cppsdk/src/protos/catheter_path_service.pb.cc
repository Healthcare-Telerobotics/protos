// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: catheter_path_service.proto

#include "catheter_path_service.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

extern PROTOBUF_INTERNAL_EXPORT_catheter_5fpath_5fservice_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_CatheterPath_catheter_5fpath_5fservice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_common_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_CatheterCoordinates_common_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2ftimestamp_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto;
namespace github {
namespace com {
namespace pyrus {
namespace platform {
namespace protos {
class CreateCatheterPathRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CreateCatheterPathRequest> _instance;
} _CreateCatheterPathRequest_default_instance_;
class CreateCatheterPathResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CreateCatheterPathResponse> _instance;
} _CreateCatheterPathResponse_default_instance_;
class GetCatheterPathRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GetCatheterPathRequest> _instance;
} _GetCatheterPathRequest_default_instance_;
class GetCatheterPathResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GetCatheterPathResponse> _instance;
} _GetCatheterPathResponse_default_instance_;
class GetCoordinatesCatheterPathRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GetCoordinatesCatheterPathRequest> _instance;
} _GetCoordinatesCatheterPathRequest_default_instance_;
class GetCoordinatesCatheterPathResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GetCoordinatesCatheterPathResponse> _instance;
} _GetCoordinatesCatheterPathResponse_default_instance_;
class ListCatheterPathsRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ListCatheterPathsRequest> _instance;
} _ListCatheterPathsRequest_default_instance_;
class ListCatheterPathsResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ListCatheterPathsResponse> _instance;
} _ListCatheterPathsResponse_default_instance_;
class CatheterPathDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CatheterPath> _instance;
} _CatheterPath_default_instance_;
}  // namespace protos
}  // namespace platform
}  // namespace pyrus
}  // namespace com
}  // namespace github
static void InitDefaultsCreateCatheterPathRequest_catheter_5fpath_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::github::com::pyrus::platform::protos::_CreateCatheterPathRequest_default_instance_;
    new (ptr) ::github::com::pyrus::platform::protos::CreateCatheterPathRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::github::com::pyrus::platform::protos::CreateCatheterPathRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CreateCatheterPathRequest_catheter_5fpath_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCreateCatheterPathRequest_catheter_5fpath_5fservice_2eproto}, {
      &scc_info_CatheterPath_catheter_5fpath_5fservice_2eproto.base,}};

static void InitDefaultsCreateCatheterPathResponse_catheter_5fpath_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::github::com::pyrus::platform::protos::_CreateCatheterPathResponse_default_instance_;
    new (ptr) ::github::com::pyrus::platform::protos::CreateCatheterPathResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::github::com::pyrus::platform::protos::CreateCatheterPathResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CreateCatheterPathResponse_catheter_5fpath_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCreateCatheterPathResponse_catheter_5fpath_5fservice_2eproto}, {}};

static void InitDefaultsGetCatheterPathRequest_catheter_5fpath_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::github::com::pyrus::platform::protos::_GetCatheterPathRequest_default_instance_;
    new (ptr) ::github::com::pyrus::platform::protos::GetCatheterPathRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::github::com::pyrus::platform::protos::GetCatheterPathRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_GetCatheterPathRequest_catheter_5fpath_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsGetCatheterPathRequest_catheter_5fpath_5fservice_2eproto}, {}};

static void InitDefaultsGetCatheterPathResponse_catheter_5fpath_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::github::com::pyrus::platform::protos::_GetCatheterPathResponse_default_instance_;
    new (ptr) ::github::com::pyrus::platform::protos::GetCatheterPathResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::github::com::pyrus::platform::protos::GetCatheterPathResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_GetCatheterPathResponse_catheter_5fpath_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsGetCatheterPathResponse_catheter_5fpath_5fservice_2eproto}, {
      &scc_info_CatheterPath_catheter_5fpath_5fservice_2eproto.base,}};

static void InitDefaultsGetCoordinatesCatheterPathRequest_catheter_5fpath_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::github::com::pyrus::platform::protos::_GetCoordinatesCatheterPathRequest_default_instance_;
    new (ptr) ::github::com::pyrus::platform::protos::GetCoordinatesCatheterPathRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::github::com::pyrus::platform::protos::GetCoordinatesCatheterPathRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_GetCoordinatesCatheterPathRequest_catheter_5fpath_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsGetCoordinatesCatheterPathRequest_catheter_5fpath_5fservice_2eproto}, {}};

static void InitDefaultsGetCoordinatesCatheterPathResponse_catheter_5fpath_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::github::com::pyrus::platform::protos::_GetCoordinatesCatheterPathResponse_default_instance_;
    new (ptr) ::github::com::pyrus::platform::protos::GetCoordinatesCatheterPathResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::github::com::pyrus::platform::protos::GetCoordinatesCatheterPathResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_GetCoordinatesCatheterPathResponse_catheter_5fpath_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsGetCoordinatesCatheterPathResponse_catheter_5fpath_5fservice_2eproto}, {
      &scc_info_CatheterCoordinates_common_2eproto.base,}};

static void InitDefaultsListCatheterPathsRequest_catheter_5fpath_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::github::com::pyrus::platform::protos::_ListCatheterPathsRequest_default_instance_;
    new (ptr) ::github::com::pyrus::platform::protos::ListCatheterPathsRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::github::com::pyrus::platform::protos::ListCatheterPathsRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ListCatheterPathsRequest_catheter_5fpath_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsListCatheterPathsRequest_catheter_5fpath_5fservice_2eproto}, {}};

static void InitDefaultsListCatheterPathsResponse_catheter_5fpath_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::github::com::pyrus::platform::protos::_ListCatheterPathsResponse_default_instance_;
    new (ptr) ::github::com::pyrus::platform::protos::ListCatheterPathsResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::github::com::pyrus::platform::protos::ListCatheterPathsResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_ListCatheterPathsResponse_catheter_5fpath_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsListCatheterPathsResponse_catheter_5fpath_5fservice_2eproto}, {
      &scc_info_CatheterPath_catheter_5fpath_5fservice_2eproto.base,}};

static void InitDefaultsCatheterPath_catheter_5fpath_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::github::com::pyrus::platform::protos::_CatheterPath_default_instance_;
    new (ptr) ::github::com::pyrus::platform::protos::CatheterPath();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::github::com::pyrus::platform::protos::CatheterPath::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CatheterPath_catheter_5fpath_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCatheterPath_catheter_5fpath_5fservice_2eproto}, {
      &scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto.base,}};

void InitDefaults_catheter_5fpath_5fservice_2eproto() {
  ::google::protobuf::internal::InitSCC(&scc_info_CreateCatheterPathRequest_catheter_5fpath_5fservice_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CreateCatheterPathResponse_catheter_5fpath_5fservice_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GetCatheterPathRequest_catheter_5fpath_5fservice_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GetCatheterPathResponse_catheter_5fpath_5fservice_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GetCoordinatesCatheterPathRequest_catheter_5fpath_5fservice_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GetCoordinatesCatheterPathResponse_catheter_5fpath_5fservice_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ListCatheterPathsRequest_catheter_5fpath_5fservice_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ListCatheterPathsResponse_catheter_5fpath_5fservice_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CatheterPath_catheter_5fpath_5fservice_2eproto.base);
}

::google::protobuf::Metadata file_level_metadata_catheter_5fpath_5fservice_2eproto[9];
constexpr ::google::protobuf::EnumDescriptor const** file_level_enum_descriptors_catheter_5fpath_5fservice_2eproto = nullptr;
constexpr ::google::protobuf::ServiceDescriptor const** file_level_service_descriptors_catheter_5fpath_5fservice_2eproto = nullptr;

const ::google::protobuf::uint32 TableStruct_catheter_5fpath_5fservice_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::github::com::pyrus::platform::protos::CreateCatheterPathRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::github::com::pyrus::platform::protos::CreateCatheterPathRequest, path_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::github::com::pyrus::platform::protos::CreateCatheterPathResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::github::com::pyrus::platform::protos::CreateCatheterPathResponse, id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::github::com::pyrus::platform::protos::GetCatheterPathRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::github::com::pyrus::platform::protos::GetCatheterPathRequest, id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::github::com::pyrus::platform::protos::GetCatheterPathResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::github::com::pyrus::platform::protos::GetCatheterPathResponse, path_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::github::com::pyrus::platform::protos::GetCoordinatesCatheterPathRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::github::com::pyrus::platform::protos::GetCoordinatesCatheterPathRequest, id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::github::com::pyrus::platform::protos::GetCoordinatesCatheterPathResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::github::com::pyrus::platform::protos::GetCoordinatesCatheterPathResponse, coordinate_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::github::com::pyrus::platform::protos::ListCatheterPathsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::github::com::pyrus::platform::protos::ListCatheterPathsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::github::com::pyrus::platform::protos::ListCatheterPathsResponse, path_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::github::com::pyrus::platform::protos::CatheterPath, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::github::com::pyrus::platform::protos::CatheterPath, id_),
  PROTOBUF_FIELD_OFFSET(::github::com::pyrus::platform::protos::CatheterPath, startcatheterdataid_),
  PROTOBUF_FIELD_OFFSET(::github::com::pyrus::platform::protos::CatheterPath, endcatheterdataid_),
  PROTOBUF_FIELD_OFFSET(::github::com::pyrus::platform::protos::CatheterPath, name_),
  PROTOBUF_FIELD_OFFSET(::github::com::pyrus::platform::protos::CatheterPath, created_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::github::com::pyrus::platform::protos::CreateCatheterPathRequest)},
  { 6, -1, sizeof(::github::com::pyrus::platform::protos::CreateCatheterPathResponse)},
  { 12, -1, sizeof(::github::com::pyrus::platform::protos::GetCatheterPathRequest)},
  { 18, -1, sizeof(::github::com::pyrus::platform::protos::GetCatheterPathResponse)},
  { 24, -1, sizeof(::github::com::pyrus::platform::protos::GetCoordinatesCatheterPathRequest)},
  { 30, -1, sizeof(::github::com::pyrus::platform::protos::GetCoordinatesCatheterPathResponse)},
  { 36, -1, sizeof(::github::com::pyrus::platform::protos::ListCatheterPathsRequest)},
  { 41, -1, sizeof(::github::com::pyrus::platform::protos::ListCatheterPathsResponse)},
  { 47, -1, sizeof(::github::com::pyrus::platform::protos::CatheterPath)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::github::com::pyrus::platform::protos::_CreateCatheterPathRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::github::com::pyrus::platform::protos::_CreateCatheterPathResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::github::com::pyrus::platform::protos::_GetCatheterPathRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::github::com::pyrus::platform::protos::_GetCatheterPathResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::github::com::pyrus::platform::protos::_GetCoordinatesCatheterPathRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::github::com::pyrus::platform::protos::_GetCoordinatesCatheterPathResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::github::com::pyrus::platform::protos::_ListCatheterPathsRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::github::com::pyrus::platform::protos::_ListCatheterPathsResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::github::com::pyrus::platform::protos::_CatheterPath_default_instance_),
};

::google::protobuf::internal::AssignDescriptorsTable assign_descriptors_table_catheter_5fpath_5fservice_2eproto = {
  {}, AddDescriptors_catheter_5fpath_5fservice_2eproto, "catheter_path_service.proto", schemas,
  file_default_instances, TableStruct_catheter_5fpath_5fservice_2eproto::offsets,
  file_level_metadata_catheter_5fpath_5fservice_2eproto, 9, file_level_enum_descriptors_catheter_5fpath_5fservice_2eproto, file_level_service_descriptors_catheter_5fpath_5fservice_2eproto,
};

const char descriptor_table_protodef_catheter_5fpath_5fservice_2eproto[] =
  "\n\033catheter_path_service.proto\022 github.co"
  "m.pyrus.platform.protos\032\014common.proto\032\037g"
  "oogle/protobuf/timestamp.proto\"Y\n\031Create"
  "CatheterPathRequest\022<\n\004path\030\001 \001(\0132..gith"
  "ub.com.pyrus.platform.protos.CatheterPat"
  "h\"(\n\032CreateCatheterPathResponse\022\n\n\002id\030\001 "
  "\001(\004\"$\n\026GetCatheterPathRequest\022\n\n\002id\030\001 \001("
  "\004\"W\n\027GetCatheterPathResponse\022<\n\004path\030\001 \001"
  "(\0132..github.com.pyrus.platform.protos.Ca"
  "theterPath\"/\n!GetCoordinatesCatheterPath"
  "Request\022\n\n\002id\030\001 \001(\004\"o\n\"GetCoordinatesCat"
  "heterPathResponse\022I\n\ncoordinate\030\001 \001(\01325."
  "github.com.pyrus.platform.protos.Cathete"
  "rCoordinates\"\032\n\030ListCatheterPathsRequest"
  "\"Y\n\031ListCatheterPathsResponse\022<\n\004path\030\001 "
  "\001(\0132..github.com.pyrus.platform.protos.C"
  "atheterPath\"\215\001\n\014CatheterPath\022\n\n\002id\030\001 \001(\004"
  "\022\033\n\023startCatheterDataID\030\002 \001(\004\022\031\n\021endCath"
  "eterDataID\030\003 \001(\004\022\014\n\004name\030\004 \001(\t\022+\n\007create"
  "d\030\005 \001(\0132\032.google.protobuf.Timestamp2\273\004\n\023"
  "CatheterPathService\022\203\001\n\006Create\022;.github."
  "com.pyrus.platform.protos.CreateCatheter"
  "PathRequest\032<.github.com.pyrus.platform."
  "protos.CreateCatheterPathResponse\022z\n\003Get"
  "\0228.github.com.pyrus.platform.protos.GetC"
  "atheterPathRequest\0329.github.com.pyrus.pl"
  "atform.protos.GetCatheterPathResponse\022\235\001"
  "\n\016GetCoordinates\022C.github.com.pyrus.plat"
  "form.protos.GetCoordinatesCatheterPathRe"
  "quest\032D.github.com.pyrus.platform.protos"
  ".GetCoordinatesCatheterPathResponse0\001\022\201\001"
  "\n\004List\022:.github.com.pyrus.platform.proto"
  "s.ListCatheterPathsRequest\032;.github.com."
  "pyrus.platform.protos.ListCatheterPathsR"
  "esponse0\001B\"Z\010platform\252\002\025Pyrus.Platform.P"
  "rotosb\006proto3"
  ;
::google::protobuf::internal::DescriptorTable descriptor_table_catheter_5fpath_5fservice_2eproto = {
  false, InitDefaults_catheter_5fpath_5fservice_2eproto, 
  descriptor_table_protodef_catheter_5fpath_5fservice_2eproto,
  "catheter_path_service.proto", &assign_descriptors_table_catheter_5fpath_5fservice_2eproto, 1413,
};

void AddDescriptors_catheter_5fpath_5fservice_2eproto() {
  static constexpr ::google::protobuf::internal::InitFunc deps[2] =
  {
    ::AddDescriptors_common_2eproto,
    ::AddDescriptors_google_2fprotobuf_2ftimestamp_2eproto,
  };
 ::google::protobuf::internal::AddDescriptors(&descriptor_table_catheter_5fpath_5fservice_2eproto, deps, 2);
}

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_catheter_5fpath_5fservice_2eproto = []() { AddDescriptors_catheter_5fpath_5fservice_2eproto(); return true; }();
namespace github {
namespace com {
namespace pyrus {
namespace platform {
namespace protos {

// ===================================================================

void CreateCatheterPathRequest::InitAsDefaultInstance() {
  ::github::com::pyrus::platform::protos::_CreateCatheterPathRequest_default_instance_._instance.get_mutable()->path_ = const_cast< ::github::com::pyrus::platform::protos::CatheterPath*>(
      ::github::com::pyrus::platform::protos::CatheterPath::internal_default_instance());
}
class CreateCatheterPathRequest::HasBitSetters {
 public:
  static const ::github::com::pyrus::platform::protos::CatheterPath& path(const CreateCatheterPathRequest* msg);
};

const ::github::com::pyrus::platform::protos::CatheterPath&
CreateCatheterPathRequest::HasBitSetters::path(const CreateCatheterPathRequest* msg) {
  return *msg->path_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CreateCatheterPathRequest::kPathFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CreateCatheterPathRequest::CreateCatheterPathRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:github.com.pyrus.platform.protos.CreateCatheterPathRequest)
}
CreateCatheterPathRequest::CreateCatheterPathRequest(const CreateCatheterPathRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_path()) {
    path_ = new ::github::com::pyrus::platform::protos::CatheterPath(*from.path_);
  } else {
    path_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:github.com.pyrus.platform.protos.CreateCatheterPathRequest)
}

void CreateCatheterPathRequest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CreateCatheterPathRequest_catheter_5fpath_5fservice_2eproto.base);
  path_ = nullptr;
}

CreateCatheterPathRequest::~CreateCatheterPathRequest() {
  // @@protoc_insertion_point(destructor:github.com.pyrus.platform.protos.CreateCatheterPathRequest)
  SharedDtor();
}

void CreateCatheterPathRequest::SharedDtor() {
  if (this != internal_default_instance()) delete path_;
}

void CreateCatheterPathRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CreateCatheterPathRequest& CreateCatheterPathRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CreateCatheterPathRequest_catheter_5fpath_5fservice_2eproto.base);
  return *internal_default_instance();
}


void CreateCatheterPathRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:github.com.pyrus.platform.protos.CreateCatheterPathRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && path_ != nullptr) {
    delete path_;
  }
  path_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CreateCatheterPathRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CreateCatheterPathRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .github.com.pyrus.platform.protos.CatheterPath path = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::github::com::pyrus::platform::protos::CatheterPath::_InternalParse;
        object = msg->mutable_path();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CreateCatheterPathRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:github.com.pyrus.platform.protos.CreateCatheterPathRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .github.com.pyrus.platform.protos.CatheterPath path = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_path()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:github.com.pyrus.platform.protos.CreateCatheterPathRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:github.com.pyrus.platform.protos.CreateCatheterPathRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CreateCatheterPathRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:github.com.pyrus.platform.protos.CreateCatheterPathRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .github.com.pyrus.platform.protos.CatheterPath path = 1;
  if (this->has_path()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::path(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:github.com.pyrus.platform.protos.CreateCatheterPathRequest)
}

::google::protobuf::uint8* CreateCatheterPathRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:github.com.pyrus.platform.protos.CreateCatheterPathRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .github.com.pyrus.platform.protos.CatheterPath path = 1;
  if (this->has_path()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::path(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:github.com.pyrus.platform.protos.CreateCatheterPathRequest)
  return target;
}

size_t CreateCatheterPathRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:github.com.pyrus.platform.protos.CreateCatheterPathRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .github.com.pyrus.platform.protos.CatheterPath path = 1;
  if (this->has_path()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *path_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CreateCatheterPathRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:github.com.pyrus.platform.protos.CreateCatheterPathRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CreateCatheterPathRequest* source =
      ::google::protobuf::DynamicCastToGenerated<CreateCatheterPathRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:github.com.pyrus.platform.protos.CreateCatheterPathRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:github.com.pyrus.platform.protos.CreateCatheterPathRequest)
    MergeFrom(*source);
  }
}

void CreateCatheterPathRequest::MergeFrom(const CreateCatheterPathRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:github.com.pyrus.platform.protos.CreateCatheterPathRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_path()) {
    mutable_path()->::github::com::pyrus::platform::protos::CatheterPath::MergeFrom(from.path());
  }
}

void CreateCatheterPathRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:github.com.pyrus.platform.protos.CreateCatheterPathRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateCatheterPathRequest::CopyFrom(const CreateCatheterPathRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:github.com.pyrus.platform.protos.CreateCatheterPathRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateCatheterPathRequest::IsInitialized() const {
  return true;
}

void CreateCatheterPathRequest::Swap(CreateCatheterPathRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CreateCatheterPathRequest::InternalSwap(CreateCatheterPathRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(path_, other->path_);
}

::google::protobuf::Metadata CreateCatheterPathRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_catheter_5fpath_5fservice_2eproto);
  return ::file_level_metadata_catheter_5fpath_5fservice_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CreateCatheterPathResponse::InitAsDefaultInstance() {
}
class CreateCatheterPathResponse::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CreateCatheterPathResponse::kIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CreateCatheterPathResponse::CreateCatheterPathResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:github.com.pyrus.platform.protos.CreateCatheterPathResponse)
}
CreateCatheterPathResponse::CreateCatheterPathResponse(const CreateCatheterPathResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:github.com.pyrus.platform.protos.CreateCatheterPathResponse)
}

void CreateCatheterPathResponse::SharedCtor() {
  id_ = PROTOBUF_ULONGLONG(0);
}

CreateCatheterPathResponse::~CreateCatheterPathResponse() {
  // @@protoc_insertion_point(destructor:github.com.pyrus.platform.protos.CreateCatheterPathResponse)
  SharedDtor();
}

void CreateCatheterPathResponse::SharedDtor() {
}

void CreateCatheterPathResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CreateCatheterPathResponse& CreateCatheterPathResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CreateCatheterPathResponse_catheter_5fpath_5fservice_2eproto.base);
  return *internal_default_instance();
}


void CreateCatheterPathResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:github.com.pyrus.platform.protos.CreateCatheterPathResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CreateCatheterPathResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CreateCatheterPathResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // uint64 id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CreateCatheterPathResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:github.com.pyrus.platform.protos.CreateCatheterPathResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:github.com.pyrus.platform.protos.CreateCatheterPathResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:github.com.pyrus.platform.protos.CreateCatheterPathResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CreateCatheterPathResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:github.com.pyrus.platform.protos.CreateCatheterPathResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 id = 1;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:github.com.pyrus.platform.protos.CreateCatheterPathResponse)
}

::google::protobuf::uint8* CreateCatheterPathResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:github.com.pyrus.platform.protos.CreateCatheterPathResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 id = 1;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:github.com.pyrus.platform.protos.CreateCatheterPathResponse)
  return target;
}

size_t CreateCatheterPathResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:github.com.pyrus.platform.protos.CreateCatheterPathResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CreateCatheterPathResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:github.com.pyrus.platform.protos.CreateCatheterPathResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CreateCatheterPathResponse* source =
      ::google::protobuf::DynamicCastToGenerated<CreateCatheterPathResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:github.com.pyrus.platform.protos.CreateCatheterPathResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:github.com.pyrus.platform.protos.CreateCatheterPathResponse)
    MergeFrom(*source);
  }
}

void CreateCatheterPathResponse::MergeFrom(const CreateCatheterPathResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:github.com.pyrus.platform.protos.CreateCatheterPathResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id() != 0) {
    set_id(from.id());
  }
}

void CreateCatheterPathResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:github.com.pyrus.platform.protos.CreateCatheterPathResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateCatheterPathResponse::CopyFrom(const CreateCatheterPathResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:github.com.pyrus.platform.protos.CreateCatheterPathResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateCatheterPathResponse::IsInitialized() const {
  return true;
}

void CreateCatheterPathResponse::Swap(CreateCatheterPathResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CreateCatheterPathResponse::InternalSwap(CreateCatheterPathResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(id_, other->id_);
}

::google::protobuf::Metadata CreateCatheterPathResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_catheter_5fpath_5fservice_2eproto);
  return ::file_level_metadata_catheter_5fpath_5fservice_2eproto[kIndexInFileMessages];
}


// ===================================================================

void GetCatheterPathRequest::InitAsDefaultInstance() {
}
class GetCatheterPathRequest::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetCatheterPathRequest::kIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetCatheterPathRequest::GetCatheterPathRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:github.com.pyrus.platform.protos.GetCatheterPathRequest)
}
GetCatheterPathRequest::GetCatheterPathRequest(const GetCatheterPathRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:github.com.pyrus.platform.protos.GetCatheterPathRequest)
}

void GetCatheterPathRequest::SharedCtor() {
  id_ = PROTOBUF_ULONGLONG(0);
}

GetCatheterPathRequest::~GetCatheterPathRequest() {
  // @@protoc_insertion_point(destructor:github.com.pyrus.platform.protos.GetCatheterPathRequest)
  SharedDtor();
}

void GetCatheterPathRequest::SharedDtor() {
}

void GetCatheterPathRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetCatheterPathRequest& GetCatheterPathRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_GetCatheterPathRequest_catheter_5fpath_5fservice_2eproto.base);
  return *internal_default_instance();
}


void GetCatheterPathRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:github.com.pyrus.platform.protos.GetCatheterPathRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GetCatheterPathRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<GetCatheterPathRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // uint64 id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GetCatheterPathRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:github.com.pyrus.platform.protos.GetCatheterPathRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:github.com.pyrus.platform.protos.GetCatheterPathRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:github.com.pyrus.platform.protos.GetCatheterPathRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GetCatheterPathRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:github.com.pyrus.platform.protos.GetCatheterPathRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 id = 1;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:github.com.pyrus.platform.protos.GetCatheterPathRequest)
}

::google::protobuf::uint8* GetCatheterPathRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:github.com.pyrus.platform.protos.GetCatheterPathRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 id = 1;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:github.com.pyrus.platform.protos.GetCatheterPathRequest)
  return target;
}

size_t GetCatheterPathRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:github.com.pyrus.platform.protos.GetCatheterPathRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetCatheterPathRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:github.com.pyrus.platform.protos.GetCatheterPathRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetCatheterPathRequest* source =
      ::google::protobuf::DynamicCastToGenerated<GetCatheterPathRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:github.com.pyrus.platform.protos.GetCatheterPathRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:github.com.pyrus.platform.protos.GetCatheterPathRequest)
    MergeFrom(*source);
  }
}

void GetCatheterPathRequest::MergeFrom(const GetCatheterPathRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:github.com.pyrus.platform.protos.GetCatheterPathRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id() != 0) {
    set_id(from.id());
  }
}

void GetCatheterPathRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:github.com.pyrus.platform.protos.GetCatheterPathRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetCatheterPathRequest::CopyFrom(const GetCatheterPathRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:github.com.pyrus.platform.protos.GetCatheterPathRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetCatheterPathRequest::IsInitialized() const {
  return true;
}

void GetCatheterPathRequest::Swap(GetCatheterPathRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetCatheterPathRequest::InternalSwap(GetCatheterPathRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(id_, other->id_);
}

::google::protobuf::Metadata GetCatheterPathRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_catheter_5fpath_5fservice_2eproto);
  return ::file_level_metadata_catheter_5fpath_5fservice_2eproto[kIndexInFileMessages];
}


// ===================================================================

void GetCatheterPathResponse::InitAsDefaultInstance() {
  ::github::com::pyrus::platform::protos::_GetCatheterPathResponse_default_instance_._instance.get_mutable()->path_ = const_cast< ::github::com::pyrus::platform::protos::CatheterPath*>(
      ::github::com::pyrus::platform::protos::CatheterPath::internal_default_instance());
}
class GetCatheterPathResponse::HasBitSetters {
 public:
  static const ::github::com::pyrus::platform::protos::CatheterPath& path(const GetCatheterPathResponse* msg);
};

const ::github::com::pyrus::platform::protos::CatheterPath&
GetCatheterPathResponse::HasBitSetters::path(const GetCatheterPathResponse* msg) {
  return *msg->path_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetCatheterPathResponse::kPathFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetCatheterPathResponse::GetCatheterPathResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:github.com.pyrus.platform.protos.GetCatheterPathResponse)
}
GetCatheterPathResponse::GetCatheterPathResponse(const GetCatheterPathResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_path()) {
    path_ = new ::github::com::pyrus::platform::protos::CatheterPath(*from.path_);
  } else {
    path_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:github.com.pyrus.platform.protos.GetCatheterPathResponse)
}

void GetCatheterPathResponse::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_GetCatheterPathResponse_catheter_5fpath_5fservice_2eproto.base);
  path_ = nullptr;
}

GetCatheterPathResponse::~GetCatheterPathResponse() {
  // @@protoc_insertion_point(destructor:github.com.pyrus.platform.protos.GetCatheterPathResponse)
  SharedDtor();
}

void GetCatheterPathResponse::SharedDtor() {
  if (this != internal_default_instance()) delete path_;
}

void GetCatheterPathResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetCatheterPathResponse& GetCatheterPathResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_GetCatheterPathResponse_catheter_5fpath_5fservice_2eproto.base);
  return *internal_default_instance();
}


void GetCatheterPathResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:github.com.pyrus.platform.protos.GetCatheterPathResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && path_ != nullptr) {
    delete path_;
  }
  path_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GetCatheterPathResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<GetCatheterPathResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .github.com.pyrus.platform.protos.CatheterPath path = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::github::com::pyrus::platform::protos::CatheterPath::_InternalParse;
        object = msg->mutable_path();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GetCatheterPathResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:github.com.pyrus.platform.protos.GetCatheterPathResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .github.com.pyrus.platform.protos.CatheterPath path = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_path()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:github.com.pyrus.platform.protos.GetCatheterPathResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:github.com.pyrus.platform.protos.GetCatheterPathResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GetCatheterPathResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:github.com.pyrus.platform.protos.GetCatheterPathResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .github.com.pyrus.platform.protos.CatheterPath path = 1;
  if (this->has_path()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::path(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:github.com.pyrus.platform.protos.GetCatheterPathResponse)
}

::google::protobuf::uint8* GetCatheterPathResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:github.com.pyrus.platform.protos.GetCatheterPathResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .github.com.pyrus.platform.protos.CatheterPath path = 1;
  if (this->has_path()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::path(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:github.com.pyrus.platform.protos.GetCatheterPathResponse)
  return target;
}

size_t GetCatheterPathResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:github.com.pyrus.platform.protos.GetCatheterPathResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .github.com.pyrus.platform.protos.CatheterPath path = 1;
  if (this->has_path()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *path_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetCatheterPathResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:github.com.pyrus.platform.protos.GetCatheterPathResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetCatheterPathResponse* source =
      ::google::protobuf::DynamicCastToGenerated<GetCatheterPathResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:github.com.pyrus.platform.protos.GetCatheterPathResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:github.com.pyrus.platform.protos.GetCatheterPathResponse)
    MergeFrom(*source);
  }
}

void GetCatheterPathResponse::MergeFrom(const GetCatheterPathResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:github.com.pyrus.platform.protos.GetCatheterPathResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_path()) {
    mutable_path()->::github::com::pyrus::platform::protos::CatheterPath::MergeFrom(from.path());
  }
}

void GetCatheterPathResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:github.com.pyrus.platform.protos.GetCatheterPathResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetCatheterPathResponse::CopyFrom(const GetCatheterPathResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:github.com.pyrus.platform.protos.GetCatheterPathResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetCatheterPathResponse::IsInitialized() const {
  return true;
}

void GetCatheterPathResponse::Swap(GetCatheterPathResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetCatheterPathResponse::InternalSwap(GetCatheterPathResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(path_, other->path_);
}

::google::protobuf::Metadata GetCatheterPathResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_catheter_5fpath_5fservice_2eproto);
  return ::file_level_metadata_catheter_5fpath_5fservice_2eproto[kIndexInFileMessages];
}


// ===================================================================

void GetCoordinatesCatheterPathRequest::InitAsDefaultInstance() {
}
class GetCoordinatesCatheterPathRequest::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetCoordinatesCatheterPathRequest::kIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetCoordinatesCatheterPathRequest::GetCoordinatesCatheterPathRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:github.com.pyrus.platform.protos.GetCoordinatesCatheterPathRequest)
}
GetCoordinatesCatheterPathRequest::GetCoordinatesCatheterPathRequest(const GetCoordinatesCatheterPathRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:github.com.pyrus.platform.protos.GetCoordinatesCatheterPathRequest)
}

void GetCoordinatesCatheterPathRequest::SharedCtor() {
  id_ = PROTOBUF_ULONGLONG(0);
}

GetCoordinatesCatheterPathRequest::~GetCoordinatesCatheterPathRequest() {
  // @@protoc_insertion_point(destructor:github.com.pyrus.platform.protos.GetCoordinatesCatheterPathRequest)
  SharedDtor();
}

void GetCoordinatesCatheterPathRequest::SharedDtor() {
}

void GetCoordinatesCatheterPathRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetCoordinatesCatheterPathRequest& GetCoordinatesCatheterPathRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_GetCoordinatesCatheterPathRequest_catheter_5fpath_5fservice_2eproto.base);
  return *internal_default_instance();
}


void GetCoordinatesCatheterPathRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:github.com.pyrus.platform.protos.GetCoordinatesCatheterPathRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GetCoordinatesCatheterPathRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<GetCoordinatesCatheterPathRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // uint64 id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GetCoordinatesCatheterPathRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:github.com.pyrus.platform.protos.GetCoordinatesCatheterPathRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:github.com.pyrus.platform.protos.GetCoordinatesCatheterPathRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:github.com.pyrus.platform.protos.GetCoordinatesCatheterPathRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GetCoordinatesCatheterPathRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:github.com.pyrus.platform.protos.GetCoordinatesCatheterPathRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 id = 1;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:github.com.pyrus.platform.protos.GetCoordinatesCatheterPathRequest)
}

::google::protobuf::uint8* GetCoordinatesCatheterPathRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:github.com.pyrus.platform.protos.GetCoordinatesCatheterPathRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 id = 1;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:github.com.pyrus.platform.protos.GetCoordinatesCatheterPathRequest)
  return target;
}

size_t GetCoordinatesCatheterPathRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:github.com.pyrus.platform.protos.GetCoordinatesCatheterPathRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetCoordinatesCatheterPathRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:github.com.pyrus.platform.protos.GetCoordinatesCatheterPathRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetCoordinatesCatheterPathRequest* source =
      ::google::protobuf::DynamicCastToGenerated<GetCoordinatesCatheterPathRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:github.com.pyrus.platform.protos.GetCoordinatesCatheterPathRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:github.com.pyrus.platform.protos.GetCoordinatesCatheterPathRequest)
    MergeFrom(*source);
  }
}

void GetCoordinatesCatheterPathRequest::MergeFrom(const GetCoordinatesCatheterPathRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:github.com.pyrus.platform.protos.GetCoordinatesCatheterPathRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id() != 0) {
    set_id(from.id());
  }
}

void GetCoordinatesCatheterPathRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:github.com.pyrus.platform.protos.GetCoordinatesCatheterPathRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetCoordinatesCatheterPathRequest::CopyFrom(const GetCoordinatesCatheterPathRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:github.com.pyrus.platform.protos.GetCoordinatesCatheterPathRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetCoordinatesCatheterPathRequest::IsInitialized() const {
  return true;
}

void GetCoordinatesCatheterPathRequest::Swap(GetCoordinatesCatheterPathRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetCoordinatesCatheterPathRequest::InternalSwap(GetCoordinatesCatheterPathRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(id_, other->id_);
}

::google::protobuf::Metadata GetCoordinatesCatheterPathRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_catheter_5fpath_5fservice_2eproto);
  return ::file_level_metadata_catheter_5fpath_5fservice_2eproto[kIndexInFileMessages];
}


// ===================================================================

void GetCoordinatesCatheterPathResponse::InitAsDefaultInstance() {
  ::github::com::pyrus::platform::protos::_GetCoordinatesCatheterPathResponse_default_instance_._instance.get_mutable()->coordinate_ = const_cast< ::github::com::pyrus::platform::protos::CatheterCoordinates*>(
      ::github::com::pyrus::platform::protos::CatheterCoordinates::internal_default_instance());
}
class GetCoordinatesCatheterPathResponse::HasBitSetters {
 public:
  static const ::github::com::pyrus::platform::protos::CatheterCoordinates& coordinate(const GetCoordinatesCatheterPathResponse* msg);
};

const ::github::com::pyrus::platform::protos::CatheterCoordinates&
GetCoordinatesCatheterPathResponse::HasBitSetters::coordinate(const GetCoordinatesCatheterPathResponse* msg) {
  return *msg->coordinate_;
}
void GetCoordinatesCatheterPathResponse::clear_coordinate() {
  if (GetArenaNoVirtual() == nullptr && coordinate_ != nullptr) {
    delete coordinate_;
  }
  coordinate_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetCoordinatesCatheterPathResponse::kCoordinateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetCoordinatesCatheterPathResponse::GetCoordinatesCatheterPathResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:github.com.pyrus.platform.protos.GetCoordinatesCatheterPathResponse)
}
GetCoordinatesCatheterPathResponse::GetCoordinatesCatheterPathResponse(const GetCoordinatesCatheterPathResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_coordinate()) {
    coordinate_ = new ::github::com::pyrus::platform::protos::CatheterCoordinates(*from.coordinate_);
  } else {
    coordinate_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:github.com.pyrus.platform.protos.GetCoordinatesCatheterPathResponse)
}

void GetCoordinatesCatheterPathResponse::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_GetCoordinatesCatheterPathResponse_catheter_5fpath_5fservice_2eproto.base);
  coordinate_ = nullptr;
}

GetCoordinatesCatheterPathResponse::~GetCoordinatesCatheterPathResponse() {
  // @@protoc_insertion_point(destructor:github.com.pyrus.platform.protos.GetCoordinatesCatheterPathResponse)
  SharedDtor();
}

void GetCoordinatesCatheterPathResponse::SharedDtor() {
  if (this != internal_default_instance()) delete coordinate_;
}

void GetCoordinatesCatheterPathResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetCoordinatesCatheterPathResponse& GetCoordinatesCatheterPathResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_GetCoordinatesCatheterPathResponse_catheter_5fpath_5fservice_2eproto.base);
  return *internal_default_instance();
}


void GetCoordinatesCatheterPathResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:github.com.pyrus.platform.protos.GetCoordinatesCatheterPathResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && coordinate_ != nullptr) {
    delete coordinate_;
  }
  coordinate_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GetCoordinatesCatheterPathResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<GetCoordinatesCatheterPathResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .github.com.pyrus.platform.protos.CatheterCoordinates coordinate = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::github::com::pyrus::platform::protos::CatheterCoordinates::_InternalParse;
        object = msg->mutable_coordinate();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GetCoordinatesCatheterPathResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:github.com.pyrus.platform.protos.GetCoordinatesCatheterPathResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .github.com.pyrus.platform.protos.CatheterCoordinates coordinate = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_coordinate()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:github.com.pyrus.platform.protos.GetCoordinatesCatheterPathResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:github.com.pyrus.platform.protos.GetCoordinatesCatheterPathResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GetCoordinatesCatheterPathResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:github.com.pyrus.platform.protos.GetCoordinatesCatheterPathResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .github.com.pyrus.platform.protos.CatheterCoordinates coordinate = 1;
  if (this->has_coordinate()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::coordinate(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:github.com.pyrus.platform.protos.GetCoordinatesCatheterPathResponse)
}

::google::protobuf::uint8* GetCoordinatesCatheterPathResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:github.com.pyrus.platform.protos.GetCoordinatesCatheterPathResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .github.com.pyrus.platform.protos.CatheterCoordinates coordinate = 1;
  if (this->has_coordinate()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::coordinate(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:github.com.pyrus.platform.protos.GetCoordinatesCatheterPathResponse)
  return target;
}

size_t GetCoordinatesCatheterPathResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:github.com.pyrus.platform.protos.GetCoordinatesCatheterPathResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .github.com.pyrus.platform.protos.CatheterCoordinates coordinate = 1;
  if (this->has_coordinate()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *coordinate_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetCoordinatesCatheterPathResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:github.com.pyrus.platform.protos.GetCoordinatesCatheterPathResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetCoordinatesCatheterPathResponse* source =
      ::google::protobuf::DynamicCastToGenerated<GetCoordinatesCatheterPathResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:github.com.pyrus.platform.protos.GetCoordinatesCatheterPathResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:github.com.pyrus.platform.protos.GetCoordinatesCatheterPathResponse)
    MergeFrom(*source);
  }
}

void GetCoordinatesCatheterPathResponse::MergeFrom(const GetCoordinatesCatheterPathResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:github.com.pyrus.platform.protos.GetCoordinatesCatheterPathResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_coordinate()) {
    mutable_coordinate()->::github::com::pyrus::platform::protos::CatheterCoordinates::MergeFrom(from.coordinate());
  }
}

void GetCoordinatesCatheterPathResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:github.com.pyrus.platform.protos.GetCoordinatesCatheterPathResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetCoordinatesCatheterPathResponse::CopyFrom(const GetCoordinatesCatheterPathResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:github.com.pyrus.platform.protos.GetCoordinatesCatheterPathResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetCoordinatesCatheterPathResponse::IsInitialized() const {
  return true;
}

void GetCoordinatesCatheterPathResponse::Swap(GetCoordinatesCatheterPathResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetCoordinatesCatheterPathResponse::InternalSwap(GetCoordinatesCatheterPathResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(coordinate_, other->coordinate_);
}

::google::protobuf::Metadata GetCoordinatesCatheterPathResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_catheter_5fpath_5fservice_2eproto);
  return ::file_level_metadata_catheter_5fpath_5fservice_2eproto[kIndexInFileMessages];
}


// ===================================================================

void ListCatheterPathsRequest::InitAsDefaultInstance() {
}
class ListCatheterPathsRequest::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ListCatheterPathsRequest::ListCatheterPathsRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:github.com.pyrus.platform.protos.ListCatheterPathsRequest)
}
ListCatheterPathsRequest::ListCatheterPathsRequest(const ListCatheterPathsRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:github.com.pyrus.platform.protos.ListCatheterPathsRequest)
}

void ListCatheterPathsRequest::SharedCtor() {
}

ListCatheterPathsRequest::~ListCatheterPathsRequest() {
  // @@protoc_insertion_point(destructor:github.com.pyrus.platform.protos.ListCatheterPathsRequest)
  SharedDtor();
}

void ListCatheterPathsRequest::SharedDtor() {
}

void ListCatheterPathsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ListCatheterPathsRequest& ListCatheterPathsRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_ListCatheterPathsRequest_catheter_5fpath_5fservice_2eproto.base);
  return *internal_default_instance();
}


void ListCatheterPathsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:github.com.pyrus.platform.protos.ListCatheterPathsRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ListCatheterPathsRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<ListCatheterPathsRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ListCatheterPathsRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:github.com.pyrus.platform.protos.ListCatheterPathsRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:github.com.pyrus.platform.protos.ListCatheterPathsRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:github.com.pyrus.platform.protos.ListCatheterPathsRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ListCatheterPathsRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:github.com.pyrus.platform.protos.ListCatheterPathsRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:github.com.pyrus.platform.protos.ListCatheterPathsRequest)
}

::google::protobuf::uint8* ListCatheterPathsRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:github.com.pyrus.platform.protos.ListCatheterPathsRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:github.com.pyrus.platform.protos.ListCatheterPathsRequest)
  return target;
}

size_t ListCatheterPathsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:github.com.pyrus.platform.protos.ListCatheterPathsRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ListCatheterPathsRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:github.com.pyrus.platform.protos.ListCatheterPathsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ListCatheterPathsRequest* source =
      ::google::protobuf::DynamicCastToGenerated<ListCatheterPathsRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:github.com.pyrus.platform.protos.ListCatheterPathsRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:github.com.pyrus.platform.protos.ListCatheterPathsRequest)
    MergeFrom(*source);
  }
}

void ListCatheterPathsRequest::MergeFrom(const ListCatheterPathsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:github.com.pyrus.platform.protos.ListCatheterPathsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void ListCatheterPathsRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:github.com.pyrus.platform.protos.ListCatheterPathsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListCatheterPathsRequest::CopyFrom(const ListCatheterPathsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:github.com.pyrus.platform.protos.ListCatheterPathsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListCatheterPathsRequest::IsInitialized() const {
  return true;
}

void ListCatheterPathsRequest::Swap(ListCatheterPathsRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ListCatheterPathsRequest::InternalSwap(ListCatheterPathsRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ListCatheterPathsRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_catheter_5fpath_5fservice_2eproto);
  return ::file_level_metadata_catheter_5fpath_5fservice_2eproto[kIndexInFileMessages];
}


// ===================================================================

void ListCatheterPathsResponse::InitAsDefaultInstance() {
  ::github::com::pyrus::platform::protos::_ListCatheterPathsResponse_default_instance_._instance.get_mutable()->path_ = const_cast< ::github::com::pyrus::platform::protos::CatheterPath*>(
      ::github::com::pyrus::platform::protos::CatheterPath::internal_default_instance());
}
class ListCatheterPathsResponse::HasBitSetters {
 public:
  static const ::github::com::pyrus::platform::protos::CatheterPath& path(const ListCatheterPathsResponse* msg);
};

const ::github::com::pyrus::platform::protos::CatheterPath&
ListCatheterPathsResponse::HasBitSetters::path(const ListCatheterPathsResponse* msg) {
  return *msg->path_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ListCatheterPathsResponse::kPathFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ListCatheterPathsResponse::ListCatheterPathsResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:github.com.pyrus.platform.protos.ListCatheterPathsResponse)
}
ListCatheterPathsResponse::ListCatheterPathsResponse(const ListCatheterPathsResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_path()) {
    path_ = new ::github::com::pyrus::platform::protos::CatheterPath(*from.path_);
  } else {
    path_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:github.com.pyrus.platform.protos.ListCatheterPathsResponse)
}

void ListCatheterPathsResponse::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_ListCatheterPathsResponse_catheter_5fpath_5fservice_2eproto.base);
  path_ = nullptr;
}

ListCatheterPathsResponse::~ListCatheterPathsResponse() {
  // @@protoc_insertion_point(destructor:github.com.pyrus.platform.protos.ListCatheterPathsResponse)
  SharedDtor();
}

void ListCatheterPathsResponse::SharedDtor() {
  if (this != internal_default_instance()) delete path_;
}

void ListCatheterPathsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ListCatheterPathsResponse& ListCatheterPathsResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_ListCatheterPathsResponse_catheter_5fpath_5fservice_2eproto.base);
  return *internal_default_instance();
}


void ListCatheterPathsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:github.com.pyrus.platform.protos.ListCatheterPathsResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && path_ != nullptr) {
    delete path_;
  }
  path_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ListCatheterPathsResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<ListCatheterPathsResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .github.com.pyrus.platform.protos.CatheterPath path = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::github::com::pyrus::platform::protos::CatheterPath::_InternalParse;
        object = msg->mutable_path();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ListCatheterPathsResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:github.com.pyrus.platform.protos.ListCatheterPathsResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .github.com.pyrus.platform.protos.CatheterPath path = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_path()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:github.com.pyrus.platform.protos.ListCatheterPathsResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:github.com.pyrus.platform.protos.ListCatheterPathsResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ListCatheterPathsResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:github.com.pyrus.platform.protos.ListCatheterPathsResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .github.com.pyrus.platform.protos.CatheterPath path = 1;
  if (this->has_path()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::path(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:github.com.pyrus.platform.protos.ListCatheterPathsResponse)
}

::google::protobuf::uint8* ListCatheterPathsResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:github.com.pyrus.platform.protos.ListCatheterPathsResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .github.com.pyrus.platform.protos.CatheterPath path = 1;
  if (this->has_path()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::path(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:github.com.pyrus.platform.protos.ListCatheterPathsResponse)
  return target;
}

size_t ListCatheterPathsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:github.com.pyrus.platform.protos.ListCatheterPathsResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .github.com.pyrus.platform.protos.CatheterPath path = 1;
  if (this->has_path()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *path_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ListCatheterPathsResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:github.com.pyrus.platform.protos.ListCatheterPathsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ListCatheterPathsResponse* source =
      ::google::protobuf::DynamicCastToGenerated<ListCatheterPathsResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:github.com.pyrus.platform.protos.ListCatheterPathsResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:github.com.pyrus.platform.protos.ListCatheterPathsResponse)
    MergeFrom(*source);
  }
}

void ListCatheterPathsResponse::MergeFrom(const ListCatheterPathsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:github.com.pyrus.platform.protos.ListCatheterPathsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_path()) {
    mutable_path()->::github::com::pyrus::platform::protos::CatheterPath::MergeFrom(from.path());
  }
}

void ListCatheterPathsResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:github.com.pyrus.platform.protos.ListCatheterPathsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListCatheterPathsResponse::CopyFrom(const ListCatheterPathsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:github.com.pyrus.platform.protos.ListCatheterPathsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListCatheterPathsResponse::IsInitialized() const {
  return true;
}

void ListCatheterPathsResponse::Swap(ListCatheterPathsResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ListCatheterPathsResponse::InternalSwap(ListCatheterPathsResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(path_, other->path_);
}

::google::protobuf::Metadata ListCatheterPathsResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_catheter_5fpath_5fservice_2eproto);
  return ::file_level_metadata_catheter_5fpath_5fservice_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CatheterPath::InitAsDefaultInstance() {
  ::github::com::pyrus::platform::protos::_CatheterPath_default_instance_._instance.get_mutable()->created_ = const_cast< ::google::protobuf::Timestamp*>(
      ::google::protobuf::Timestamp::internal_default_instance());
}
class CatheterPath::HasBitSetters {
 public:
  static const ::google::protobuf::Timestamp& created(const CatheterPath* msg);
};

const ::google::protobuf::Timestamp&
CatheterPath::HasBitSetters::created(const CatheterPath* msg) {
  return *msg->created_;
}
void CatheterPath::clear_created() {
  if (GetArenaNoVirtual() == nullptr && created_ != nullptr) {
    delete created_;
  }
  created_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CatheterPath::kIdFieldNumber;
const int CatheterPath::kStartCatheterDataIDFieldNumber;
const int CatheterPath::kEndCatheterDataIDFieldNumber;
const int CatheterPath::kNameFieldNumber;
const int CatheterPath::kCreatedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CatheterPath::CatheterPath()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:github.com.pyrus.platform.protos.CatheterPath)
}
CatheterPath::CatheterPath(const CatheterPath& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.has_created()) {
    created_ = new ::google::protobuf::Timestamp(*from.created_);
  } else {
    created_ = nullptr;
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&endcatheterdataid_) -
    reinterpret_cast<char*>(&id_)) + sizeof(endcatheterdataid_));
  // @@protoc_insertion_point(copy_constructor:github.com.pyrus.platform.protos.CatheterPath)
}

void CatheterPath::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CatheterPath_catheter_5fpath_5fservice_2eproto.base);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&created_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&endcatheterdataid_) -
      reinterpret_cast<char*>(&created_)) + sizeof(endcatheterdataid_));
}

CatheterPath::~CatheterPath() {
  // @@protoc_insertion_point(destructor:github.com.pyrus.platform.protos.CatheterPath)
  SharedDtor();
}

void CatheterPath::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete created_;
}

void CatheterPath::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CatheterPath& CatheterPath::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CatheterPath_catheter_5fpath_5fservice_2eproto.base);
  return *internal_default_instance();
}


void CatheterPath::Clear() {
// @@protoc_insertion_point(message_clear_start:github.com.pyrus.platform.protos.CatheterPath)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && created_ != nullptr) {
    delete created_;
  }
  created_ = nullptr;
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&endcatheterdataid_) -
      reinterpret_cast<char*>(&id_)) + sizeof(endcatheterdataid_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CatheterPath::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CatheterPath*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // uint64 id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // uint64 startCatheterDataID = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_startcatheterdataid(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // uint64 endCatheterDataID = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_endcatheterdataid(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // string name = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("github.com.pyrus.platform.protos.CatheterPath.name");
        object = msg->mutable_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // .google.protobuf.Timestamp created = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::Timestamp::_InternalParse;
        object = msg->mutable_created();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CatheterPath::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:github.com.pyrus.platform.protos.CatheterPath)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 startCatheterDataID = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &startcatheterdataid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 endCatheterDataID = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &endcatheterdataid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string name = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "github.com.pyrus.platform.protos.CatheterPath.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Timestamp created = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_created()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:github.com.pyrus.platform.protos.CatheterPath)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:github.com.pyrus.platform.protos.CatheterPath)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CatheterPath::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:github.com.pyrus.platform.protos.CatheterPath)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 id = 1;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->id(), output);
  }

  // uint64 startCatheterDataID = 2;
  if (this->startcatheterdataid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->startcatheterdataid(), output);
  }

  // uint64 endCatheterDataID = 3;
  if (this->endcatheterdataid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->endcatheterdataid(), output);
  }

  // string name = 4;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "github.com.pyrus.platform.protos.CatheterPath.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->name(), output);
  }

  // .google.protobuf.Timestamp created = 5;
  if (this->has_created()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, HasBitSetters::created(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:github.com.pyrus.platform.protos.CatheterPath)
}

::google::protobuf::uint8* CatheterPath::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:github.com.pyrus.platform.protos.CatheterPath)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 id = 1;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->id(), target);
  }

  // uint64 startCatheterDataID = 2;
  if (this->startcatheterdataid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->startcatheterdataid(), target);
  }

  // uint64 endCatheterDataID = 3;
  if (this->endcatheterdataid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->endcatheterdataid(), target);
  }

  // string name = 4;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "github.com.pyrus.platform.protos.CatheterPath.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->name(), target);
  }

  // .google.protobuf.Timestamp created = 5;
  if (this->has_created()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, HasBitSetters::created(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:github.com.pyrus.platform.protos.CatheterPath)
  return target;
}

size_t CatheterPath::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:github.com.pyrus.platform.protos.CatheterPath)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 4;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // .google.protobuf.Timestamp created = 5;
  if (this->has_created()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *created_);
  }

  // uint64 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->id());
  }

  // uint64 startCatheterDataID = 2;
  if (this->startcatheterdataid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->startcatheterdataid());
  }

  // uint64 endCatheterDataID = 3;
  if (this->endcatheterdataid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->endcatheterdataid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CatheterPath::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:github.com.pyrus.platform.protos.CatheterPath)
  GOOGLE_DCHECK_NE(&from, this);
  const CatheterPath* source =
      ::google::protobuf::DynamicCastToGenerated<CatheterPath>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:github.com.pyrus.platform.protos.CatheterPath)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:github.com.pyrus.platform.protos.CatheterPath)
    MergeFrom(*source);
  }
}

void CatheterPath::MergeFrom(const CatheterPath& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:github.com.pyrus.platform.protos.CatheterPath)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.has_created()) {
    mutable_created()->::google::protobuf::Timestamp::MergeFrom(from.created());
  }
  if (from.id() != 0) {
    set_id(from.id());
  }
  if (from.startcatheterdataid() != 0) {
    set_startcatheterdataid(from.startcatheterdataid());
  }
  if (from.endcatheterdataid() != 0) {
    set_endcatheterdataid(from.endcatheterdataid());
  }
}

void CatheterPath::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:github.com.pyrus.platform.protos.CatheterPath)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CatheterPath::CopyFrom(const CatheterPath& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:github.com.pyrus.platform.protos.CatheterPath)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CatheterPath::IsInitialized() const {
  return true;
}

void CatheterPath::Swap(CatheterPath* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CatheterPath::InternalSwap(CatheterPath* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(created_, other->created_);
  swap(id_, other->id_);
  swap(startcatheterdataid_, other->startcatheterdataid_);
  swap(endcatheterdataid_, other->endcatheterdataid_);
}

::google::protobuf::Metadata CatheterPath::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_catheter_5fpath_5fservice_2eproto);
  return ::file_level_metadata_catheter_5fpath_5fservice_2eproto[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace protos
}  // namespace platform
}  // namespace pyrus
}  // namespace com
}  // namespace github
namespace google {
namespace protobuf {
template<> PROTOBUF_NOINLINE ::github::com::pyrus::platform::protos::CreateCatheterPathRequest* Arena::CreateMaybeMessage< ::github::com::pyrus::platform::protos::CreateCatheterPathRequest >(Arena* arena) {
  return Arena::CreateInternal< ::github::com::pyrus::platform::protos::CreateCatheterPathRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::github::com::pyrus::platform::protos::CreateCatheterPathResponse* Arena::CreateMaybeMessage< ::github::com::pyrus::platform::protos::CreateCatheterPathResponse >(Arena* arena) {
  return Arena::CreateInternal< ::github::com::pyrus::platform::protos::CreateCatheterPathResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::github::com::pyrus::platform::protos::GetCatheterPathRequest* Arena::CreateMaybeMessage< ::github::com::pyrus::platform::protos::GetCatheterPathRequest >(Arena* arena) {
  return Arena::CreateInternal< ::github::com::pyrus::platform::protos::GetCatheterPathRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::github::com::pyrus::platform::protos::GetCatheterPathResponse* Arena::CreateMaybeMessage< ::github::com::pyrus::platform::protos::GetCatheterPathResponse >(Arena* arena) {
  return Arena::CreateInternal< ::github::com::pyrus::platform::protos::GetCatheterPathResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::github::com::pyrus::platform::protos::GetCoordinatesCatheterPathRequest* Arena::CreateMaybeMessage< ::github::com::pyrus::platform::protos::GetCoordinatesCatheterPathRequest >(Arena* arena) {
  return Arena::CreateInternal< ::github::com::pyrus::platform::protos::GetCoordinatesCatheterPathRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::github::com::pyrus::platform::protos::GetCoordinatesCatheterPathResponse* Arena::CreateMaybeMessage< ::github::com::pyrus::platform::protos::GetCoordinatesCatheterPathResponse >(Arena* arena) {
  return Arena::CreateInternal< ::github::com::pyrus::platform::protos::GetCoordinatesCatheterPathResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::github::com::pyrus::platform::protos::ListCatheterPathsRequest* Arena::CreateMaybeMessage< ::github::com::pyrus::platform::protos::ListCatheterPathsRequest >(Arena* arena) {
  return Arena::CreateInternal< ::github::com::pyrus::platform::protos::ListCatheterPathsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::github::com::pyrus::platform::protos::ListCatheterPathsResponse* Arena::CreateMaybeMessage< ::github::com::pyrus::platform::protos::ListCatheterPathsResponse >(Arena* arena) {
  return Arena::CreateInternal< ::github::com::pyrus::platform::protos::ListCatheterPathsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::github::com::pyrus::platform::protos::CatheterPath* Arena::CreateMaybeMessage< ::github::com::pyrus::platform::protos::CatheterPath >(Arena* arena) {
  return Arena::CreateInternal< ::github::com::pyrus::platform::protos::CatheterPath >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
