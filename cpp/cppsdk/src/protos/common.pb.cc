// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: common.proto

#include "common.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

extern PROTOBUF_INTERNAL_EXPORT_common_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Coordinates_common_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_common_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_DeviceInfo_common_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_common_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Quaternion_common_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_common_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_RobotControllerData_common_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_common_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_CatheterData_common_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_common_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_ElectricalSignalData_common_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_common_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_NullableRobotControllerData_common_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_common_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_CatheterCoordinates_common_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2ftimestamp_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto;
namespace github {
namespace com {
namespace pyrus {
namespace platform {
namespace protos {
class DeviceDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Device> _instance;
} _Device_default_instance_;
class DeviceInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DeviceInfo> _instance;
} _DeviceInfo_default_instance_;
class CoordinatesDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Coordinates> _instance;
} _Coordinates_default_instance_;
class QuaternionDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Quaternion> _instance;
} _Quaternion_default_instance_;
class CatheterCoordinatesDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CatheterCoordinates> _instance;
} _CatheterCoordinates_default_instance_;
class CatheterDataDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CatheterData> _instance;
} _CatheterData_default_instance_;
class RobotControllerDataDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RobotControllerData> _instance;
} _RobotControllerData_default_instance_;
class NullableRobotControllerDataDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<NullableRobotControllerData> _instance;
  int null_;
  const ::github::com::pyrus::platform::protos::RobotControllerData* data_;
} _NullableRobotControllerData_default_instance_;
class ElectricalSignalDataDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ElectricalSignalData> _instance;
} _ElectricalSignalData_default_instance_;
class FrameDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Frame> _instance;
} _Frame_default_instance_;
}  // namespace protos
}  // namespace platform
}  // namespace pyrus
}  // namespace com
}  // namespace github
static void InitDefaultsDevice_common_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::github::com::pyrus::platform::protos::_Device_default_instance_;
    new (ptr) ::github::com::pyrus::platform::protos::Device();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::github::com::pyrus::platform::protos::Device::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_Device_common_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsDevice_common_2eproto}, {
      &scc_info_DeviceInfo_common_2eproto.base,}};

static void InitDefaultsDeviceInfo_common_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::github::com::pyrus::platform::protos::_DeviceInfo_default_instance_;
    new (ptr) ::github::com::pyrus::platform::protos::DeviceInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::github::com::pyrus::platform::protos::DeviceInfo::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_DeviceInfo_common_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsDeviceInfo_common_2eproto}, {}};

static void InitDefaultsCoordinates_common_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::github::com::pyrus::platform::protos::_Coordinates_default_instance_;
    new (ptr) ::github::com::pyrus::platform::protos::Coordinates();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::github::com::pyrus::platform::protos::Coordinates::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Coordinates_common_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCoordinates_common_2eproto}, {}};

static void InitDefaultsQuaternion_common_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::github::com::pyrus::platform::protos::_Quaternion_default_instance_;
    new (ptr) ::github::com::pyrus::platform::protos::Quaternion();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::github::com::pyrus::platform::protos::Quaternion::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Quaternion_common_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsQuaternion_common_2eproto}, {}};

static void InitDefaultsCatheterCoordinates_common_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::github::com::pyrus::platform::protos::_CatheterCoordinates_default_instance_;
    new (ptr) ::github::com::pyrus::platform::protos::CatheterCoordinates();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::github::com::pyrus::platform::protos::CatheterCoordinates::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_CatheterCoordinates_common_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsCatheterCoordinates_common_2eproto}, {
      &scc_info_Coordinates_common_2eproto.base,
      &scc_info_Quaternion_common_2eproto.base,}};

static void InitDefaultsCatheterData_common_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::github::com::pyrus::platform::protos::_CatheterData_default_instance_;
    new (ptr) ::github::com::pyrus::platform::protos::CatheterData();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::github::com::pyrus::platform::protos::CatheterData::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CatheterData_common_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCatheterData_common_2eproto}, {
      &scc_info_CatheterCoordinates_common_2eproto.base,}};

static void InitDefaultsRobotControllerData_common_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::github::com::pyrus::platform::protos::_RobotControllerData_default_instance_;
    new (ptr) ::github::com::pyrus::platform::protos::RobotControllerData();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::github::com::pyrus::platform::protos::RobotControllerData::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_RobotControllerData_common_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsRobotControllerData_common_2eproto}, {}};

static void InitDefaultsNullableRobotControllerData_common_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::github::com::pyrus::platform::protos::_NullableRobotControllerData_default_instance_;
    new (ptr) ::github::com::pyrus::platform::protos::NullableRobotControllerData();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::github::com::pyrus::platform::protos::NullableRobotControllerData::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_NullableRobotControllerData_common_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsNullableRobotControllerData_common_2eproto}, {
      &scc_info_RobotControllerData_common_2eproto.base,}};

static void InitDefaultsElectricalSignalData_common_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::github::com::pyrus::platform::protos::_ElectricalSignalData_default_instance_;
    new (ptr) ::github::com::pyrus::platform::protos::ElectricalSignalData();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::github::com::pyrus::platform::protos::ElectricalSignalData::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_ElectricalSignalData_common_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsElectricalSignalData_common_2eproto}, {
      &scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto.base,}};

static void InitDefaultsFrame_common_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::github::com::pyrus::platform::protos::_Frame_default_instance_;
    new (ptr) ::github::com::pyrus::platform::protos::Frame();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::github::com::pyrus::platform::protos::Frame::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<4> scc_info_Frame_common_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 4, InitDefaultsFrame_common_2eproto}, {
      &scc_info_CatheterData_common_2eproto.base,
      &scc_info_NullableRobotControllerData_common_2eproto.base,
      &scc_info_ElectricalSignalData_common_2eproto.base,
      &scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto.base,}};

void InitDefaults_common_2eproto() {
  ::google::protobuf::internal::InitSCC(&scc_info_Device_common_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_DeviceInfo_common_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Coordinates_common_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Quaternion_common_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CatheterCoordinates_common_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CatheterData_common_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_RobotControllerData_common_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_NullableRobotControllerData_common_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ElectricalSignalData_common_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Frame_common_2eproto.base);
}

::google::protobuf::Metadata file_level_metadata_common_2eproto[10];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors_common_2eproto[2];
constexpr ::google::protobuf::ServiceDescriptor const** file_level_service_descriptors_common_2eproto = nullptr;

const ::google::protobuf::uint32 TableStruct_common_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::github::com::pyrus::platform::protos::Device, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::github::com::pyrus::platform::protos::Device, id_),
  PROTOBUF_FIELD_OFFSET(::github::com::pyrus::platform::protos::Device, info_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::github::com::pyrus::platform::protos::DeviceInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::github::com::pyrus::platform::protos::DeviceInfo, name_),
  PROTOBUF_FIELD_OFFSET(::github::com::pyrus::platform::protos::DeviceInfo, type_),
  PROTOBUF_FIELD_OFFSET(::github::com::pyrus::platform::protos::DeviceInfo, ip_),
  PROTOBUF_FIELD_OFFSET(::github::com::pyrus::platform::protos::DeviceInfo, port_),
  PROTOBUF_FIELD_OFFSET(::github::com::pyrus::platform::protos::DeviceInfo, produces_),
  PROTOBUF_FIELD_OFFSET(::github::com::pyrus::platform::protos::DeviceInfo, consumes_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::github::com::pyrus::platform::protos::Coordinates, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::github::com::pyrus::platform::protos::Coordinates, x_),
  PROTOBUF_FIELD_OFFSET(::github::com::pyrus::platform::protos::Coordinates, y_),
  PROTOBUF_FIELD_OFFSET(::github::com::pyrus::platform::protos::Coordinates, z_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::github::com::pyrus::platform::protos::Quaternion, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::github::com::pyrus::platform::protos::Quaternion, w_),
  PROTOBUF_FIELD_OFFSET(::github::com::pyrus::platform::protos::Quaternion, x_),
  PROTOBUF_FIELD_OFFSET(::github::com::pyrus::platform::protos::Quaternion, y_),
  PROTOBUF_FIELD_OFFSET(::github::com::pyrus::platform::protos::Quaternion, z_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::github::com::pyrus::platform::protos::CatheterCoordinates, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::github::com::pyrus::platform::protos::CatheterCoordinates, position_),
  PROTOBUF_FIELD_OFFSET(::github::com::pyrus::platform::protos::CatheterCoordinates, rotation_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::github::com::pyrus::platform::protos::CatheterData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::github::com::pyrus::platform::protos::CatheterData, sensorid_),
  PROTOBUF_FIELD_OFFSET(::github::com::pyrus::platform::protos::CatheterData, coordinates_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::github::com::pyrus::platform::protos::RobotControllerData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::github::com::pyrus::platform::protos::RobotControllerData, movementvelocity_),
  PROTOBUF_FIELD_OFFSET(::github::com::pyrus::platform::protos::RobotControllerData, rotationvelocity_),
  PROTOBUF_FIELD_OFFSET(::github::com::pyrus::platform::protos::RobotControllerData, deflectionvelocity_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::github::com::pyrus::platform::protos::NullableRobotControllerData, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::github::com::pyrus::platform::protos::NullableRobotControllerData, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::github::com::pyrus::platform::protos::NullableRobotControllerDataDefaultTypeInternal, null_),
  offsetof(::github::com::pyrus::platform::protos::NullableRobotControllerDataDefaultTypeInternal, data_),
  PROTOBUF_FIELD_OFFSET(::github::com::pyrus::platform::protos::NullableRobotControllerData, kind_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::github::com::pyrus::platform::protos::ElectricalSignalData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::github::com::pyrus::platform::protos::ElectricalSignalData, signalid_),
  PROTOBUF_FIELD_OFFSET(::github::com::pyrus::platform::protos::ElectricalSignalData, value_),
  PROTOBUF_FIELD_OFFSET(::github::com::pyrus::platform::protos::ElectricalSignalData, created_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::github::com::pyrus::platform::protos::Frame, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::github::com::pyrus::platform::protos::Frame, catheterdata_),
  PROTOBUF_FIELD_OFFSET(::github::com::pyrus::platform::protos::Frame, nullablerobotcontrollerdata_),
  PROTOBUF_FIELD_OFFSET(::github::com::pyrus::platform::protos::Frame, electricalsignals_),
  PROTOBUF_FIELD_OFFSET(::github::com::pyrus::platform::protos::Frame, created_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::github::com::pyrus::platform::protos::Device)},
  { 7, -1, sizeof(::github::com::pyrus::platform::protos::DeviceInfo)},
  { 18, -1, sizeof(::github::com::pyrus::platform::protos::Coordinates)},
  { 26, -1, sizeof(::github::com::pyrus::platform::protos::Quaternion)},
  { 35, -1, sizeof(::github::com::pyrus::platform::protos::CatheterCoordinates)},
  { 42, -1, sizeof(::github::com::pyrus::platform::protos::CatheterData)},
  { 49, -1, sizeof(::github::com::pyrus::platform::protos::RobotControllerData)},
  { 57, -1, sizeof(::github::com::pyrus::platform::protos::NullableRobotControllerData)},
  { 65, -1, sizeof(::github::com::pyrus::platform::protos::ElectricalSignalData)},
  { 73, -1, sizeof(::github::com::pyrus::platform::protos::Frame)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::github::com::pyrus::platform::protos::_Device_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::github::com::pyrus::platform::protos::_DeviceInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::github::com::pyrus::platform::protos::_Coordinates_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::github::com::pyrus::platform::protos::_Quaternion_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::github::com::pyrus::platform::protos::_CatheterCoordinates_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::github::com::pyrus::platform::protos::_CatheterData_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::github::com::pyrus::platform::protos::_RobotControllerData_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::github::com::pyrus::platform::protos::_NullableRobotControllerData_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::github::com::pyrus::platform::protos::_ElectricalSignalData_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::github::com::pyrus::platform::protos::_Frame_default_instance_),
};

::google::protobuf::internal::AssignDescriptorsTable assign_descriptors_table_common_2eproto = {
  {}, AddDescriptors_common_2eproto, "common.proto", schemas,
  file_default_instances, TableStruct_common_2eproto::offsets,
  file_level_metadata_common_2eproto, 10, file_level_enum_descriptors_common_2eproto, file_level_service_descriptors_common_2eproto,
};

const char descriptor_table_protodef_common_2eproto[] =
  "\n\014common.proto\022 github.com.pyrus.platfor"
  "m.protos\032\034google/protobuf/struct.proto\032\037"
  "google/protobuf/timestamp.proto\"P\n\006Devic"
  "e\022\n\n\002id\030\001 \001(\004\022:\n\004info\030\002 \001(\0132,.github.com"
  ".pyrus.platform.protos.DeviceInfo\"\354\001\n\nDe"
  "viceInfo\022\014\n\004name\030\001 \001(\t\022:\n\004type\030\002 \001(\0162,.g"
  "ithub.com.pyrus.platform.protos.DeviceTy"
  "pe\022\n\n\002ip\030\003 \001(\t\022\014\n\004port\030\004 \001(\r\022<\n\010produces"
  "\030\005 \003(\0162*.github.com.pyrus.platform.proto"
  "s.DataType\022<\n\010consumes\030\006 \003(\0162*.github.co"
  "m.pyrus.platform.protos.DataType\".\n\013Coor"
  "dinates\022\t\n\001x\030\001 \001(\002\022\t\n\001y\030\002 \001(\002\022\t\n\001z\030\003 \001(\002"
  "\"8\n\nQuaternion\022\t\n\001w\030\001 \001(\002\022\t\n\001x\030\002 \001(\002\022\t\n\001"
  "y\030\003 \001(\002\022\t\n\001z\030\004 \001(\002\"\226\001\n\023CatheterCoordinat"
  "es\022\?\n\010position\030\001 \001(\0132-.github.com.pyrus."
  "platform.protos.Coordinates\022>\n\010rotation\030"
  "\002 \001(\0132,.github.com.pyrus.platform.protos"
  ".Quaternion\"l\n\014CatheterData\022\020\n\010sensorId\030"
  "\001 \001(\r\022J\n\013coordinates\030\002 \001(\01325.github.com."
  "pyrus.platform.protos.CatheterCoordinate"
  "s\"e\n\023RobotControllerData\022\030\n\020movementVelo"
  "city\030\001 \001(\002\022\030\n\020rotationVelocity\030\002 \001(\002\022\032\n\022"
  "deflectionVelocity\030\003 \001(\002\"\230\001\n\033NullableRob"
  "otControllerData\022*\n\004null\030\001 \001(\0162\032.google."
  "protobuf.NullValueH\000\022E\n\004data\030\002 \001(\01325.git"
  "hub.com.pyrus.platform.protos.RobotContr"
  "ollerDataH\000B\006\n\004kind\"d\n\024ElectricalSignalD"
  "ata\022\020\n\010signalId\030\001 \001(\r\022\r\n\005value\030\002 \001(\002\022+\n\007"
  "created\030\004 \001(\0132\032.google.protobuf.Timestam"
  "p\"\261\002\n\005Frame\022D\n\014catheterData\030\001 \003(\0132..gith"
  "ub.com.pyrus.platform.protos.CatheterDat"
  "a\022b\n\033nullableRobotControllerData\030\002 \001(\0132="
  ".github.com.pyrus.platform.protos.Nullab"
  "leRobotControllerData\022Q\n\021electricalSigna"
  "ls\030\003 \003(\01326.github.com.pyrus.platform.pro"
  "tos.ElectricalSignalData\022+\n\007created\030\004 \001("
  "\0132\032.google.protobuf.Timestamp*a\n\nDeviceT"
  "ype\022\t\n\005Robot\020\000\022\016\n\nController\020\001\022\014\n\010Cathet"
  "er\020\002\022\013\n\007Headset\020\003\022\035\n\031ElectricalSignalGen"
  "erator\020\004*c\n\010DataType\022\016\n\nRobotState\020\000\022\021\n\r"
  "RobotControls\020\001\022\035\n\031CatheterSensorCoordin"
  "ates\020\002\022\025\n\021ElectricalSignals\020\003B\"Z\010platfor"
  "m\252\002\025Pyrus.Platform.Protosb\006proto3"
  ;
::google::protobuf::internal::DescriptorTable descriptor_table_common_2eproto = {
  false, InitDefaults_common_2eproto, 
  descriptor_table_protodef_common_2eproto,
  "common.proto", &assign_descriptors_table_common_2eproto, 1713,
};

void AddDescriptors_common_2eproto() {
  static constexpr ::google::protobuf::internal::InitFunc deps[2] =
  {
    ::AddDescriptors_google_2fprotobuf_2fstruct_2eproto,
    ::AddDescriptors_google_2fprotobuf_2ftimestamp_2eproto,
  };
 ::google::protobuf::internal::AddDescriptors(&descriptor_table_common_2eproto, deps, 2);
}

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_common_2eproto = []() { AddDescriptors_common_2eproto(); return true; }();
namespace github {
namespace com {
namespace pyrus {
namespace platform {
namespace protos {
const ::google::protobuf::EnumDescriptor* DeviceType_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_common_2eproto);
  return file_level_enum_descriptors_common_2eproto[0];
}
bool DeviceType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* DataType_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_common_2eproto);
  return file_level_enum_descriptors_common_2eproto[1];
}
bool DataType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void Device::InitAsDefaultInstance() {
  ::github::com::pyrus::platform::protos::_Device_default_instance_._instance.get_mutable()->info_ = const_cast< ::github::com::pyrus::platform::protos::DeviceInfo*>(
      ::github::com::pyrus::platform::protos::DeviceInfo::internal_default_instance());
}
class Device::HasBitSetters {
 public:
  static const ::github::com::pyrus::platform::protos::DeviceInfo& info(const Device* msg);
};

const ::github::com::pyrus::platform::protos::DeviceInfo&
Device::HasBitSetters::info(const Device* msg) {
  return *msg->info_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Device::kIdFieldNumber;
const int Device::kInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Device::Device()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:github.com.pyrus.platform.protos.Device)
}
Device::Device(const Device& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_info()) {
    info_ = new ::github::com::pyrus::platform::protos::DeviceInfo(*from.info_);
  } else {
    info_ = nullptr;
  }
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:github.com.pyrus.platform.protos.Device)
}

void Device::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_Device_common_2eproto.base);
  ::memset(&info_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&id_) -
      reinterpret_cast<char*>(&info_)) + sizeof(id_));
}

Device::~Device() {
  // @@protoc_insertion_point(destructor:github.com.pyrus.platform.protos.Device)
  SharedDtor();
}

void Device::SharedDtor() {
  if (this != internal_default_instance()) delete info_;
}

void Device::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Device& Device::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Device_common_2eproto.base);
  return *internal_default_instance();
}


void Device::Clear() {
// @@protoc_insertion_point(message_clear_start:github.com.pyrus.platform.protos.Device)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && info_ != nullptr) {
    delete info_;
  }
  info_ = nullptr;
  id_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Device::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Device*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // uint64 id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // .github.com.pyrus.platform.protos.DeviceInfo info = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::github::com::pyrus::platform::protos::DeviceInfo::_InternalParse;
        object = msg->mutable_info();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Device::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:github.com.pyrus.platform.protos.Device)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .github.com.pyrus.platform.protos.DeviceInfo info = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:github.com.pyrus.platform.protos.Device)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:github.com.pyrus.platform.protos.Device)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Device::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:github.com.pyrus.platform.protos.Device)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 id = 1;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->id(), output);
  }

  // .github.com.pyrus.platform.protos.DeviceInfo info = 2;
  if (this->has_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::info(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:github.com.pyrus.platform.protos.Device)
}

::google::protobuf::uint8* Device::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:github.com.pyrus.platform.protos.Device)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 id = 1;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->id(), target);
  }

  // .github.com.pyrus.platform.protos.DeviceInfo info = 2;
  if (this->has_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::info(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:github.com.pyrus.platform.protos.Device)
  return target;
}

size_t Device::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:github.com.pyrus.platform.protos.Device)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .github.com.pyrus.platform.protos.DeviceInfo info = 2;
  if (this->has_info()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *info_);
  }

  // uint64 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Device::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:github.com.pyrus.platform.protos.Device)
  GOOGLE_DCHECK_NE(&from, this);
  const Device* source =
      ::google::protobuf::DynamicCastToGenerated<Device>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:github.com.pyrus.platform.protos.Device)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:github.com.pyrus.platform.protos.Device)
    MergeFrom(*source);
  }
}

void Device::MergeFrom(const Device& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:github.com.pyrus.platform.protos.Device)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_info()) {
    mutable_info()->::github::com::pyrus::platform::protos::DeviceInfo::MergeFrom(from.info());
  }
  if (from.id() != 0) {
    set_id(from.id());
  }
}

void Device::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:github.com.pyrus.platform.protos.Device)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Device::CopyFrom(const Device& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:github.com.pyrus.platform.protos.Device)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Device::IsInitialized() const {
  return true;
}

void Device::Swap(Device* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Device::InternalSwap(Device* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(info_, other->info_);
  swap(id_, other->id_);
}

::google::protobuf::Metadata Device::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_common_2eproto);
  return ::file_level_metadata_common_2eproto[kIndexInFileMessages];
}


// ===================================================================

void DeviceInfo::InitAsDefaultInstance() {
}
class DeviceInfo::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DeviceInfo::kNameFieldNumber;
const int DeviceInfo::kTypeFieldNumber;
const int DeviceInfo::kIpFieldNumber;
const int DeviceInfo::kPortFieldNumber;
const int DeviceInfo::kProducesFieldNumber;
const int DeviceInfo::kConsumesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DeviceInfo::DeviceInfo()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:github.com.pyrus.platform.protos.DeviceInfo)
}
DeviceInfo::DeviceInfo(const DeviceInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      produces_(from.produces_),
      consumes_(from.consumes_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.ip().size() > 0) {
    ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ip_);
  }
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&port_) -
    reinterpret_cast<char*>(&type_)) + sizeof(port_));
  // @@protoc_insertion_point(copy_constructor:github.com.pyrus.platform.protos.DeviceInfo)
}

void DeviceInfo::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_DeviceInfo_common_2eproto.base);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&port_) -
      reinterpret_cast<char*>(&type_)) + sizeof(port_));
}

DeviceInfo::~DeviceInfo() {
  // @@protoc_insertion_point(destructor:github.com.pyrus.platform.protos.DeviceInfo)
  SharedDtor();
}

void DeviceInfo::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ip_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void DeviceInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DeviceInfo& DeviceInfo::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_DeviceInfo_common_2eproto.base);
  return *internal_default_instance();
}


void DeviceInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:github.com.pyrus.platform.protos.DeviceInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  produces_.Clear();
  consumes_.Clear();
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&port_) -
      reinterpret_cast<char*>(&type_)) + sizeof(port_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* DeviceInfo::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<DeviceInfo*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("github.com.pyrus.platform.protos.DeviceInfo.name");
        object = msg->mutable_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // .github.com.pyrus.platform.protos.DeviceType type = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        msg->set_type(static_cast<::github::com::pyrus::platform::protos::DeviceType>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // string ip = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("github.com.pyrus.platform.protos.DeviceInfo.ip");
        object = msg->mutable_ip();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // uint32 port = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_port(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // repeated .github.com.pyrus.platform.protos.DataType produces = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) == 42) {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::google::protobuf::internal::PackedEnumParser;
          object = msg->mutable_produces();
          if (size > end - ptr) goto len_delim_till_end;
          auto newend = ptr + size;
          if (size) ptr = parser_till_end(ptr, newend, object, ctx);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
          break;
        } else if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        do {
          ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
          msg->add_produces(static_cast<::github::com::pyrus::platform::protos::DataType>(val));
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 40 && (ptr += 1));
        break;
      }
      // repeated .github.com.pyrus.platform.protos.DataType consumes = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) == 50) {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::google::protobuf::internal::PackedEnumParser;
          object = msg->mutable_consumes();
          if (size > end - ptr) goto len_delim_till_end;
          auto newend = ptr + size;
          if (size) ptr = parser_till_end(ptr, newend, object, ctx);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
          break;
        } else if (static_cast<::google::protobuf::uint8>(tag) != 48) goto handle_unusual;
        do {
          ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
          msg->add_consumes(static_cast<::github::com::pyrus::platform::protos::DataType>(val));
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 48 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool DeviceInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:github.com.pyrus.platform.protos.DeviceInfo)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "github.com.pyrus.platform.protos.DeviceInfo.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .github.com.pyrus.platform.protos.DeviceType type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::github::com::pyrus::platform::protos::DeviceType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string ip = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->ip().data(), static_cast<int>(this->ip().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "github.com.pyrus.platform.protos.DeviceInfo.ip"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 port = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &port_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .github.com.pyrus.platform.protos.DataType produces = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          ::google::protobuf::uint32 length;
          DO_(input->ReadVarint32(&length));
          ::google::protobuf::io::CodedInputStream::Limit limit = input->PushLimit(static_cast<int>(length));
          while (input->BytesUntilLimit() > 0) {
            int value = 0;
            DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
            add_produces(static_cast< ::github::com::pyrus::platform::protos::DataType >(value));
          }
          input->PopLimit(limit);
        } else if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          add_produces(static_cast< ::github::com::pyrus::platform::protos::DataType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .github.com.pyrus.platform.protos.DataType consumes = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (50 & 0xFF)) {
          ::google::protobuf::uint32 length;
          DO_(input->ReadVarint32(&length));
          ::google::protobuf::io::CodedInputStream::Limit limit = input->PushLimit(static_cast<int>(length));
          while (input->BytesUntilLimit() > 0) {
            int value = 0;
            DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
            add_consumes(static_cast< ::github::com::pyrus::platform::protos::DataType >(value));
          }
          input->PopLimit(limit);
        } else if (static_cast< ::google::protobuf::uint8>(tag) == (48 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          add_consumes(static_cast< ::github::com::pyrus::platform::protos::DataType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:github.com.pyrus.platform.protos.DeviceInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:github.com.pyrus.platform.protos.DeviceInfo)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void DeviceInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:github.com.pyrus.platform.protos.DeviceInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "github.com.pyrus.platform.protos.DeviceInfo.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // .github.com.pyrus.platform.protos.DeviceType type = 2;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

  // string ip = 3;
  if (this->ip().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ip().data(), static_cast<int>(this->ip().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "github.com.pyrus.platform.protos.DeviceInfo.ip");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->ip(), output);
  }

  // uint32 port = 4;
  if (this->port() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->port(), output);
  }

  // repeated .github.com.pyrus.platform.protos.DataType produces = 5;
  if (this->produces_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(
      5,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      output);
    output->WriteVarint32(_produces_cached_byte_size_.load(
        std::memory_order_relaxed));
  }
  for (int i = 0, n = this->produces_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteEnumNoTag(
      this->produces(i), output);
  }

  // repeated .github.com.pyrus.platform.protos.DataType consumes = 6;
  if (this->consumes_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(
      6,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      output);
    output->WriteVarint32(_consumes_cached_byte_size_.load(
        std::memory_order_relaxed));
  }
  for (int i = 0, n = this->consumes_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteEnumNoTag(
      this->consumes(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:github.com.pyrus.platform.protos.DeviceInfo)
}

::google::protobuf::uint8* DeviceInfo::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:github.com.pyrus.platform.protos.DeviceInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "github.com.pyrus.platform.protos.DeviceInfo.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // .github.com.pyrus.platform.protos.DeviceType type = 2;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }

  // string ip = 3;
  if (this->ip().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ip().data(), static_cast<int>(this->ip().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "github.com.pyrus.platform.protos.DeviceInfo.ip");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->ip(), target);
  }

  // uint32 port = 4;
  if (this->port() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->port(), target);
  }

  // repeated .github.com.pyrus.platform.protos.DataType produces = 5;
  if (this->produces_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      5,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(      _produces_cached_byte_size_.load(std::memory_order_relaxed),
        target);
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumNoTagToArray(
      this->produces_, target);
  }

  // repeated .github.com.pyrus.platform.protos.DataType consumes = 6;
  if (this->consumes_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      6,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(      _consumes_cached_byte_size_.load(std::memory_order_relaxed),
        target);
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumNoTagToArray(
      this->consumes_, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:github.com.pyrus.platform.protos.DeviceInfo)
  return target;
}

size_t DeviceInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:github.com.pyrus.platform.protos.DeviceInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .github.com.pyrus.platform.protos.DataType produces = 5;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->produces_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::EnumSize(
        this->produces(static_cast<int>(i)));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast<::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    _produces_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated .github.com.pyrus.platform.protos.DataType consumes = 6;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->consumes_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::EnumSize(
        this->consumes(static_cast<int>(i)));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast<::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    _consumes_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // string ip = 3;
  if (this->ip().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->ip());
  }

  // .github.com.pyrus.platform.protos.DeviceType type = 2;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  // uint32 port = 4;
  if (this->port() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->port());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeviceInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:github.com.pyrus.platform.protos.DeviceInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const DeviceInfo* source =
      ::google::protobuf::DynamicCastToGenerated<DeviceInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:github.com.pyrus.platform.protos.DeviceInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:github.com.pyrus.platform.protos.DeviceInfo)
    MergeFrom(*source);
  }
}

void DeviceInfo::MergeFrom(const DeviceInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:github.com.pyrus.platform.protos.DeviceInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  produces_.MergeFrom(from.produces_);
  consumes_.MergeFrom(from.consumes_);
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.ip().size() > 0) {

    ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ip_);
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
  if (from.port() != 0) {
    set_port(from.port());
  }
}

void DeviceInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:github.com.pyrus.platform.protos.DeviceInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeviceInfo::CopyFrom(const DeviceInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:github.com.pyrus.platform.protos.DeviceInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeviceInfo::IsInitialized() const {
  return true;
}

void DeviceInfo::Swap(DeviceInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DeviceInfo::InternalSwap(DeviceInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  produces_.InternalSwap(&other->produces_);
  consumes_.InternalSwap(&other->consumes_);
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  ip_.Swap(&other->ip_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(type_, other->type_);
  swap(port_, other->port_);
}

::google::protobuf::Metadata DeviceInfo::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_common_2eproto);
  return ::file_level_metadata_common_2eproto[kIndexInFileMessages];
}


// ===================================================================

void Coordinates::InitAsDefaultInstance() {
}
class Coordinates::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Coordinates::kXFieldNumber;
const int Coordinates::kYFieldNumber;
const int Coordinates::kZFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Coordinates::Coordinates()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:github.com.pyrus.platform.protos.Coordinates)
}
Coordinates::Coordinates(const Coordinates& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&z_) -
    reinterpret_cast<char*>(&x_)) + sizeof(z_));
  // @@protoc_insertion_point(copy_constructor:github.com.pyrus.platform.protos.Coordinates)
}

void Coordinates::SharedCtor() {
  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&z_) -
      reinterpret_cast<char*>(&x_)) + sizeof(z_));
}

Coordinates::~Coordinates() {
  // @@protoc_insertion_point(destructor:github.com.pyrus.platform.protos.Coordinates)
  SharedDtor();
}

void Coordinates::SharedDtor() {
}

void Coordinates::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Coordinates& Coordinates::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Coordinates_common_2eproto.base);
  return *internal_default_instance();
}


void Coordinates::Clear() {
// @@protoc_insertion_point(message_clear_start:github.com.pyrus.platform.protos.Coordinates)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&z_) -
      reinterpret_cast<char*>(&x_)) + sizeof(z_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Coordinates::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Coordinates*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // float x = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 13) goto handle_unusual;
        msg->set_x(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      // float y = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 21) goto handle_unusual;
        msg->set_y(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      // float z = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 29) goto handle_unusual;
        msg->set_z(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Coordinates::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:github.com.pyrus.platform.protos.Coordinates)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // float x = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (13 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float y = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (21 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float z = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (29 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &z_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:github.com.pyrus.platform.protos.Coordinates)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:github.com.pyrus.platform.protos.Coordinates)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Coordinates::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:github.com.pyrus.platform.protos.Coordinates)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float x = 1;
  if (this->x() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->x(), output);
  }

  // float y = 2;
  if (this->y() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->y(), output);
  }

  // float z = 3;
  if (this->z() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->z(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:github.com.pyrus.platform.protos.Coordinates)
}

::google::protobuf::uint8* Coordinates::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:github.com.pyrus.platform.protos.Coordinates)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float x = 1;
  if (this->x() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->x(), target);
  }

  // float y = 2;
  if (this->y() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->y(), target);
  }

  // float z = 3;
  if (this->z() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->z(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:github.com.pyrus.platform.protos.Coordinates)
  return target;
}

size_t Coordinates::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:github.com.pyrus.platform.protos.Coordinates)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float x = 1;
  if (this->x() != 0) {
    total_size += 1 + 4;
  }

  // float y = 2;
  if (this->y() != 0) {
    total_size += 1 + 4;
  }

  // float z = 3;
  if (this->z() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Coordinates::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:github.com.pyrus.platform.protos.Coordinates)
  GOOGLE_DCHECK_NE(&from, this);
  const Coordinates* source =
      ::google::protobuf::DynamicCastToGenerated<Coordinates>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:github.com.pyrus.platform.protos.Coordinates)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:github.com.pyrus.platform.protos.Coordinates)
    MergeFrom(*source);
  }
}

void Coordinates::MergeFrom(const Coordinates& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:github.com.pyrus.platform.protos.Coordinates)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.x() != 0) {
    set_x(from.x());
  }
  if (from.y() != 0) {
    set_y(from.y());
  }
  if (from.z() != 0) {
    set_z(from.z());
  }
}

void Coordinates::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:github.com.pyrus.platform.protos.Coordinates)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Coordinates::CopyFrom(const Coordinates& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:github.com.pyrus.platform.protos.Coordinates)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Coordinates::IsInitialized() const {
  return true;
}

void Coordinates::Swap(Coordinates* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Coordinates::InternalSwap(Coordinates* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(x_, other->x_);
  swap(y_, other->y_);
  swap(z_, other->z_);
}

::google::protobuf::Metadata Coordinates::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_common_2eproto);
  return ::file_level_metadata_common_2eproto[kIndexInFileMessages];
}


// ===================================================================

void Quaternion::InitAsDefaultInstance() {
}
class Quaternion::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Quaternion::kWFieldNumber;
const int Quaternion::kXFieldNumber;
const int Quaternion::kYFieldNumber;
const int Quaternion::kZFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Quaternion::Quaternion()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:github.com.pyrus.platform.protos.Quaternion)
}
Quaternion::Quaternion(const Quaternion& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&w_, &from.w_,
    static_cast<size_t>(reinterpret_cast<char*>(&z_) -
    reinterpret_cast<char*>(&w_)) + sizeof(z_));
  // @@protoc_insertion_point(copy_constructor:github.com.pyrus.platform.protos.Quaternion)
}

void Quaternion::SharedCtor() {
  ::memset(&w_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&z_) -
      reinterpret_cast<char*>(&w_)) + sizeof(z_));
}

Quaternion::~Quaternion() {
  // @@protoc_insertion_point(destructor:github.com.pyrus.platform.protos.Quaternion)
  SharedDtor();
}

void Quaternion::SharedDtor() {
}

void Quaternion::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Quaternion& Quaternion::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Quaternion_common_2eproto.base);
  return *internal_default_instance();
}


void Quaternion::Clear() {
// @@protoc_insertion_point(message_clear_start:github.com.pyrus.platform.protos.Quaternion)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&w_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&z_) -
      reinterpret_cast<char*>(&w_)) + sizeof(z_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Quaternion::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Quaternion*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // float w = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 13) goto handle_unusual;
        msg->set_w(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      // float x = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 21) goto handle_unusual;
        msg->set_x(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      // float y = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 29) goto handle_unusual;
        msg->set_y(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      // float z = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 37) goto handle_unusual;
        msg->set_z(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Quaternion::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:github.com.pyrus.platform.protos.Quaternion)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // float w = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (13 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &w_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float x = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (21 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float y = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (29 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float z = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (37 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &z_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:github.com.pyrus.platform.protos.Quaternion)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:github.com.pyrus.platform.protos.Quaternion)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Quaternion::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:github.com.pyrus.platform.protos.Quaternion)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float w = 1;
  if (this->w() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->w(), output);
  }

  // float x = 2;
  if (this->x() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->x(), output);
  }

  // float y = 3;
  if (this->y() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->y(), output);
  }

  // float z = 4;
  if (this->z() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->z(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:github.com.pyrus.platform.protos.Quaternion)
}

::google::protobuf::uint8* Quaternion::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:github.com.pyrus.platform.protos.Quaternion)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float w = 1;
  if (this->w() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->w(), target);
  }

  // float x = 2;
  if (this->x() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->x(), target);
  }

  // float y = 3;
  if (this->y() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->y(), target);
  }

  // float z = 4;
  if (this->z() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->z(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:github.com.pyrus.platform.protos.Quaternion)
  return target;
}

size_t Quaternion::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:github.com.pyrus.platform.protos.Quaternion)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float w = 1;
  if (this->w() != 0) {
    total_size += 1 + 4;
  }

  // float x = 2;
  if (this->x() != 0) {
    total_size += 1 + 4;
  }

  // float y = 3;
  if (this->y() != 0) {
    total_size += 1 + 4;
  }

  // float z = 4;
  if (this->z() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Quaternion::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:github.com.pyrus.platform.protos.Quaternion)
  GOOGLE_DCHECK_NE(&from, this);
  const Quaternion* source =
      ::google::protobuf::DynamicCastToGenerated<Quaternion>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:github.com.pyrus.platform.protos.Quaternion)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:github.com.pyrus.platform.protos.Quaternion)
    MergeFrom(*source);
  }
}

void Quaternion::MergeFrom(const Quaternion& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:github.com.pyrus.platform.protos.Quaternion)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.w() != 0) {
    set_w(from.w());
  }
  if (from.x() != 0) {
    set_x(from.x());
  }
  if (from.y() != 0) {
    set_y(from.y());
  }
  if (from.z() != 0) {
    set_z(from.z());
  }
}

void Quaternion::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:github.com.pyrus.platform.protos.Quaternion)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Quaternion::CopyFrom(const Quaternion& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:github.com.pyrus.platform.protos.Quaternion)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Quaternion::IsInitialized() const {
  return true;
}

void Quaternion::Swap(Quaternion* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Quaternion::InternalSwap(Quaternion* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(w_, other->w_);
  swap(x_, other->x_);
  swap(y_, other->y_);
  swap(z_, other->z_);
}

::google::protobuf::Metadata Quaternion::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_common_2eproto);
  return ::file_level_metadata_common_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CatheterCoordinates::InitAsDefaultInstance() {
  ::github::com::pyrus::platform::protos::_CatheterCoordinates_default_instance_._instance.get_mutable()->position_ = const_cast< ::github::com::pyrus::platform::protos::Coordinates*>(
      ::github::com::pyrus::platform::protos::Coordinates::internal_default_instance());
  ::github::com::pyrus::platform::protos::_CatheterCoordinates_default_instance_._instance.get_mutable()->rotation_ = const_cast< ::github::com::pyrus::platform::protos::Quaternion*>(
      ::github::com::pyrus::platform::protos::Quaternion::internal_default_instance());
}
class CatheterCoordinates::HasBitSetters {
 public:
  static const ::github::com::pyrus::platform::protos::Coordinates& position(const CatheterCoordinates* msg);
  static const ::github::com::pyrus::platform::protos::Quaternion& rotation(const CatheterCoordinates* msg);
};

const ::github::com::pyrus::platform::protos::Coordinates&
CatheterCoordinates::HasBitSetters::position(const CatheterCoordinates* msg) {
  return *msg->position_;
}
const ::github::com::pyrus::platform::protos::Quaternion&
CatheterCoordinates::HasBitSetters::rotation(const CatheterCoordinates* msg) {
  return *msg->rotation_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CatheterCoordinates::kPositionFieldNumber;
const int CatheterCoordinates::kRotationFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CatheterCoordinates::CatheterCoordinates()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:github.com.pyrus.platform.protos.CatheterCoordinates)
}
CatheterCoordinates::CatheterCoordinates(const CatheterCoordinates& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_position()) {
    position_ = new ::github::com::pyrus::platform::protos::Coordinates(*from.position_);
  } else {
    position_ = nullptr;
  }
  if (from.has_rotation()) {
    rotation_ = new ::github::com::pyrus::platform::protos::Quaternion(*from.rotation_);
  } else {
    rotation_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:github.com.pyrus.platform.protos.CatheterCoordinates)
}

void CatheterCoordinates::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CatheterCoordinates_common_2eproto.base);
  ::memset(&position_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&rotation_) -
      reinterpret_cast<char*>(&position_)) + sizeof(rotation_));
}

CatheterCoordinates::~CatheterCoordinates() {
  // @@protoc_insertion_point(destructor:github.com.pyrus.platform.protos.CatheterCoordinates)
  SharedDtor();
}

void CatheterCoordinates::SharedDtor() {
  if (this != internal_default_instance()) delete position_;
  if (this != internal_default_instance()) delete rotation_;
}

void CatheterCoordinates::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CatheterCoordinates& CatheterCoordinates::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CatheterCoordinates_common_2eproto.base);
  return *internal_default_instance();
}


void CatheterCoordinates::Clear() {
// @@protoc_insertion_point(message_clear_start:github.com.pyrus.platform.protos.CatheterCoordinates)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && position_ != nullptr) {
    delete position_;
  }
  position_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && rotation_ != nullptr) {
    delete rotation_;
  }
  rotation_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CatheterCoordinates::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CatheterCoordinates*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .github.com.pyrus.platform.protos.Coordinates position = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::github::com::pyrus::platform::protos::Coordinates::_InternalParse;
        object = msg->mutable_position();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .github.com.pyrus.platform.protos.Quaternion rotation = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::github::com::pyrus::platform::protos::Quaternion::_InternalParse;
        object = msg->mutable_rotation();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CatheterCoordinates::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:github.com.pyrus.platform.protos.CatheterCoordinates)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .github.com.pyrus.platform.protos.Coordinates position = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_position()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .github.com.pyrus.platform.protos.Quaternion rotation = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_rotation()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:github.com.pyrus.platform.protos.CatheterCoordinates)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:github.com.pyrus.platform.protos.CatheterCoordinates)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CatheterCoordinates::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:github.com.pyrus.platform.protos.CatheterCoordinates)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .github.com.pyrus.platform.protos.Coordinates position = 1;
  if (this->has_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::position(this), output);
  }

  // .github.com.pyrus.platform.protos.Quaternion rotation = 2;
  if (this->has_rotation()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::rotation(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:github.com.pyrus.platform.protos.CatheterCoordinates)
}

::google::protobuf::uint8* CatheterCoordinates::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:github.com.pyrus.platform.protos.CatheterCoordinates)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .github.com.pyrus.platform.protos.Coordinates position = 1;
  if (this->has_position()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::position(this), target);
  }

  // .github.com.pyrus.platform.protos.Quaternion rotation = 2;
  if (this->has_rotation()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::rotation(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:github.com.pyrus.platform.protos.CatheterCoordinates)
  return target;
}

size_t CatheterCoordinates::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:github.com.pyrus.platform.protos.CatheterCoordinates)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .github.com.pyrus.platform.protos.Coordinates position = 1;
  if (this->has_position()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *position_);
  }

  // .github.com.pyrus.platform.protos.Quaternion rotation = 2;
  if (this->has_rotation()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *rotation_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CatheterCoordinates::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:github.com.pyrus.platform.protos.CatheterCoordinates)
  GOOGLE_DCHECK_NE(&from, this);
  const CatheterCoordinates* source =
      ::google::protobuf::DynamicCastToGenerated<CatheterCoordinates>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:github.com.pyrus.platform.protos.CatheterCoordinates)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:github.com.pyrus.platform.protos.CatheterCoordinates)
    MergeFrom(*source);
  }
}

void CatheterCoordinates::MergeFrom(const CatheterCoordinates& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:github.com.pyrus.platform.protos.CatheterCoordinates)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_position()) {
    mutable_position()->::github::com::pyrus::platform::protos::Coordinates::MergeFrom(from.position());
  }
  if (from.has_rotation()) {
    mutable_rotation()->::github::com::pyrus::platform::protos::Quaternion::MergeFrom(from.rotation());
  }
}

void CatheterCoordinates::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:github.com.pyrus.platform.protos.CatheterCoordinates)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CatheterCoordinates::CopyFrom(const CatheterCoordinates& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:github.com.pyrus.platform.protos.CatheterCoordinates)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CatheterCoordinates::IsInitialized() const {
  return true;
}

void CatheterCoordinates::Swap(CatheterCoordinates* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CatheterCoordinates::InternalSwap(CatheterCoordinates* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(position_, other->position_);
  swap(rotation_, other->rotation_);
}

::google::protobuf::Metadata CatheterCoordinates::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_common_2eproto);
  return ::file_level_metadata_common_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CatheterData::InitAsDefaultInstance() {
  ::github::com::pyrus::platform::protos::_CatheterData_default_instance_._instance.get_mutable()->coordinates_ = const_cast< ::github::com::pyrus::platform::protos::CatheterCoordinates*>(
      ::github::com::pyrus::platform::protos::CatheterCoordinates::internal_default_instance());
}
class CatheterData::HasBitSetters {
 public:
  static const ::github::com::pyrus::platform::protos::CatheterCoordinates& coordinates(const CatheterData* msg);
};

const ::github::com::pyrus::platform::protos::CatheterCoordinates&
CatheterData::HasBitSetters::coordinates(const CatheterData* msg) {
  return *msg->coordinates_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CatheterData::kSensorIdFieldNumber;
const int CatheterData::kCoordinatesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CatheterData::CatheterData()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:github.com.pyrus.platform.protos.CatheterData)
}
CatheterData::CatheterData(const CatheterData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_coordinates()) {
    coordinates_ = new ::github::com::pyrus::platform::protos::CatheterCoordinates(*from.coordinates_);
  } else {
    coordinates_ = nullptr;
  }
  sensorid_ = from.sensorid_;
  // @@protoc_insertion_point(copy_constructor:github.com.pyrus.platform.protos.CatheterData)
}

void CatheterData::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CatheterData_common_2eproto.base);
  ::memset(&coordinates_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sensorid_) -
      reinterpret_cast<char*>(&coordinates_)) + sizeof(sensorid_));
}

CatheterData::~CatheterData() {
  // @@protoc_insertion_point(destructor:github.com.pyrus.platform.protos.CatheterData)
  SharedDtor();
}

void CatheterData::SharedDtor() {
  if (this != internal_default_instance()) delete coordinates_;
}

void CatheterData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CatheterData& CatheterData::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CatheterData_common_2eproto.base);
  return *internal_default_instance();
}


void CatheterData::Clear() {
// @@protoc_insertion_point(message_clear_start:github.com.pyrus.platform.protos.CatheterData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && coordinates_ != nullptr) {
    delete coordinates_;
  }
  coordinates_ = nullptr;
  sensorid_ = 0u;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CatheterData::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CatheterData*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // uint32 sensorId = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_sensorid(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // .github.com.pyrus.platform.protos.CatheterCoordinates coordinates = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::github::com::pyrus::platform::protos::CatheterCoordinates::_InternalParse;
        object = msg->mutable_coordinates();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CatheterData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:github.com.pyrus.platform.protos.CatheterData)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 sensorId = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sensorid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .github.com.pyrus.platform.protos.CatheterCoordinates coordinates = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_coordinates()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:github.com.pyrus.platform.protos.CatheterData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:github.com.pyrus.platform.protos.CatheterData)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CatheterData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:github.com.pyrus.platform.protos.CatheterData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 sensorId = 1;
  if (this->sensorid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->sensorid(), output);
  }

  // .github.com.pyrus.platform.protos.CatheterCoordinates coordinates = 2;
  if (this->has_coordinates()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::coordinates(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:github.com.pyrus.platform.protos.CatheterData)
}

::google::protobuf::uint8* CatheterData::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:github.com.pyrus.platform.protos.CatheterData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 sensorId = 1;
  if (this->sensorid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->sensorid(), target);
  }

  // .github.com.pyrus.platform.protos.CatheterCoordinates coordinates = 2;
  if (this->has_coordinates()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::coordinates(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:github.com.pyrus.platform.protos.CatheterData)
  return target;
}

size_t CatheterData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:github.com.pyrus.platform.protos.CatheterData)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .github.com.pyrus.platform.protos.CatheterCoordinates coordinates = 2;
  if (this->has_coordinates()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *coordinates_);
  }

  // uint32 sensorId = 1;
  if (this->sensorid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->sensorid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CatheterData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:github.com.pyrus.platform.protos.CatheterData)
  GOOGLE_DCHECK_NE(&from, this);
  const CatheterData* source =
      ::google::protobuf::DynamicCastToGenerated<CatheterData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:github.com.pyrus.platform.protos.CatheterData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:github.com.pyrus.platform.protos.CatheterData)
    MergeFrom(*source);
  }
}

void CatheterData::MergeFrom(const CatheterData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:github.com.pyrus.platform.protos.CatheterData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_coordinates()) {
    mutable_coordinates()->::github::com::pyrus::platform::protos::CatheterCoordinates::MergeFrom(from.coordinates());
  }
  if (from.sensorid() != 0) {
    set_sensorid(from.sensorid());
  }
}

void CatheterData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:github.com.pyrus.platform.protos.CatheterData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CatheterData::CopyFrom(const CatheterData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:github.com.pyrus.platform.protos.CatheterData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CatheterData::IsInitialized() const {
  return true;
}

void CatheterData::Swap(CatheterData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CatheterData::InternalSwap(CatheterData* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(coordinates_, other->coordinates_);
  swap(sensorid_, other->sensorid_);
}

::google::protobuf::Metadata CatheterData::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_common_2eproto);
  return ::file_level_metadata_common_2eproto[kIndexInFileMessages];
}


// ===================================================================

void RobotControllerData::InitAsDefaultInstance() {
}
class RobotControllerData::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RobotControllerData::kMovementVelocityFieldNumber;
const int RobotControllerData::kRotationVelocityFieldNumber;
const int RobotControllerData::kDeflectionVelocityFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RobotControllerData::RobotControllerData()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:github.com.pyrus.platform.protos.RobotControllerData)
}
RobotControllerData::RobotControllerData(const RobotControllerData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&movementvelocity_, &from.movementvelocity_,
    static_cast<size_t>(reinterpret_cast<char*>(&deflectionvelocity_) -
    reinterpret_cast<char*>(&movementvelocity_)) + sizeof(deflectionvelocity_));
  // @@protoc_insertion_point(copy_constructor:github.com.pyrus.platform.protos.RobotControllerData)
}

void RobotControllerData::SharedCtor() {
  ::memset(&movementvelocity_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&deflectionvelocity_) -
      reinterpret_cast<char*>(&movementvelocity_)) + sizeof(deflectionvelocity_));
}

RobotControllerData::~RobotControllerData() {
  // @@protoc_insertion_point(destructor:github.com.pyrus.platform.protos.RobotControllerData)
  SharedDtor();
}

void RobotControllerData::SharedDtor() {
}

void RobotControllerData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RobotControllerData& RobotControllerData::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_RobotControllerData_common_2eproto.base);
  return *internal_default_instance();
}


void RobotControllerData::Clear() {
// @@protoc_insertion_point(message_clear_start:github.com.pyrus.platform.protos.RobotControllerData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&movementvelocity_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&deflectionvelocity_) -
      reinterpret_cast<char*>(&movementvelocity_)) + sizeof(deflectionvelocity_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* RobotControllerData::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<RobotControllerData*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // float movementVelocity = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 13) goto handle_unusual;
        msg->set_movementvelocity(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      // float rotationVelocity = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 21) goto handle_unusual;
        msg->set_rotationvelocity(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      // float deflectionVelocity = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 29) goto handle_unusual;
        msg->set_deflectionvelocity(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool RobotControllerData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:github.com.pyrus.platform.protos.RobotControllerData)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // float movementVelocity = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (13 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &movementvelocity_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float rotationVelocity = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (21 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &rotationvelocity_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float deflectionVelocity = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (29 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &deflectionvelocity_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:github.com.pyrus.platform.protos.RobotControllerData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:github.com.pyrus.platform.protos.RobotControllerData)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void RobotControllerData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:github.com.pyrus.platform.protos.RobotControllerData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float movementVelocity = 1;
  if (this->movementvelocity() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->movementvelocity(), output);
  }

  // float rotationVelocity = 2;
  if (this->rotationvelocity() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->rotationvelocity(), output);
  }

  // float deflectionVelocity = 3;
  if (this->deflectionvelocity() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->deflectionvelocity(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:github.com.pyrus.platform.protos.RobotControllerData)
}

::google::protobuf::uint8* RobotControllerData::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:github.com.pyrus.platform.protos.RobotControllerData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float movementVelocity = 1;
  if (this->movementvelocity() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->movementvelocity(), target);
  }

  // float rotationVelocity = 2;
  if (this->rotationvelocity() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->rotationvelocity(), target);
  }

  // float deflectionVelocity = 3;
  if (this->deflectionvelocity() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->deflectionvelocity(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:github.com.pyrus.platform.protos.RobotControllerData)
  return target;
}

size_t RobotControllerData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:github.com.pyrus.platform.protos.RobotControllerData)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float movementVelocity = 1;
  if (this->movementvelocity() != 0) {
    total_size += 1 + 4;
  }

  // float rotationVelocity = 2;
  if (this->rotationvelocity() != 0) {
    total_size += 1 + 4;
  }

  // float deflectionVelocity = 3;
  if (this->deflectionvelocity() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RobotControllerData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:github.com.pyrus.platform.protos.RobotControllerData)
  GOOGLE_DCHECK_NE(&from, this);
  const RobotControllerData* source =
      ::google::protobuf::DynamicCastToGenerated<RobotControllerData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:github.com.pyrus.platform.protos.RobotControllerData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:github.com.pyrus.platform.protos.RobotControllerData)
    MergeFrom(*source);
  }
}

void RobotControllerData::MergeFrom(const RobotControllerData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:github.com.pyrus.platform.protos.RobotControllerData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.movementvelocity() != 0) {
    set_movementvelocity(from.movementvelocity());
  }
  if (from.rotationvelocity() != 0) {
    set_rotationvelocity(from.rotationvelocity());
  }
  if (from.deflectionvelocity() != 0) {
    set_deflectionvelocity(from.deflectionvelocity());
  }
}

void RobotControllerData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:github.com.pyrus.platform.protos.RobotControllerData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RobotControllerData::CopyFrom(const RobotControllerData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:github.com.pyrus.platform.protos.RobotControllerData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RobotControllerData::IsInitialized() const {
  return true;
}

void RobotControllerData::Swap(RobotControllerData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RobotControllerData::InternalSwap(RobotControllerData* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(movementvelocity_, other->movementvelocity_);
  swap(rotationvelocity_, other->rotationvelocity_);
  swap(deflectionvelocity_, other->deflectionvelocity_);
}

::google::protobuf::Metadata RobotControllerData::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_common_2eproto);
  return ::file_level_metadata_common_2eproto[kIndexInFileMessages];
}


// ===================================================================

void NullableRobotControllerData::InitAsDefaultInstance() {
  ::github::com::pyrus::platform::protos::_NullableRobotControllerData_default_instance_.null_ = 0;
  ::github::com::pyrus::platform::protos::_NullableRobotControllerData_default_instance_.data_ = const_cast< ::github::com::pyrus::platform::protos::RobotControllerData*>(
      ::github::com::pyrus::platform::protos::RobotControllerData::internal_default_instance());
}
class NullableRobotControllerData::HasBitSetters {
 public:
  static const ::github::com::pyrus::platform::protos::RobotControllerData& data(const NullableRobotControllerData* msg);
};

const ::github::com::pyrus::platform::protos::RobotControllerData&
NullableRobotControllerData::HasBitSetters::data(const NullableRobotControllerData* msg) {
  return *msg->kind_.data_;
}
void NullableRobotControllerData::set_allocated_data(::github::com::pyrus::platform::protos::RobotControllerData* data) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_kind();
  if (data) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      data = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, data, submessage_arena);
    }
    set_has_data();
    kind_.data_ = data;
  }
  // @@protoc_insertion_point(field_set_allocated:github.com.pyrus.platform.protos.NullableRobotControllerData.data)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NullableRobotControllerData::kNullFieldNumber;
const int NullableRobotControllerData::kDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NullableRobotControllerData::NullableRobotControllerData()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:github.com.pyrus.platform.protos.NullableRobotControllerData)
}
NullableRobotControllerData::NullableRobotControllerData(const NullableRobotControllerData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_kind();
  switch (from.kind_case()) {
    case kNull: {
      set_null(from.null());
      break;
    }
    case kData: {
      mutable_data()->::github::com::pyrus::platform::protos::RobotControllerData::MergeFrom(from.data());
      break;
    }
    case KIND_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:github.com.pyrus.platform.protos.NullableRobotControllerData)
}

void NullableRobotControllerData::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_NullableRobotControllerData_common_2eproto.base);
  clear_has_kind();
}

NullableRobotControllerData::~NullableRobotControllerData() {
  // @@protoc_insertion_point(destructor:github.com.pyrus.platform.protos.NullableRobotControllerData)
  SharedDtor();
}

void NullableRobotControllerData::SharedDtor() {
  if (has_kind()) {
    clear_kind();
  }
}

void NullableRobotControllerData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NullableRobotControllerData& NullableRobotControllerData::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_NullableRobotControllerData_common_2eproto.base);
  return *internal_default_instance();
}


void NullableRobotControllerData::clear_kind() {
// @@protoc_insertion_point(one_of_clear_start:github.com.pyrus.platform.protos.NullableRobotControllerData)
  switch (kind_case()) {
    case kNull: {
      // No need to clear
      break;
    }
    case kData: {
      delete kind_.data_;
      break;
    }
    case KIND_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = KIND_NOT_SET;
}


void NullableRobotControllerData::Clear() {
// @@protoc_insertion_point(message_clear_start:github.com.pyrus.platform.protos.NullableRobotControllerData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_kind();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* NullableRobotControllerData::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<NullableRobotControllerData*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .google.protobuf.NullValue null = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        msg->set_null(static_cast<::google::protobuf::NullValue>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // .github.com.pyrus.platform.protos.RobotControllerData data = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::github::com::pyrus::platform::protos::RobotControllerData::_InternalParse;
        object = msg->mutable_data();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool NullableRobotControllerData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:github.com.pyrus.platform.protos.NullableRobotControllerData)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .google.protobuf.NullValue null = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_null(static_cast< ::google::protobuf::NullValue >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .github.com.pyrus.platform.protos.RobotControllerData data = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:github.com.pyrus.platform.protos.NullableRobotControllerData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:github.com.pyrus.platform.protos.NullableRobotControllerData)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void NullableRobotControllerData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:github.com.pyrus.platform.protos.NullableRobotControllerData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.NullValue null = 1;
  if (has_null()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->null(), output);
  }

  // .github.com.pyrus.platform.protos.RobotControllerData data = 2;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::data(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:github.com.pyrus.platform.protos.NullableRobotControllerData)
}

::google::protobuf::uint8* NullableRobotControllerData::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:github.com.pyrus.platform.protos.NullableRobotControllerData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.NullValue null = 1;
  if (has_null()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->null(), target);
  }

  // .github.com.pyrus.platform.protos.RobotControllerData data = 2;
  if (has_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::data(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:github.com.pyrus.platform.protos.NullableRobotControllerData)
  return target;
}

size_t NullableRobotControllerData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:github.com.pyrus.platform.protos.NullableRobotControllerData)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (kind_case()) {
    // .google.protobuf.NullValue null = 1;
    case kNull: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->null());
      break;
    }
    // .github.com.pyrus.platform.protos.RobotControllerData data = 2;
    case kData: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *kind_.data_);
      break;
    }
    case KIND_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NullableRobotControllerData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:github.com.pyrus.platform.protos.NullableRobotControllerData)
  GOOGLE_DCHECK_NE(&from, this);
  const NullableRobotControllerData* source =
      ::google::protobuf::DynamicCastToGenerated<NullableRobotControllerData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:github.com.pyrus.platform.protos.NullableRobotControllerData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:github.com.pyrus.platform.protos.NullableRobotControllerData)
    MergeFrom(*source);
  }
}

void NullableRobotControllerData::MergeFrom(const NullableRobotControllerData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:github.com.pyrus.platform.protos.NullableRobotControllerData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.kind_case()) {
    case kNull: {
      set_null(from.null());
      break;
    }
    case kData: {
      mutable_data()->::github::com::pyrus::platform::protos::RobotControllerData::MergeFrom(from.data());
      break;
    }
    case KIND_NOT_SET: {
      break;
    }
  }
}

void NullableRobotControllerData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:github.com.pyrus.platform.protos.NullableRobotControllerData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NullableRobotControllerData::CopyFrom(const NullableRobotControllerData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:github.com.pyrus.platform.protos.NullableRobotControllerData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NullableRobotControllerData::IsInitialized() const {
  return true;
}

void NullableRobotControllerData::Swap(NullableRobotControllerData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NullableRobotControllerData::InternalSwap(NullableRobotControllerData* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(kind_, other->kind_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::google::protobuf::Metadata NullableRobotControllerData::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_common_2eproto);
  return ::file_level_metadata_common_2eproto[kIndexInFileMessages];
}


// ===================================================================

void ElectricalSignalData::InitAsDefaultInstance() {
  ::github::com::pyrus::platform::protos::_ElectricalSignalData_default_instance_._instance.get_mutable()->created_ = const_cast< ::google::protobuf::Timestamp*>(
      ::google::protobuf::Timestamp::internal_default_instance());
}
class ElectricalSignalData::HasBitSetters {
 public:
  static const ::google::protobuf::Timestamp& created(const ElectricalSignalData* msg);
};

const ::google::protobuf::Timestamp&
ElectricalSignalData::HasBitSetters::created(const ElectricalSignalData* msg) {
  return *msg->created_;
}
void ElectricalSignalData::clear_created() {
  if (GetArenaNoVirtual() == nullptr && created_ != nullptr) {
    delete created_;
  }
  created_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ElectricalSignalData::kSignalIdFieldNumber;
const int ElectricalSignalData::kValueFieldNumber;
const int ElectricalSignalData::kCreatedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ElectricalSignalData::ElectricalSignalData()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:github.com.pyrus.platform.protos.ElectricalSignalData)
}
ElectricalSignalData::ElectricalSignalData(const ElectricalSignalData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_created()) {
    created_ = new ::google::protobuf::Timestamp(*from.created_);
  } else {
    created_ = nullptr;
  }
  ::memcpy(&signalid_, &from.signalid_,
    static_cast<size_t>(reinterpret_cast<char*>(&value_) -
    reinterpret_cast<char*>(&signalid_)) + sizeof(value_));
  // @@protoc_insertion_point(copy_constructor:github.com.pyrus.platform.protos.ElectricalSignalData)
}

void ElectricalSignalData::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_ElectricalSignalData_common_2eproto.base);
  ::memset(&created_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&value_) -
      reinterpret_cast<char*>(&created_)) + sizeof(value_));
}

ElectricalSignalData::~ElectricalSignalData() {
  // @@protoc_insertion_point(destructor:github.com.pyrus.platform.protos.ElectricalSignalData)
  SharedDtor();
}

void ElectricalSignalData::SharedDtor() {
  if (this != internal_default_instance()) delete created_;
}

void ElectricalSignalData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ElectricalSignalData& ElectricalSignalData::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_ElectricalSignalData_common_2eproto.base);
  return *internal_default_instance();
}


void ElectricalSignalData::Clear() {
// @@protoc_insertion_point(message_clear_start:github.com.pyrus.platform.protos.ElectricalSignalData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && created_ != nullptr) {
    delete created_;
  }
  created_ = nullptr;
  ::memset(&signalid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&value_) -
      reinterpret_cast<char*>(&signalid_)) + sizeof(value_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ElectricalSignalData::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<ElectricalSignalData*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // uint32 signalId = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_signalid(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // float value = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 21) goto handle_unusual;
        msg->set_value(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      // .google.protobuf.Timestamp created = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::Timestamp::_InternalParse;
        object = msg->mutable_created();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ElectricalSignalData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:github.com.pyrus.platform.protos.ElectricalSignalData)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 signalId = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &signalid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float value = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (21 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &value_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Timestamp created = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_created()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:github.com.pyrus.platform.protos.ElectricalSignalData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:github.com.pyrus.platform.protos.ElectricalSignalData)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ElectricalSignalData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:github.com.pyrus.platform.protos.ElectricalSignalData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 signalId = 1;
  if (this->signalid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->signalid(), output);
  }

  // float value = 2;
  if (this->value() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->value(), output);
  }

  // .google.protobuf.Timestamp created = 4;
  if (this->has_created()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, HasBitSetters::created(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:github.com.pyrus.platform.protos.ElectricalSignalData)
}

::google::protobuf::uint8* ElectricalSignalData::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:github.com.pyrus.platform.protos.ElectricalSignalData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 signalId = 1;
  if (this->signalid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->signalid(), target);
  }

  // float value = 2;
  if (this->value() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->value(), target);
  }

  // .google.protobuf.Timestamp created = 4;
  if (this->has_created()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, HasBitSetters::created(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:github.com.pyrus.platform.protos.ElectricalSignalData)
  return target;
}

size_t ElectricalSignalData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:github.com.pyrus.platform.protos.ElectricalSignalData)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.protobuf.Timestamp created = 4;
  if (this->has_created()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *created_);
  }

  // uint32 signalId = 1;
  if (this->signalid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->signalid());
  }

  // float value = 2;
  if (this->value() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ElectricalSignalData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:github.com.pyrus.platform.protos.ElectricalSignalData)
  GOOGLE_DCHECK_NE(&from, this);
  const ElectricalSignalData* source =
      ::google::protobuf::DynamicCastToGenerated<ElectricalSignalData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:github.com.pyrus.platform.protos.ElectricalSignalData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:github.com.pyrus.platform.protos.ElectricalSignalData)
    MergeFrom(*source);
  }
}

void ElectricalSignalData::MergeFrom(const ElectricalSignalData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:github.com.pyrus.platform.protos.ElectricalSignalData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_created()) {
    mutable_created()->::google::protobuf::Timestamp::MergeFrom(from.created());
  }
  if (from.signalid() != 0) {
    set_signalid(from.signalid());
  }
  if (from.value() != 0) {
    set_value(from.value());
  }
}

void ElectricalSignalData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:github.com.pyrus.platform.protos.ElectricalSignalData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ElectricalSignalData::CopyFrom(const ElectricalSignalData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:github.com.pyrus.platform.protos.ElectricalSignalData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ElectricalSignalData::IsInitialized() const {
  return true;
}

void ElectricalSignalData::Swap(ElectricalSignalData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ElectricalSignalData::InternalSwap(ElectricalSignalData* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(created_, other->created_);
  swap(signalid_, other->signalid_);
  swap(value_, other->value_);
}

::google::protobuf::Metadata ElectricalSignalData::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_common_2eproto);
  return ::file_level_metadata_common_2eproto[kIndexInFileMessages];
}


// ===================================================================

void Frame::InitAsDefaultInstance() {
  ::github::com::pyrus::platform::protos::_Frame_default_instance_._instance.get_mutable()->nullablerobotcontrollerdata_ = const_cast< ::github::com::pyrus::platform::protos::NullableRobotControllerData*>(
      ::github::com::pyrus::platform::protos::NullableRobotControllerData::internal_default_instance());
  ::github::com::pyrus::platform::protos::_Frame_default_instance_._instance.get_mutable()->created_ = const_cast< ::google::protobuf::Timestamp*>(
      ::google::protobuf::Timestamp::internal_default_instance());
}
class Frame::HasBitSetters {
 public:
  static const ::github::com::pyrus::platform::protos::NullableRobotControllerData& nullablerobotcontrollerdata(const Frame* msg);
  static const ::google::protobuf::Timestamp& created(const Frame* msg);
};

const ::github::com::pyrus::platform::protos::NullableRobotControllerData&
Frame::HasBitSetters::nullablerobotcontrollerdata(const Frame* msg) {
  return *msg->nullablerobotcontrollerdata_;
}
const ::google::protobuf::Timestamp&
Frame::HasBitSetters::created(const Frame* msg) {
  return *msg->created_;
}
void Frame::clear_created() {
  if (GetArenaNoVirtual() == nullptr && created_ != nullptr) {
    delete created_;
  }
  created_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Frame::kCatheterDataFieldNumber;
const int Frame::kNullableRobotControllerDataFieldNumber;
const int Frame::kElectricalSignalsFieldNumber;
const int Frame::kCreatedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Frame::Frame()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:github.com.pyrus.platform.protos.Frame)
}
Frame::Frame(const Frame& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      catheterdata_(from.catheterdata_),
      electricalsignals_(from.electricalsignals_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_nullablerobotcontrollerdata()) {
    nullablerobotcontrollerdata_ = new ::github::com::pyrus::platform::protos::NullableRobotControllerData(*from.nullablerobotcontrollerdata_);
  } else {
    nullablerobotcontrollerdata_ = nullptr;
  }
  if (from.has_created()) {
    created_ = new ::google::protobuf::Timestamp(*from.created_);
  } else {
    created_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:github.com.pyrus.platform.protos.Frame)
}

void Frame::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_Frame_common_2eproto.base);
  ::memset(&nullablerobotcontrollerdata_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&created_) -
      reinterpret_cast<char*>(&nullablerobotcontrollerdata_)) + sizeof(created_));
}

Frame::~Frame() {
  // @@protoc_insertion_point(destructor:github.com.pyrus.platform.protos.Frame)
  SharedDtor();
}

void Frame::SharedDtor() {
  if (this != internal_default_instance()) delete nullablerobotcontrollerdata_;
  if (this != internal_default_instance()) delete created_;
}

void Frame::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Frame& Frame::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Frame_common_2eproto.base);
  return *internal_default_instance();
}


void Frame::Clear() {
// @@protoc_insertion_point(message_clear_start:github.com.pyrus.platform.protos.Frame)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  catheterdata_.Clear();
  electricalsignals_.Clear();
  if (GetArenaNoVirtual() == nullptr && nullablerobotcontrollerdata_ != nullptr) {
    delete nullablerobotcontrollerdata_;
  }
  nullablerobotcontrollerdata_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && created_ != nullptr) {
    delete created_;
  }
  created_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Frame::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Frame*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated .github.com.pyrus.platform.protos.CatheterData catheterData = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::github::com::pyrus::platform::protos::CatheterData::_InternalParse;
          object = msg->add_catheterdata();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 10 && (ptr += 1));
        break;
      }
      // .github.com.pyrus.platform.protos.NullableRobotControllerData nullableRobotControllerData = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::github::com::pyrus::platform::protos::NullableRobotControllerData::_InternalParse;
        object = msg->mutable_nullablerobotcontrollerdata();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // repeated .github.com.pyrus.platform.protos.ElectricalSignalData electricalSignals = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::github::com::pyrus::platform::protos::ElectricalSignalData::_InternalParse;
          object = msg->add_electricalsignals();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 26 && (ptr += 1));
        break;
      }
      // .google.protobuf.Timestamp created = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::Timestamp::_InternalParse;
        object = msg->mutable_created();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Frame::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:github.com.pyrus.platform.protos.Frame)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .github.com.pyrus.platform.protos.CatheterData catheterData = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_catheterdata()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .github.com.pyrus.platform.protos.NullableRobotControllerData nullableRobotControllerData = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_nullablerobotcontrollerdata()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .github.com.pyrus.platform.protos.ElectricalSignalData electricalSignals = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_electricalsignals()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Timestamp created = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_created()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:github.com.pyrus.platform.protos.Frame)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:github.com.pyrus.platform.protos.Frame)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Frame::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:github.com.pyrus.platform.protos.Frame)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .github.com.pyrus.platform.protos.CatheterData catheterData = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->catheterdata_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->catheterdata(static_cast<int>(i)),
      output);
  }

  // .github.com.pyrus.platform.protos.NullableRobotControllerData nullableRobotControllerData = 2;
  if (this->has_nullablerobotcontrollerdata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::nullablerobotcontrollerdata(this), output);
  }

  // repeated .github.com.pyrus.platform.protos.ElectricalSignalData electricalSignals = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->electricalsignals_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->electricalsignals(static_cast<int>(i)),
      output);
  }

  // .google.protobuf.Timestamp created = 4;
  if (this->has_created()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, HasBitSetters::created(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:github.com.pyrus.platform.protos.Frame)
}

::google::protobuf::uint8* Frame::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:github.com.pyrus.platform.protos.Frame)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .github.com.pyrus.platform.protos.CatheterData catheterData = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->catheterdata_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->catheterdata(static_cast<int>(i)), target);
  }

  // .github.com.pyrus.platform.protos.NullableRobotControllerData nullableRobotControllerData = 2;
  if (this->has_nullablerobotcontrollerdata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::nullablerobotcontrollerdata(this), target);
  }

  // repeated .github.com.pyrus.platform.protos.ElectricalSignalData electricalSignals = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->electricalsignals_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->electricalsignals(static_cast<int>(i)), target);
  }

  // .google.protobuf.Timestamp created = 4;
  if (this->has_created()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, HasBitSetters::created(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:github.com.pyrus.platform.protos.Frame)
  return target;
}

size_t Frame::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:github.com.pyrus.platform.protos.Frame)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .github.com.pyrus.platform.protos.CatheterData catheterData = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->catheterdata_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->catheterdata(static_cast<int>(i)));
    }
  }

  // repeated .github.com.pyrus.platform.protos.ElectricalSignalData electricalSignals = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->electricalsignals_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->electricalsignals(static_cast<int>(i)));
    }
  }

  // .github.com.pyrus.platform.protos.NullableRobotControllerData nullableRobotControllerData = 2;
  if (this->has_nullablerobotcontrollerdata()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *nullablerobotcontrollerdata_);
  }

  // .google.protobuf.Timestamp created = 4;
  if (this->has_created()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *created_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Frame::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:github.com.pyrus.platform.protos.Frame)
  GOOGLE_DCHECK_NE(&from, this);
  const Frame* source =
      ::google::protobuf::DynamicCastToGenerated<Frame>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:github.com.pyrus.platform.protos.Frame)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:github.com.pyrus.platform.protos.Frame)
    MergeFrom(*source);
  }
}

void Frame::MergeFrom(const Frame& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:github.com.pyrus.platform.protos.Frame)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  catheterdata_.MergeFrom(from.catheterdata_);
  electricalsignals_.MergeFrom(from.electricalsignals_);
  if (from.has_nullablerobotcontrollerdata()) {
    mutable_nullablerobotcontrollerdata()->::github::com::pyrus::platform::protos::NullableRobotControllerData::MergeFrom(from.nullablerobotcontrollerdata());
  }
  if (from.has_created()) {
    mutable_created()->::google::protobuf::Timestamp::MergeFrom(from.created());
  }
}

void Frame::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:github.com.pyrus.platform.protos.Frame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Frame::CopyFrom(const Frame& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:github.com.pyrus.platform.protos.Frame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Frame::IsInitialized() const {
  return true;
}

void Frame::Swap(Frame* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Frame::InternalSwap(Frame* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&catheterdata_)->InternalSwap(CastToBase(&other->catheterdata_));
  CastToBase(&electricalsignals_)->InternalSwap(CastToBase(&other->electricalsignals_));
  swap(nullablerobotcontrollerdata_, other->nullablerobotcontrollerdata_);
  swap(created_, other->created_);
}

::google::protobuf::Metadata Frame::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_common_2eproto);
  return ::file_level_metadata_common_2eproto[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace protos
}  // namespace platform
}  // namespace pyrus
}  // namespace com
}  // namespace github
namespace google {
namespace protobuf {
template<> PROTOBUF_NOINLINE ::github::com::pyrus::platform::protos::Device* Arena::CreateMaybeMessage< ::github::com::pyrus::platform::protos::Device >(Arena* arena) {
  return Arena::CreateInternal< ::github::com::pyrus::platform::protos::Device >(arena);
}
template<> PROTOBUF_NOINLINE ::github::com::pyrus::platform::protos::DeviceInfo* Arena::CreateMaybeMessage< ::github::com::pyrus::platform::protos::DeviceInfo >(Arena* arena) {
  return Arena::CreateInternal< ::github::com::pyrus::platform::protos::DeviceInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::github::com::pyrus::platform::protos::Coordinates* Arena::CreateMaybeMessage< ::github::com::pyrus::platform::protos::Coordinates >(Arena* arena) {
  return Arena::CreateInternal< ::github::com::pyrus::platform::protos::Coordinates >(arena);
}
template<> PROTOBUF_NOINLINE ::github::com::pyrus::platform::protos::Quaternion* Arena::CreateMaybeMessage< ::github::com::pyrus::platform::protos::Quaternion >(Arena* arena) {
  return Arena::CreateInternal< ::github::com::pyrus::platform::protos::Quaternion >(arena);
}
template<> PROTOBUF_NOINLINE ::github::com::pyrus::platform::protos::CatheterCoordinates* Arena::CreateMaybeMessage< ::github::com::pyrus::platform::protos::CatheterCoordinates >(Arena* arena) {
  return Arena::CreateInternal< ::github::com::pyrus::platform::protos::CatheterCoordinates >(arena);
}
template<> PROTOBUF_NOINLINE ::github::com::pyrus::platform::protos::CatheterData* Arena::CreateMaybeMessage< ::github::com::pyrus::platform::protos::CatheterData >(Arena* arena) {
  return Arena::CreateInternal< ::github::com::pyrus::platform::protos::CatheterData >(arena);
}
template<> PROTOBUF_NOINLINE ::github::com::pyrus::platform::protos::RobotControllerData* Arena::CreateMaybeMessage< ::github::com::pyrus::platform::protos::RobotControllerData >(Arena* arena) {
  return Arena::CreateInternal< ::github::com::pyrus::platform::protos::RobotControllerData >(arena);
}
template<> PROTOBUF_NOINLINE ::github::com::pyrus::platform::protos::NullableRobotControllerData* Arena::CreateMaybeMessage< ::github::com::pyrus::platform::protos::NullableRobotControllerData >(Arena* arena) {
  return Arena::CreateInternal< ::github::com::pyrus::platform::protos::NullableRobotControllerData >(arena);
}
template<> PROTOBUF_NOINLINE ::github::com::pyrus::platform::protos::ElectricalSignalData* Arena::CreateMaybeMessage< ::github::com::pyrus::platform::protos::ElectricalSignalData >(Arena* arena) {
  return Arena::CreateInternal< ::github::com::pyrus::platform::protos::ElectricalSignalData >(arena);
}
template<> PROTOBUF_NOINLINE ::github::com::pyrus::platform::protos::Frame* Arena::CreateMaybeMessage< ::github::com::pyrus::platform::protos::Frame >(Arena* arena) {
  return Arena::CreateInternal< ::github::com::pyrus::platform::protos::Frame >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
